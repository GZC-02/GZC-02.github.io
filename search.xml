<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>方法</title>
      <link href="/2023/01/01/%E6%96%B9%E6%B3%95/"/>
      <url>/2023/01/01/%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>​    <strong>方法（method）</strong>是程序中<strong>最小的执行单元</strong></p><ul><li><p>注意：</p><ul><li><p>方法必须先创建才可以使用，该过程成为方法定义</p></li><li><p>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</p></li></ul></li></ul><h3 id="1-2-实际开发中，什么时候用到方法？"><a href="#1-2-实际开发中，什么时候用到方法？" class="headerlink" title="1.2. 实际开发中，什么时候用到方法？"></a>1.2. 实际开发中，什么时候用到方法？</h3><p>重复的代码、具有独立功能的代码可以抽取到方法中。</p><h3 id="1-3-实际开发中，方法有什么好处？"><a href="#1-3-实际开发中，方法有什么好处？" class="headerlink" title="1.3. 实际开发中，方法有什么好处？"></a>1.3. 实际开发中，方法有什么好处？</h3><p>●可以提高代码的复用性<br>●可以提高代码的可维护性</p><h3 id="1-4-方法的定义"><a href="#1-4-方法的定义" class="headerlink" title="1.4 方法的定义"></a>1.4 方法的定义</h3><p>通俗来说，就是把一些代码打包起来，</p><p>带返回值方法的定义：</p><h3 id="1-5-方法的调用"><a href="#1-5-方法的调用" class="headerlink" title="1.5 方法的调用"></a>1.5 方法的调用</h3><p>方法定义后并不是直接运行的，而是手动调用才能知执行</p><h3 id="1-6-最简单的方法定义和调用："><a href="#1-6-最简单的方法定义和调用：" class="headerlink" title="1.6 最简单的方法定义和调用："></a>1.6 <strong>最简单的方法定义</strong>和调用：</h3><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 () &#123;</span><br><span class="line">方法体（就是打包起来的代码）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure><h3 id="1-7-带参数的方法定义和调用"><a href="#1-7-带参数的方法定义和调用" class="headerlink" title="1.7 带参数的方法定义和调用"></a>1.7 带参数的方法定义和调用</h3><p>参数：由数据类型和变量名组成 -  数据类型 变量名</p><p>示例：int a</p><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3.</span>..) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错</p><p>方法定义时，多个参数之间使用逗号( ，)分隔</p><p><strong>调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数)；</span><br><span class="line"></span><br><span class="line">方法名(参数1,参数2);</span><br></pre></td></tr></table></figure><h3 id="1-8-形参和实参"><a href="#1-8-形参和实参" class="headerlink" title="1.8 形参和实参"></a>1.8 形参和实参</h3><ol><li>形参：方法定义中的参数</li></ol><p>​          等同于变量定义格式，例如：int number</p><ol start="2"><li>实参：方法调用中的参数</li></ol><p>​          等同于使用变量或常量，例如： 10  number</p><h3 id="1-9-带返回值方法的定义和调用"><a href="#1-9-带返回值方法的定义和调用" class="headerlink" title="1.9 带返回值方法的定义和调用"></a>1.9 带返回值方法的定义和调用</h3><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line"><span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法名 ( 参数 ) ;</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 ) ;</span><br></pre></td></tr></table></figure><h3 id="1-10-注意事项"><a href="#1-10-注意事项" class="headerlink" title="1.10 注意事项"></a>1.10 注意事项</h3><ul><li><p>方法不能嵌套定义</p><ul><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 这里会引发编译错误!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p><ul><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return 100; 编译错误，因为没有具体返回值类型</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//System.out.println(100); return语句后面不能跟数据或代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-11-方法的通用格式"><a href="#1-11-方法的通用格式" class="headerlink" title="1.11 方法的通用格式"></a>1.11 方法的通用格式</h3><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123;</span><br><span class="line">   方法体; </span><br><span class="line">   <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解释：</p><ul><li><p>public static     修饰符，目前先记住这个格式</p><p>返回值类型    方法操作完毕之后返回的数据的数据类型</p><p>​            如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p><p> 方法名        调用方法时候使用的标识</p><p> 参数        由数据类型和变量名组成，多个参数之间用逗号隔开</p><p> 方法体        完成功能的代码块</p><p> return        如果方法操作完毕，有数据返回，用于把数据返回给调用者</p></li></ul></li><li><p>定义方法时，要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意：</p><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><h2 id="2-方法的重载"><a href="#2-方法的重载" class="headerlink" title="2 方法的重载"></a>2 方法的重载</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul><li><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的<strong>参数不相同</strong>，<strong>类型不同</strong>或者<strong>数量不同</strong></li></ul><p><strong>简单记</strong>：<strong>同一个类中，==方法名相同==，==参数不同==的方法。==与返回值==无关。</strong></p><p>参数不同：<strong>个数</strong>，<strong>类型</strong>，<strong>顺序</strong>不同。</p><p>java虚拟机会通过参数的不同来区分同名的方法</p></li><li><p>注意：</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></li><li><p>正确范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">double</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123; <span class="comment">/*错误原因：重载与返回值无关*/</span></span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">double</span> a)</span> &#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span></span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>顺序不同</strong></p><p><img src="/%E6%96%B9%E6%B3%95/image-20230101225751608.png" alt="顺序不同构成重载"></p><h3 id="2-2-方法重载练习"><a href="#2-2-方法重载练习" class="headerlink" title="2.2 方法重载练习"></a>2.2 方法重载练习</h3>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java数组</title>
      <link href="/2022/12/30/java%E6%95%B0%E7%BB%84/"/>
      <url>/2022/12/30/java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>​        🧨数组指的是一种容器，用来存储同种数据类型的多个值。（在内存中开辟一个空间）</p><p>​    但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p><p>比如：</p><p>​    定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，</p><p>​    但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。</p><p>建议：</p><p>​    容器的类，和存储的数据类型保持一致。</p><p>举例：</p><p>​    整数1 2 3 4 56 就可以使用int类型的数组来存储。</p><p>​    小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。</p><p>​    字符串”aaa”  “bbb”  “ccc” 就可以使用String类型的数组来存储。</p><h3 id="1-2-数组的定义"><a href="#1-2-数组的定义" class="headerlink" title="1.2 数组的定义"></a>1.2 数组的定义</h3><p>变量的定义：</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230173130357.png" alt="image-20221230173130357"></p><p>数组的定义</p><h4 id="格式一：数据类型-数组名"><a href="#格式一：数据类型-数组名" class="headerlink" title="格式一：数据类型 [] 数组名"></a>格式一：<strong>数据类型 [] 数组名</strong></h4><p>比如：int [] array</p><h4 id="格式二：数据类型-数组名"><a href="#格式二：数据类型-数组名" class="headerlink" title="格式二：数据类型  数组名 []"></a>格式二：<strong>数据类型  数组名 []</strong></h4><p>比如： int array []</p><p><strong>详解</strong>：</p><p>数据类型：限定了数组以后能存什么类型的数据。</p><p>方括号：表示现在定义的是一个数组。</p><p>数组名：就是一个名字而已，方便以后使用。</p><p><strong>注意点</strong>：</p><p>​    <strong>方法括号跟数组名，谁写在前面，谁写在后面都是一样的。</strong></p><p>​    <strong>平时习惯性使用第一种方式。</strong></p><h3 id="1-3-数组的静态初始化"><a href="#1-3-数组的静态初始化" class="headerlink" title="1.3.数组的静态初始化"></a>1.3.数组的静态初始化</h3><p>​    初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程.</p><h4 id="完整格式：数据类型-数组名-new-数据类型-元素1，元素2，元素3，元素4…"><a href="#完整格式：数据类型-数组名-new-数据类型-元素1，元素2，元素3，元素4…" class="headerlink" title="完整格式：数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4…};"></a>完整格式：数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4…};</h4><p>比如：</p><p>​    int[] arr = new int[]{11,22,33};</p><p>​    double[] arr = new double[]{1.1,1.2,1.3};</p><p><strong>格式详解</strong>：</p><p>​    数据类型：限定了数组以后能存什么类型的数据。</p><p>​    方括号：表示现在定义的是一个数组。</p><p>​    数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。</p><p>​            arr   namesArr</p><p>​    new：就是给数组在内存中开辟了一个空间。</p><p>​    数据类型：限定了数组以后能存什么类型的数据。</p><p>​              前面和后面的数据类型一定要保持一致。</p><p>​            int[] arr = new double[]{11,22,33};//错误写法</p><p>​    方括号：表示现在定义的是一个数组。</p><p>​    大括号：表示数组里面的元素。元素也就是存入到数组中的数据。</p><p>​            多个元素之间，一定要用逗号隔开。</p><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>等号前后的数据类型必须保持一致。</li><li>数组一旦创建之后，长度不能发生变化。</li></ul><h3 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式:"></a>简化格式:</h3><p>​    <strong>数据类型[] 数组名 = {元素1，元素2，元素3，元素4…};</strong></p><p>比如：</p><p>​    int[] array = {1,2,3,4,5};</p><p>​    double[] array = {1.1,1.2,1.3};</p><h3 id="1-4-地址值"><a href="#1-4-地址值" class="headerlink" title="1.4 地址值"></a>1.4 地址值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@6d03e736</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] arr2 = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>&#125;;</span><br><span class="line">System.out.println(arr2);<span class="comment">//[D@568db2f2</span></span><br></pre></td></tr></table></figure><p>打印数组的时候，实际出现的是数组的地址值。</p><p>数组的地址值：就表示数组在内存中的位置。</p><p>以[I@6d03e736为例：</p><p><strong>[</strong> ：表示现在打印的是一个数组。</p><p><strong>I</strong>：表示现在打印的数组是int类型的。</p><p>**@**：仅仅是一个间隔符号而已。</p><p><strong>6d03e736</strong>：就是数组在内存中真正的地址值。（<strong>十六进制的</strong>）</p><p><strong>但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。</strong></p><p>地址值对于我们来京，作用不大，简单了解。</p><h3 id="1-5-元素访问"><a href="#1-5-元素访问" class="headerlink" title="1.5 元素访问"></a>1.5 元素访问</h3><h4 id="1-5-1-格式-数组名-索引"><a href="#1-5-1-格式-数组名-索引" class="headerlink" title="1.5.1 格式    数组名[索引];"></a>1.5.1 格式    数组名[索引];</h4><h4 id="1-5-2-作用："><a href="#1-5-2-作用：" class="headerlink" title="1.5.2 作用："></a>1.5.2 作用：</h4><ul><li><p>获取数组中对应索引上的值</p></li><li><p>修改数组中对应索引上的值</p><p>一旦修改之后，原来的值就会被覆盖了。</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        数组中元素访问的格式：</span></span><br><span class="line"><span class="comment">                数组名[索引];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         作用：</span></span><br><span class="line"><span class="comment">            1.获取指定索引上对应的元素</span></span><br><span class="line"><span class="comment">            2.修改指定索引上对应的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">       <span class="comment">//需求1：获取arr数组中，3索引上的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr[<span class="number">3</span>];</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//需求2：将arr数组中，3索引上的值修改为10</span></span><br><span class="line">            arr[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改之后为:&quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-索引"><a href="#1-6-索引" class="headerlink" title="1.6 索引"></a>1.6 索引</h3><p>​    也叫角标、下标 。</p><p>​    就是数组容器中每一个小格子对应的编号。</p><p><strong>索引的特点</strong>：</p><ul><li>索引一定是从0开始的。</li><li>连续不间断。</li><li>逐个+1增长。</li></ul><h3 id="1-7-数组遍历"><a href="#1-7-数组遍历" class="headerlink" title="1.7 数组遍历"></a>1.7 数组遍历</h3><p>遍历：就是把数组里面所有的内容一个一个全部取出来。</p><p>数组的长度：数组名.length;</p><p>通用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环的过程中，i依次表示数组中的每一个索引</span></span><br><span class="line">    sout(arr[i]);<span class="comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-数组的动态初始化"><a href="#1-8-数组的动态初始化" class="headerlink" title="1.8 数组的动态初始化"></a>1.8 数组的动态初始化</h3><h4 id="1-8-1-格式：数据类型-数组名-new-数据类型-数组的长度"><a href="#1-8-1-格式：数据类型-数组名-new-数据类型-数组的长度" class="headerlink" title="1.8.1 格式：数据类型[] 数组名 = new 数据类型[数组的长度];"></a>1.8.1 格式：数据类型[] 数组名 = new 数据类型[数组的长度];</h4><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义一个数组，存3个人的年龄，年龄未知</span></span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span></span><br><span class="line"><span class="type">int</span>[] scoresArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h4 id="1-8-2-数组的默认初始化值："><a href="#1-8-2-数组的默认初始化值：" class="headerlink" title="1.8.2 数组的默认初始化值："></a>1.8.2 数组的默认初始化值：</h4><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’（空格）</p><p>引用类型：null</p><h3 id="1-9-数组两种初始化"><a href="#1-9-数组两种初始化" class="headerlink" title="1.9 数组两种初始化"></a>1.9 数组两种初始化</h3><h4 id="1-9-1-区别"><a href="#1-9-1-区别" class="headerlink" title="1.9.1 区别"></a>1.9.1 区别</h4><p>静态初始化：int[] arr = {1,2,3,4,5};</p><p>动态初始化：int[] arr = new int[3];</p><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><h4 id="1-9-1使用场景："><a href="#1-9-1使用场景：" class="headerlink" title="1.9.1使用场景："></a>1.9.1使用场景：</h4><p>只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。</p><p>已经明确了要操作的所有数据，推荐使用静态初始化。</p><p>举例：</p><ul><li><p>使用数组来存储键盘录入的5个整数。</p><p>int[] arr = new int[5];</p></li><li><p>将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100</p><p>int[] arr = new int[5];</p><p>arr[0] = 66;</p><p>arr[1] = 77;</p><p>… 虽然可以实现，但是太麻烦了。</p><p>建议使用静态初始化：int[] arr = {66,77,88,99,100};</p></li></ul><h3 id="1-10-数组常见问题"><a href="#1-10-数组常见问题" class="headerlink" title="1.10 数组常见问题"></a>1.10 数组常见问题</h3><p> 当访问了数组中不存在的索引，就会引发索引越界异常。</p><p>避免：</p><p>​    针对于任意一个数组，索引的范围：<br>       最小索引：0<br>       最大索引：数组的长度 - 1<br>​                       数组名.length - 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//用索引来访问数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);<span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-11-数组的内存图"><a href="#1-11-数组的内存图" class="headerlink" title="1.11 数组的内存图"></a>1.11 数组的内存图</h3><h4 id="1-11-1-java内存分配"><a href="#1-11-1-java内存分配" class="headerlink" title="1.11.1 java内存分配"></a>1.11.1 java内存分配</h4><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222019733.png" alt="java内存分配"></p><p>其中JVM 一开始，堆和方法区连在一起，一块的空间</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222120001.png" alt="image-20221230222120001"></p><p>然后JDK8就修改了 ，补充了元空间</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222244253.png" alt="image-20221230222244253"></p><p>●🎈栈：方法运行时使用的内存，比如main方法运行，进入方法栈中执行<br>●🎆堆：存储对象或者数组，<strong>new来创建的，都存储在堆内存</strong>，会有地址值，表示位置<br>●方法区：存储可以运行的class文件<br>●本地方法栈：JVM在使用操作系统功能的时候使用，和我们开发无关<br>●寄存器：给CPU使用，和我们开发无关</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222916977.png" alt="数组内存图"></p><h4 id="两个数组指向同一个空间的内存图"><a href="#两个数组指向同一个空间的内存图" class="headerlink" title="两个数组指向同一个空间的内存图"></a>两个数组指向同一个空间的内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[]arr1=&#123;<span class="number">11</span>,<span class="number">22</span>&#125;;</span><br><span class="line"><span class="type">int</span>[]arr2 arr1;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230223045791.png" alt="image-20221230223045791"></p><h3 id="1-12-练习题"><a href="#1-12-练习题" class="headerlink" title="1.12 练习题"></a>1.12 练习题</h3><h4 id="练习7：打乱数据"><a href="#练习7：打乱数据" class="headerlink" title="练习7：打乱数据"></a>练习7：打乱数据</h4><p>需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义数组存储1~5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//2.循环遍历数组，从0索引开始打乱数据的顺序</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//生成一个随机索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">    <span class="comment">//拿着随机索引指向的元素 跟 i 指向的元素进行交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，那么数组中所有的数据已经打乱顺序了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java流程控制</title>
      <link href="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-流程控制语句"><a href="#1-流程控制语句" class="headerlink" title="1.流程控制语句"></a>1.流程控制语句</h2><h3 id="1-1-流程控制语句分类"><a href="#1-1-流程控制语句分类" class="headerlink" title="1.1 流程控制语句分类"></a>1.1 流程控制语句分类</h3><p>​    顺序结构</p><p>​    判断和选择结构(if, switch)</p><p>​    循环结构(for, while, do…while)</p><h3 id="1-2-顺序结构"><a href="#1-2-顺序结构" class="headerlink" title="1.2. 顺序结构"></a>1.2. 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p>顺序结构执行流程图：</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545615769372.png" alt="1545615769372"></p><h3 id="1-3-判断语句-：if"><a href="#1-3-判断语句-：if" class="headerlink" title="1.3. 判断语句 ：if"></a>1.3. 判断语句 ：if</h3><h4 id="1-3-1-格式1"><a href="#1-3-1-格式1" class="headerlink" title="1.3.1 格式1"></a>1.3.1 格式1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545616039363.png" alt="1545616039363"></p><h4 id="if的注意点："><a href="#if的注意点：" class="headerlink" title="if的注意点："></a>if的注意点：</h4><p>1,大括号的开头可以另起一行书可，但是建议可在第一行的末尾<br>2,作语句体中，如果只有一句代码，大括号可以省略不写，个人建议，大括号还是不要省略<br>3,如果对一个布尔类的变量进行判断，不要用 ==号，直接把变量写在小括号里即可</p><h4 id="1-3-2-if-语句格式2"><a href="#1-3-2-if-语句格式2" class="headerlink" title="1.3.2 if 语句格式2"></a>1.3.2 if 语句格式2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545616221283-16723858349621.png" alt="1545616221283"></p><h4 id="1-3-3-if语句格式3"><a href="#1-3-3-if语句格式3" class="headerlink" title="1.3.3 if语句格式3"></a>1.3.3 if语句格式3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545616667104.png" alt="1545616667104"></p><h3 id="1-4-switch-语句"><a href="#1-4-switch-语句" class="headerlink" title="1.4 switch 语句"></a>1.4 switch 语句</h3><h4 id="1-4-1-格式"><a href="#1-4-1-格式" class="headerlink" title="1.4.1 格式"></a>1.4.1 格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-执行流程："><a href="#1-4-2-执行流程：" class="headerlink" title="1.4.2 执行流程："></a>1.4.2 <strong>执行流程：</strong></h4><ul><li>首先计算出表达式的值 </li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 </li></ul><h4 id="1-4-3-格式说明："><a href="#1-4-3-格式说明：" class="headerlink" title="1.4.3 格式说明："></a>1.4.3 格式说明：</h4><p>​    1.表达式：(将要匹配的值)取值为<strong>byte、short、int、char</strong>。<br><strong>JDK5</strong>以后可以是<strong>枚举</strong>，J<strong>DK7</strong>以后可以是<strong>Strin</strong>g。</p><ol start="2"><li>case:后面跟的是要和表达式进行比较的值（被匹配的值）。</li><li>break:表示中断，结束的意思，用来结束switch语句。</li><li>default:表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似。</li><li>case后面的值只能是字面量，不能是变量</li><li>case给出的值不允许重复.</li></ol><h4 id="1-4-3-switch的扩展知识："><a href="#1-4-3-switch的扩展知识：" class="headerlink" title="1.4.3 switch的扩展知识："></a>1.4.3 switch的扩展知识：</h4><ul><li><p>default的位置和省略情况</p><p>default可以放在任意位置，也可以省略</p></li><li><p>case穿透</p><p>不写break会引发case穿透现象</p></li><li><p><strong>switch在JDK12的新特性</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;二&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多个数对应一个执行性语句</span></span><br><span class="line"><span class="comment">int number = 10;</span></span><br><span class="line"><span class="comment">switch (number) &#123;</span></span><br><span class="line"><span class="comment">    case 1:</span></span><br><span class="line"><span class="comment">    case 2:</span></span><br><span class="line"><span class="comment">    case 3: System.out.println(&quot;一&quot;);</span></span><br><span class="line"><span class="comment">    case 5:</span></span><br><span class="line"><span class="comment">    case 7: System.out.println(&quot;二&quot;);</span></span><br><span class="line"><span class="comment">    case 9: System.out.println(&quot;三&quot;);</span></span><br><span class="line"><span class="comment">    default: System.out.println(&quot;其他&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">变成</span></span><br><span class="line"><span class="comment">int number = 10;</span></span><br><span class="line"><span class="comment">switch (number) &#123;</span></span><br><span class="line"><span class="comment">    case 1,2,3 -&gt; System.out.println(&quot;一&quot;);</span></span><br><span class="line"><span class="comment">    case 5,7 -&gt; System.out.println(&quot;二&quot;);</span></span><br><span class="line"><span class="comment">    case 9 -&gt; System.out.println(&quot;三&quot;);</span></span><br><span class="line"><span class="comment">    default -&gt; System.out.println(&quot;其他&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch和if第三种格式各自的使用场景</li></ul><p>当我们需要对一个范围进行判断的时候，用if的第三种格式</p><p>当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句</p><p>比如：</p><p>​    小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。</p><p>​    如果是星期，月份，客服电话中0~9的功能选择就可以用switch</p><h4 id="✨练习：休息日和工作日"><a href="#✨练习：休息日和工作日" class="headerlink" title="✨练习：休息日和工作日"></a>✨练习：休息日和工作日</h4><p>需求：键盘录入星期数，输出工作日、休息日。</p><p>(1-5) 工作日，(6-7)休息日。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入星期数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入星期&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//3</span></span><br><span class="line"><span class="comment">//2.利用switch进行匹配</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line">利用<span class="keyword">case</span>穿透简化代码</span><br><span class="line"><span class="keyword">switch</span> (week)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line">利用JDK12简化代码书写</span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2. 循环结构"></a>2. 循环结构</h2><h3 id="2-1-for-循环结构"><a href="#2-1-for-循环结构" class="headerlink" title="2.1 for 循环结构"></a>2.1 for 循环结构</h3><h4 id="2-1-1-for循环结构"><a href="#2-1-1-for循环结构" class="headerlink" title="2.1.1 for循环结构"></a>2.1.1 for循环结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式解释：</strong></p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul><p><strong>执行流程：</strong></p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p><p><strong>for循环书写技巧：</strong></p><ul><li>确定循环的开始条件</li><li>确定循环的结束条件</li><li>确定循环要重复执行的代码</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.确定循环的开始条件</span></span><br><span class="line"><span class="comment">//2.确定循环的结束条件</span></span><br><span class="line"><span class="comment">//3.确定要重复执行的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：打印5次HelloWorld</span></span><br><span class="line"><span class="comment">//开始条件：1</span></span><br><span class="line"><span class="comment">//结束条件：5</span></span><br><span class="line"><span class="comment">//重复代码：打印语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-求和和统计思想"><a href="#2-1-2-求和和统计思想" class="headerlink" title="2.1.2 求和和统计思想"></a>2.1.2 求和和统计思想</h3><h4 id="for循环练习-求和"><a href="#for循环练习-求和" class="headerlink" title="for循环练习-求和"></a>for循环练习-求和</h4><ul><li>需求：求1-5之间的数据和，并把求和结果在控制台输出  </li><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从1开始到5结束的数据，使用循环结构完成</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="comment">//将反复进行的事情写入循环结构内部</span></span><br><span class="line">             <span class="comment">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span></span><br><span class="line">sum = sum + i;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum += i;sum = sum + i;</span></span><br><span class="line"><span class="comment">第一次：sum = sum + i = 0 + 1 = 1;</span></span><br><span class="line"><span class="comment">第二次：sum = sum + i = 1 + 2 = 3;</span></span><br><span class="line"><span class="comment">第三次：sum = sum + i = 3 + 3 = 6;</span></span><br><span class="line"><span class="comment">第四次：sum = sum + i = 6 + 4 = 10;</span></span><br><span class="line"><span class="comment">第五次：sum = sum + i = 10 + 5 = 15;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环执行完毕时，将最终数据打印出来</span></span><br><span class="line">System.out.println(<span class="string">&quot;1-5之间的数据和是：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>本题要点：<ul><li>今后遇到的需求中，如果带有求和二字，请立即联想到求和变量</li><li>求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的</li></ul></li></ul><h3 id="2-2-while循环"><a href="#2-2-while循环" class="headerlink" title="2.2 while循环"></a>2.2 while循环</h3><h4 id="2-2-1-格式"><a href="#2-2-1-格式" class="headerlink" title="2.2.1 格式"></a>2.2.1 格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1：打印5次HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><h3 id="2-3-do…while循环"><a href="#2-3-do…while循环" class="headerlink" title="2.3 do…while循环"></a>2.3 do…while循环</h3><h4 id="2-3-1-格式："><a href="#2-3-1-格式：" class="headerlink" title="2.3.1 格式："></a>2.3.1 格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure><h4 id="2-3-2-特点：先执行，再判断。"><a href="#2-3-2-特点：先执行，再判断。" class="headerlink" title="2.3.2 特点：先执行，再判断。"></a>2.3.2 特点：先执行，再判断。</h4><h3 id="2-3-3-三种格式的区别："><a href="#2-3-3-三种格式的区别：" class="headerlink" title="2.3.3 三种格式的区别："></a>2.3.3 三种格式的区别：</h3><p>​    1.for和while循环，是先判断，再执行。</p><p>​    2.do…while是先执行，再判断。</p><p>​    3.当知道循环次数或者循环范围的时候，用for循环。</p><p>​    4.当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。</p><h2 id="3-练习题"><a href="#3-练习题" class="headerlink" title="3. 练习题"></a>3. 练习题</h2><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><p>需求：给你一个整数X。<br>如果X是一个回文整数，打印true,否则，返回false。<br>解释：回文数是指正序（从左向右）和倒序（从右向左)读都是一样的整数。<br>例如，121是回文，而123不是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span>x;</span><br><span class="line"><span class="keyword">while</span> (x!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x%<span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">num = num*<span class="number">10</span> + y;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num == tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求商和余数"><a href="#求商和余数" class="headerlink" title="求商和余数"></a>求商和余数</h3><p>需求：<br>给定两个整数，被除数和除数都是正数，且不超过int的范围<br>将两数相除，<strong>要求不使用乘法、除法和%运算符</strong>，得到商和余数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求商和余数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int a = 100;</span></span><br><span class="line"><span class="comment">int b = 10;</span></span><br><span class="line"><span class="comment">100 - 10 == 90</span></span><br><span class="line"><span class="comment">90 - 10 == 80</span></span><br><span class="line"><span class="comment">80 - 10 == 70</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">10 - 10 = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//被除数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">dividend</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//除数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">divisor</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(dividend&gt;=divisor) &#123;</span><br><span class="line">dividend -= divisor;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;商为&quot;</span>+count);</span><br><span class="line">System.out.println(<span class="string">&quot;余数为&quot;</span>+dividend);</span><br></pre></td></tr></table></figure><h2 id="4-循环高级综合练习"><a href="#4-循环高级综合练习" class="headerlink" title="4.循环高级综合练习"></a>4.循环高级综合练习</h2><h3 id="4-1-无限循环"><a href="#4-1-无限循环" class="headerlink" title="4.1 无限循环"></a>4.1 无限循环</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>​    又叫死循环。循环一直停不下来。</p><h4 id="for格式："><a href="#for格式：" class="headerlink" title="for格式："></a>for格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>初始化语句可以空着不写，表示循环之前不定义任何的控制变量。</p><p>条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。</p><p>条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。</p><h4 id="while格式："><a href="#while格式：" class="headerlink" title="while格式："></a>while格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>​    小括号里面就不能省略了，true一定要写出来，否则代码会报错。</p><h4 id="do…while格式："><a href="#do…while格式：" class="headerlink" title="do…while格式："></a>do…while格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>解释：</p><p>​    小括号里面就不能省略了，true一定要写出来，否则代码会报错。</p><h3 id="无限循环的注意事项："><a href="#无限循环的注意事项：" class="headerlink" title="无限循环的注意事项："></a>无限循环的注意事项：</h3><ul><li><strong>最为常用的格式：while</strong></li><li><strong>无限循环下面不能再写其他代码了，因为永远执行不到。</strong></li></ul><h3 id="4-2-条件控制语句"><a href="#4-2-条件控制语句" class="headerlink" title="4.2  条件控制语句"></a>4.2  条件控制语句</h3><ul><li>break</li><li>continue</li></ul><h4 id="1-break"><a href="#1-break" class="headerlink" title="1.break:"></a>1.break:</h4><p>​    <strong>不能单独存在的。可以用在switch和循环中，==表示结束，跳出的意思。==</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    <span class="comment">//2.吃完第三个的时候就不吃了</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//结束整个循环。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-continue"><a href="#2-continue" class="headerlink" title="2.continue:"></a>2.continue:</h4><p>​    <strong>不能单独存在的。只能存在于循环当中。</strong></p><p>​    <strong>表示：==跳过本次循环==，继续执行下次循环。</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//2.第3个包子有虫子就跳过，继续吃下面的包子</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Random"><a href="#3-Random" class="headerlink" title="3. Random"></a>3. Random</h4><p><strong>Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。</strong></p><h5 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h5><ol><li><h6 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h6></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">导包的动作必须出现在类定义的上边。</span><br></pre></td></tr></table></figure><ol start="2"><li><h6 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h6></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span> ();</span><br><span class="line">上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。</span><br></pre></td></tr></table></figure><ol start="3"><li><h6 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h6></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围);</span><br><span class="line">上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。</span><br><span class="line">随机数范围的特点：从<span class="number">0</span>开始，不包含指定值。比如：参数为<span class="number">10</span>，生成的范围[<span class="number">0</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>求【8，10】的随机数</p><p>1.这个范围头尾都减去一个值，让这个范围从零开始。</p><p>2.尾巴加一。</p><p>3.最终结果再加上第一步减去的值。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//3.生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>);<span class="comment">//包左不包右，包头不包尾</span></span><br><span class="line">        <span class="comment">//0 ~ 99</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-猜数字小游戏"><a href="#4-3-猜数字小游戏" class="headerlink" title="4.3 猜数字小游戏"></a>4.3 猜数字小游戏</h3><p>需求：</p><p>​    程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？</p><p>要求：</p><p>​    使用循环猜，一直猜中为止。</p><p>思路分析：</p><ol><li>生成一个1-100之间的随机数</li><li>使用键盘录入去猜出这个数字是多少</li><li>把反复猜的代码写在循环中</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.生成一个1-100之间的随机数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">// 0 ~ 99 + 1 --- 1 ~ 100</span></span><br><span class="line">System.out.println(number);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用键盘录入去猜出这个数字是多少？</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">guessNumber</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">//3.比较</span></span><br><span class="line">    <span class="keyword">if</span>(guessNumber &gt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字大了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字小了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你，猜中了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java运算符</title>
      <link href="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1 算数运算符"></a>1 算数运算符</h2><h3 id="算数运算符类型"><a href="#算数运算符类型" class="headerlink" title="算数运算符类型"></a>算数运算符类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * /  %  <span class="comment">//加减乘除 取模或取余</span></span><br></pre></td></tr></table></figure><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2 + - *"></a>1.2 + - *</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// +</span></span><br><span class="line">System.out.println(<span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -</span></span><br><span class="line">System.out.println(<span class="number">3</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// * (shift + 数字8)</span></span><br><span class="line">System.out.println(<span class="number">3</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// / </span></span><br><span class="line">System.out.println(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果计算时候有小数参与 在代码中，如果有小数参与计算，结果可能不精确的</span></span><br><span class="line"><span class="comment">//具体原因：到了java.SE时候，会详细学习。</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> + <span class="number">1.1</span>); <span class="comment">// 2.2</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> + <span class="number">2</span>);  <span class="comment">// 3.1</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> - <span class="number">1.01</span>);<span class="comment">// 0.09000000000000008</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p><em>==如果计算时候有小数参与 在代码中，如果有小数参与计算，结果可能不精确的.==</em><br>具体原因：到了java.SE时候，会详细学习。</p><h3 id="1-3-除法"><a href="#1-3-除法" class="headerlink" title="1.3 除法"></a>1.3 除法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除法</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">2</span>);<span class="comment">//5</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>); <span class="comment">//3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>整数参与 计算，结果只能是整数</p><p>==小数参与计算，结果可能存在不精确的，如果我们需要精确计算，那么需要用到后面的知识点。==</p><h3 id="1-4-取余-取模"><a href="#1-4-取余-取模" class="headerlink" title="1.4 取余 / 取模"></a>1.4 取余 / 取模</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取余</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>应用场景：</p><p>1.可以用来取模来判断 A是否能被Ｂ整除。</p><p>２.可以判断Ａ是否为偶数。</p><h3 id="练习：数值拆分"><a href="#练习：数值拆分" class="headerlink" title="练习：数值拆分"></a>练习：数值拆分</h3><p>需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.键盘录入一个三位数</span></span><br><span class="line"><span class="comment">//导包 --- 创建对象 --- 接收数据</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个三位数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取这个三位数的个位、十位、百位并打印出来</span></span><br><span class="line"><span class="comment">//公式：</span></span><br><span class="line"><span class="comment">//针对于任意的一个数而言</span></span><br><span class="line"><span class="comment">//个位： 数字 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ones</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//十位： 数字 / 10 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">tens</span> <span class="operator">=</span> number / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//百位： 数字 / 100 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hundreds</span> <span class="operator">=</span> number / <span class="number">100</span>  % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(ones);</span><br><span class="line">System.out.println(tens);</span><br><span class="line">System.out.println(hundreds);</span><br></pre></td></tr></table></figure><p>公式：</p><p>​    获取任意一个数上每一位数。</p><p>个位：数字 % 10</p><p>十位：数字 / 10 % 10</p><p>百位：数字 / 100 % 10</p><p>千位：数字 / 1000 % 10</p><p>。。。以此类推。。。</p><h3 id="１-５-隐式转换（自动类型提升）"><a href="#１-５-隐式转换（自动类型提升）" class="headerlink" title="１.５　隐式转换（自动类型提升）"></a>１.５　隐式转换（自动类型提升）</h3><p>数字进行数据运算时，数据类型不一样的不能运算，需要转换成一样的，才能运算。</p><h4 id="1-5-1-含义"><a href="#1-5-1-含义" class="headerlink" title="1.5.1 含义"></a>1.5.1 含义</h4><p>取值范围小的数值变成取值范围大的数值。</p><p>就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。</p><p>​        <strong>简单记忆：就是小的给大的，可以直接给。</strong></p><h4 id="1-5-2-两种提升规则："><a href="#1-5-2-两种提升规则：" class="headerlink" title="1.5.2 两种提升规则："></a>1.5.2 两种提升规则：</h4><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li><strong>==byte、short、char==三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。</strong></li></ul><h4 id="1-5-3-取值范围从小到大的关系："><a href="#1-5-3-取值范围从小到大的关系：" class="headerlink" title="1.5.3 取值范围从小到大的关系："></a>1.5.3 取值范围从小到大的关系：</h4><p>​    byte short int long float double</p><h4 id="1-5-4-注意点"><a href="#1-5-4-注意点" class="headerlink" title="1.5.4 注意点"></a>1.5.4 注意点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><p>这行代码会报错，等式右边是double型，不会随等号左边的数据类型变换，</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229212622718.png" alt="image-20221229212622718"> </p><h4 id="1-5-5-练习题"><a href="#1-5-5-练习题" class="headerlink" title="1.5.5 练习题"></a>1.5.5 练习题</h4><p>案例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(d);<span class="comment">//10.0</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​    10是整数，整数默认是int类型的。</p><p>​    而在取值范围的顺序中：byte short int long float double</p><p>​    在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。</p><p>案例五：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">result = b1 + b2;<span class="comment">//int</span></span><br><span class="line"><span class="comment">//问变量result是什么类型的？</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​    因为b1和b2都是byte类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。</p><h3 id="１-６-强制转换"><a href="#１-６-强制转换" class="headerlink" title="１.６　强制转换"></a>１.６　强制转换</h3><h4 id="1-6-1-概念"><a href="#1-6-1-概念" class="headerlink" title="1.6.1 概念"></a>1.6.1 概念</h4><p>取值范围大的变成取值范围小的</p><p>​    如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。</p><p>​    如果一定要这么干，就需要加入强制转换。</p><h4 id="1-6-2-书写格式："><a href="#1-6-2-书写格式：" class="headerlink" title="1.6.2 书写格式："></a>1.6.2 书写格式：</h4><p>​    目标数据类型 变量名 = （目标数据类型）被强转的数据；</p><p><strong>注意点：</strong></p><p>​    强制转换有可能会导致数据发生错误。（数据的精度丢失）</p><h3 id="1-7-字符串的-操作"><a href="#1-7-字符串的-操作" class="headerlink" title="1.7 字符串的+操作"></a>1.7 字符串的+操作</h3><h4 id="1-7-1核心操作"><a href="#1-7-1核心操作" class="headerlink" title="1.7.1核心操作"></a>1.7.1核心操作</h4><ul><li>当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。</li><li><strong>当连续进行+操作时，从左到右逐个执行的。</strong></li></ul><h4 id="1-7-2-练习题"><a href="#1-7-2-练习题" class="headerlink" title="1.7.2  练习题"></a>1.7.2  练习题</h4><p>案例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果：“3abc21”</p><p>解释：</p><p>​    第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。</p><p>​    第二步：3 + “abc”。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”3abc”。</p><p>​    第三步：”3abc” + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”3abc2”。</p><p>​    第四步：”3abc2” + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”</p><p>案例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;黑默丁格&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;我的名字是&quot;</span> + name);</span><br></pre></td></tr></table></figure><p>结果： 我的名字是黑默丁格</p><p>解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。</p><p>案例三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span>+<span class="number">2</span>+<span class="string">&quot;age&quot;</span>+<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//输出：“3agetrue”</span></span><br></pre></td></tr></table></figure><h3 id="1-8-字符相加"><a href="#1-8-字符相加" class="headerlink" title="1.8  字符相加"></a>1.8  字符相加</h3><h4 id="✨规则"><a href="#✨规则" class="headerlink" title="✨规则"></a>✨规则</h4><p>​        当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。</p><p><strong>案例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c + <span class="number">0</span>;</span><br><span class="line">System.out.println(result);<span class="comment">//97</span></span><br></pre></td></tr></table></figure><p>ASCII码表中：</p><p>​    ‘a’   —–    97</p><p>​    ‘A’   —–    65</p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">//输出：aage</span></span><br></pre></td></tr></table></figure><h3 id="总结-字符串只能进行加操作"><a href="#总结-字符串只能进行加操作" class="headerlink" title="总结 字符串只能进行加操作"></a>总结 字符串只能进行加操作</h3><h2 id="2-自增自减运算"><a href="#2-自增自减运算" class="headerlink" title="2 自增自减运算"></a>2 自增自减运算</h2><h3 id="2-1-分类："><a href="#2-1-分类：" class="headerlink" title="2.1 分类："></a>2.1 分类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">++  自增运算符</span><br><span class="line">--  自减运算符</span><br></pre></td></tr></table></figure><p>++：就是把变量里面的值+1</p><p>–：就是把变量里面的值-1</p><h3 id="2-2-使用方式："><a href="#2-2-使用方式：" class="headerlink" title="2.2 使用方式："></a>2.2 使用方式：</h3><ul><li>放在变量的前面，我们叫做先++。 比如：++a</li><li>放在变量的后面，我们叫做后++。 比如：a++</li></ul><h3 id="2-3-注意点："><a href="#2-3-注意点：" class="headerlink" title="2.3 注意点："></a>2.3 注意点：</h3><p>​    不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。</p><h3 id="2-4-案例："><a href="#2-4-案例：" class="headerlink" title="2.4 案例："></a>2.4 案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//++</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">a++;<span class="comment">//就是让变量a里面的值 + 1</span></span><br><span class="line">System.out.println(a);<span class="comment">//11</span></span><br><span class="line">++a;<span class="comment">//就是让变量a里面的值 + 1</span></span><br><span class="line">System.out.println(a);<span class="comment">//12</span></span><br></pre></td></tr></table></figure><h3 id="2-5-自增自减运算符的应用场景："><a href="#2-5-自增自减运算符的应用场景：" class="headerlink" title="2.5 自增自减运算符的应用场景："></a>2.5 自增自减运算符的应用场景：</h3><p>某些情况下，变量需要进行加1或者减1的时候使用。</p><p>比如：过生日多一岁，就用到了自增运算符。</p><p>比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。</p><p>比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。</p><h2 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h2><p>最为常用的：    =</p><p>运算过程：就是把等号右边的结果赋值给左边的变量</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.最为简单的赋值运算符用法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//就是把10赋值给变量a</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.如果等号右边需要进行计算。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;<span class="comment">//先计算等号右边的，把计算的结果赋值给左边的变量</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.特殊的用法</span></span><br><span class="line">        a = a + <span class="number">10</span>;<span class="comment">//先计算等号右边的，把计算的结果赋值给左边的变量</span></span><br><span class="line">        System.out.println(a);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展赋值运算符"><a href="#4-扩展赋值运算符" class="headerlink" title="4.扩展赋值运算符"></a>4.扩展赋值运算符</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>​    +=、-=、*=、/=、%=</p><h3 id="运算规则："><a href="#运算规则：" class="headerlink" title="运算规则："></a>运算规则：</h3><p>​    就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//扩展赋值运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        a += b;<span class="comment">//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响</span></span><br><span class="line">        <span class="comment">// 相当于 a = a + b;</span></span><br><span class="line">        System.out.println(a);<span class="comment">//30</span></span><br><span class="line">        System.out.println(b);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点：-扩展的赋值运算符中底层还包含了一个强制转换-。"><a href="#注意点：-扩展的赋值运算符中底层还包含了一个强制转换-。" class="headerlink" title="注意点：**==扩展的赋值运算符中底层还包含了一个强制转换==。**"></a>注意点：**==扩展的赋值运算符中底层还包含了一个强制转换==。**</h3><p>以+=为例。</p><p><strong>a += b ;实际上相当于 a = (byte)(a + b);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//a += b;</span></span><br><span class="line">        a = (<span class="type">byte</span>)(a + b);</span><br><span class="line">        System.out.println(a);<span class="comment">//30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-关系运算符"><a href="#5-关系运算符" class="headerlink" title="5.关系运算符"></a>5.关系运算符</h1><p>又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。</p><h3 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h3><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>==</td><td>就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>!=</td><td>就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;</td><td>就是判断左边是否大于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;=</td><td>就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;</td><td>就是判断左边是否小于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;=</td><td>就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false</td></tr></tbody></table><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>关系运算符最终的结果一定是布尔类型的。要么是true，要么是false</li><li>在写==的时候，千万不要写成=</li></ul><h2 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6.逻辑运算符"></a>6.逻辑运算符</h2><h3 id="6-1-amp-和-的使用："><a href="#6-1-amp-和-的使用：" class="headerlink" title="6.1 &amp; 和 | 的使用："></a>6.1 &amp; 和 | 的使用：</h3><p>&amp;：逻辑与（而且）</p><p>​    两边都为真，结果才是真，只要有一个为假，那么结果就是假。</p><p>|：逻辑或（或者）</p><p>​    两边都为假，结果才是假，只要有一个为真，那么结果就是真。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp;  //两边都是真，结果才是真。</span></span><br><span class="line">System.out.println(<span class="literal">true</span> &amp; <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> &amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> &amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">false</span> &amp; <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// | 或  //两边都是假，结果才是假，如果有一个为真，那么结果就是真。</span></span><br><span class="line">System.out.println(<span class="literal">true</span> | <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> | <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> | <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> | <span class="literal">true</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="6-2-使用场景："><a href="#6-2-使用场景：" class="headerlink" title="6.2 使用场景："></a>6.2 使用场景：</h3><p>​    根据固定的场景，来选择使用&amp;还是使用|</p><ul><li><p>用户登录。</p><p>用户名输入正确  &amp; 密码输入正确</p><p>因为只有用户名和密码同时都正确了，那么才能成功登录，只要有一个失败了都不行。</p><p>使用技巧：</p><p>​    当我们需要同时满足左边和右边两种情况时，可以使用且</p></li><li><p>丈母娘选女婿</p><p>丈母娘：女婿啊，你要么买个房子，要么买辆车。就可以把我的小棉袄穿走了。</p><p>买个房子 | 买辆车</p><p>两个条件中，只要满足其中一个，就可以穿走小棉袄了。</p><p>使用技巧：</p><p>​    当两种条件只要满足其中一个的时候，可以使用或</p></li></ul><h3 id="6-3-（异或）的使用："><a href="#6-3-（异或）的使用：" class="headerlink" title="6.3 ^（异或）的使用："></a>6.3 ^（异或）的使用：</h3><p>​    在以后用的不多，了解一下即可。</p><p>计算规则：如果两边相同，结果为false，如果两边不同，结果为true</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//^   //左右不相同，结果才是true，左右相同结果就是false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">true</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="6-4-（取反）的使用："><a href="#6-4-（取反）的使用：" class="headerlink" title="6.4 !（取反）的使用："></a>6.4 !（取反）的使用：</h3><p>​    是取反，也叫做非。</p><p>计算规则：false取反就是true，true取反就是false</p><p>温馨提示：<strong>取反最多只用一个。</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(!<span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(!<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(!!<span class="literal">false</span>);<span class="comment">//注意点：取反最多只用一个。</span></span><br></pre></td></tr></table></figure><h1 id="7-短路逻辑运算符"><a href="#7-短路逻辑运算符" class="headerlink" title="7.短路逻辑运算符"></a>7.短路逻辑运算符</h1><p>分类：  &amp;&amp;   ||</p><h3 id="amp-amp-："><a href="#amp-amp-：" class="headerlink" title="&amp;&amp;："></a>&amp;&amp;：</h3><p>​    运算结果跟&amp;是一模一样的，只不过具有短路效果。</p><h3 id="："><a href="#：" class="headerlink" title="||："></a>||：</h3><p>​    运算结果跟|是一模一样的。只不过具有短路效果。</p><h3 id="逻辑核心："><a href="#逻辑核心：" class="headerlink" title="逻辑核心："></a>逻辑核心：</h3><p>​    <strong>当左边不能确定整个表达式的结果，右边才会执行。</strong></p><p>​    <strong>当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。</strong></p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a><strong>举例：</strong></h3><ul><li><p>用户登录案例</p><p>用户名正确  &amp; 密码正确</p><p>如果使用一个&amp;，不管用户名是否正确都会去验证密码。</p></li></ul><p>思考：</p><p>​    如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。</p><p>​    但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。</p><p>​    如果使用一个&amp;，那么左边和右边不管什么情况下，都会执行。</p><p>​    用户名正确  &amp;&amp;  密码正确</p><p>​    如果用户名输入正确了，那么才会验证密码是否输入正确。</p><p>​    如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。</p><ul><li><p>丈母娘选女婿</p><p>有房 |  有车</p><p>首先先看看有没有房，发现有，然后再去看看有没有车。</p></li></ul><p>思考：</p><p>​    既然都有房子，干嘛还要去看车呢？多此一举。</p><p>​    有房 ||  有车</p><p>​    首先先看看有没有房，如果有，那么右边就不执行了。最终的结果直接为true。</p><p>​    如果没有房子，才会去看右边有没有车。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>​    &amp;&amp; 和 &amp; 、||和|的运行结果都是一模一样的。</p><p>​    但是短路逻辑运算符可以提高程序的运行效率。</p><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><p>​    最为常用： &amp;&amp;   ||   ！</p><h2 id="8-三元运算符"><a href="#8-三元运算符" class="headerlink" title="8. 三元运算符"></a>8. 三元运算符</h2><p>又叫做：三元表达式或者问号冒号表达式。</p><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>​    关系表达式 ？ 表达式1 ：表达式2 ；</p><h3 id="计算规则："><a href="#计算规则：" class="headerlink" title="计算规则："></a>计算规则：</h3><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li></ul><h3 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h3><p>​    三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</p><h3 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：求两个数的较大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="comment">//三元运算符的最终结果一定要被使用。</span></span><br><span class="line">        <span class="comment">//要么赋值给一个变量，要么直接输出。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span>  a &gt; b ? a : b ;</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; b ? a : b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-运算符的优先级"><a href="#9-运算符的优先级" class="headerlink" title="9. 运算符的优先级"></a>9. 运算符的优先级</h2><p>在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。</p><p>咱们只要知道其中一点：</p><p>​    小括号优先于所有。</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229215349595.png" alt="image-20221229215349595"></p><h2 id="10-原码-补码-反码"><a href="#10-原码-补码-反码" class="headerlink" title="10. 原码 补码 反码"></a>10. 原码 补码 反码</h2><p><strong>原码</strong>：十进制数据的二进制表现形式，<strong>最左边是符号位，0为正，1为负</strong></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229215621232.png" alt="image-20221229215621232"></p><h3 id="一个字节：8个bit（字节）"><a href="#一个字节：8个bit（字节）" class="headerlink" title="一个字节：8个bit（字节）"></a>一个字节：8个bit（字节）</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229215817969.png" alt="image-20221229215817969"></p><p>原码的弊端</p><p>​    1.当是-1时，</p><p>反码：为了解决原码不能计算负数的问题而出现的。<br>计算规则：正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1,1变0.</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220247847.png" alt="image-20221229220247847"></p><p>-56 +  1</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220326296.png" alt="-56+1"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220354117.png" alt="-55原码"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220418614.png" alt="-55反码"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220557517.png" alt="image-20221229220557517"></p><p>然而,当-1 + 1 时,反码:1111 1111 再加 1 反码:0000 0000 还是0</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220719880.png" alt="image-20221229220719880"></p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a><strong>原码</strong></h3><p>十进制数据的二进制表现形式，最左边是符号位，0为正，1为负。<br>原码的弊端<br>利用原码进行计算的时候，如果是正数完全没有问题。<br>但是如果是负数计算，结果就出错，实际运算的方向，跟正确的运算方向是相反的。</p><h3 id="反码出现的目的"><a href="#反码出现的目的" class="headerlink" title="反码出现的目的"></a>反码出现的目的</h3><p>为了解决原码不能计算负数的问题而出现的。<br>反码的计算规则<br>正数的反码不变，负数的反码在原码的基础上，符不颈，缴值取反，0变1,1变0。<br>反码的弊端<br>负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0，跟实际结果会有1的偏差。</p><h3 id="补码出现的目的"><a href="#补码出现的目的" class="headerlink" title="补码出现的目的"></a>补码出现的目的</h3><p>为了解决负数计算时跨0的问题而出现的。<br>补码的计算规则<br>正数的补码不变，负数的补码在反码的基础上+1。<br>另外补码还能多记录一个特殊的值-128，该数据在1个字节下，没有原码和反码。<br>补码的注意点<br><strong>计算机中的存储和计算都是以补码的形式进行的。</strong></p><p>基本的数据类型</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221053474.png" alt="image-20221229221053474"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221145191.png" alt="前面补零"></p><p>强制转换，砍掉前面多余的位，正负，由保留下来的最高位代替。</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221411830.png" alt="砍前面的字节(砍掉的不一定是0)"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221510263.png" alt="image-20221229221510263"></p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221640918.png" alt="image-20221229221640918"></p><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或 |"></a>逻辑或 |</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221704371.png" alt="image-20221229221704371"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221748965.png" alt="image-20221229221748965"></p><h3 id="右移-正数补零-负数补一"><a href="#右移-正数补零-负数补一" class="headerlink" title="右移:正数补零,负数补一"></a>右移:<strong>正数补零,负数补一</strong></h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221920981.png" alt="image-20221229221920981"></p><h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221937698.png" alt="image-20221229221937698"></p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Junit_测试概述</title>
      <link href="/2022/12/28/Junit-%E6%B5%8B%E8%AF%95%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/12/28/Junit-%E6%B5%8B%E8%AF%95%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea</title>
      <link href="/2022/12/28/idea/"/>
      <url>/2022/12/28/idea/</url>
      
        <content type="html"><![CDATA[<h2 id="8-IDEA"><a href="#8-IDEA" class="headerlink" title="8. IDEA"></a>8. IDEA</h2><h3 id="8-1-IDEA概述"><a href="#8-1-IDEA概述" class="headerlink" title="8.1 IDEA概述"></a>8.1 IDEA概述</h3><p>​    IDEA全称IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。</p><p><strong>集成环境：</strong></p><p>​    把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p><h3 id="8-2-IDEA的下载和安装"><a href="#8-2-IDEA的下载和安装" class="headerlink" title="8.2 IDEA的下载和安装"></a>8.2 IDEA的下载和安装</h3><h4 id="8-2-1-下载"><a href="#8-2-1-下载" class="headerlink" title="8.2.1 下载"></a>8.2.1 下载</h4><p>​    可以到官方网站自行下载，网址为：<a href="https://www.jetbrains.com/idea">https://www.jetbrains.com/idea</a></p><p>​    今天的资料中，对应的安装包也提高给大家了。</p><h4 id="8-2-2-安装"><a href="#8-2-2-安装" class="headerlink" title="8.2.2 安装"></a>8.2.2 安装</h4><ul><li>到资料文件夹中，双击安装包。</li><li>点击next，准备安装</li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%851.png" alt="计算机发展"></p><ul><li><p>点击Browse修改安装路径。</p><p>修改完毕点击next</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%852.png" alt="计算机发展"></p><ul><li><p>勾选64-bit launcher。表示在桌面新建一个64位的快捷方式。</p><p>其他的不要勾选。</p><p>点击next。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%854.png" alt="计算机发展"></p><ul><li>点击Install，准备安装。</li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%855.png" alt="计算机发展"></p><ul><li><p>等进度条读取完毕之后，会有最终界面提示。</p><p>点击finish即可。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%856.png" alt="计算机发展"></p><ul><li><p>第一次启动会询问，是否导入一些设置。</p><p>选择第二个不导入，保持默认设置，再点击OK。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%857.png" alt="计算机发展"></p><ul><li><p>选择背景主题</p><p>左边是黑色背景。右边是白色背景。</p><p>这个可以根据自己的喜好来选择。</p><p>选择完毕点击右下角的next</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%858.png" alt="计算机发展"></p><ul><li><p>在本界面让我们购买idea。</p><p>因为我们是学习阶段，所以可以使用免费使用30天。</p><p>点击第一排第二个。Evaluate for free</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%859.png" alt="计算机发展"></p><ul><li>点击蓝色的Evaluate，就可以开始免费试用30天了。</li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%8510.png" alt="计算机发展"></p><ul><li><p>当看到这个界面，就表示idea已经成功安装完毕</p><p>可以点击右上角关闭。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%8511.png" alt="计算机发展"></p><h3 id="8-3-IDEA中层级结构介绍"><a href="#8-3-IDEA中层级结构介绍" class="headerlink" title="8.3 IDEA中层级结构介绍"></a>8.3 IDEA中层级结构介绍</h3><h4 id="8-3-1-结构分类"><a href="#8-3-1-结构分类" class="headerlink" title="8.3.1 结构分类"></a>8.3.1 结构分类</h4><ul><li>project（项目、工程）</li><li>module（模块）</li><li>package（包）</li><li>class（类）</li></ul><h4 id="8-3-2-结构介绍"><a href="#8-3-2-结构介绍" class="headerlink" title="8.3.2 结构介绍"></a>8.3.2 结构介绍</h4><p>​    为了让大家更好的吸收，package这一层级，我们后面再学习，先学习最基础的project、module、class。</p><h5 id="project（项目、工程）"><a href="#project（项目、工程）" class="headerlink" title="project（项目、工程）"></a>project（项目、工程）</h5><p>​    淘宝、京东、黑马程序员网站都属于一个个项目，IDEA中就是一个个的Project。</p><h5 id="module（模块）"><a href="#module（模块）" class="headerlink" title="module（模块）"></a>module（模块）</h5><p>​    在一个项目中，可以存放多个模块，不同的模块可以存放项目中不同的业务功能代码。在黑马程序员的官方网站中，至少包含了以下模块：</p><ul><li>论坛模块</li><li>报名、咨询模块</li></ul><p>为了更好的管理代码，我们会把代码分别放在两个模块中存放。</p><h5 id="package（包）"><a href="#package（包）" class="headerlink" title="package（包）"></a>package（包）</h5><p>​    一个模块中又有很多的业务，以黑马程序员官方网站的论坛模块为例，至少包含了以下不同的业务。</p><ul><li>发帖</li><li>评论</li></ul><p>为了把这些业务区分的更加清楚，就会用包来管理这些不同的业务。</p><h5 id="class（类）"><a href="#class（类）" class="headerlink" title="class（类）"></a>class（类）</h5><p>​    就是真正写代码的地方。</p><h4 id="8-3-3-小结"><a href="#8-3-3-小结" class="headerlink" title="8.3.3 小结"></a>8.3.3 小结</h4><ul><li><p>层级关系</p><p>​    project - module - package - class</p></li><li><p>包含数量</p><p>​    project中可以创建多个module<br>​    module中可以创建多个package<br>​    package中可以创建多个class</p><p>​    这些结构的划分，是为了方便管理类文件的。</p></li></ul><h3 id="8-4-IDEA中的第一个代码"><a href="#8-4-IDEA中的第一个代码" class="headerlink" title="8.4 IDEA中的第一个代码"></a>8.4 IDEA中的第一个代码</h3><h5 id="8-4-1-操作步骤"><a href="#8-4-1-操作步骤" class="headerlink" title="8.4.1 操作步骤"></a>8.4.1 操作步骤</h5><ul><li>创建Project 项目</li><li>创建Module 模块</li><li>创建class   类</li><li>在类中编写代码</li><li>完成编译运行</li></ul><h5 id="8-4-2-分步图解"><a href="#8-4-2-分步图解" class="headerlink" title="8.4.2 分步图解"></a>8.4.2 分步图解</h5><ul><li><p>双击启动图标</p><p><img src="/2022/12/28/idea/idea%E4%BD%BF%E7%94%A81.png" alt="计算机发展"></p></li><li><p>首先要新建一个项目</p><p>点击creat new project</p><p><img src="/2022/12/28/idea/idea1.png" alt="计算机发展"></p></li><li><p>我们要从0开始写代码，所以新建一个空的什么都没有的项目。</p><p>点击左下方的Empty Project</p><p>再点击右下角的next</p></li></ul><p><img src="/2022/12/28/idea/idea2.png" alt="计算机发展"></p><ul><li><p>输入项目的名称</p><p>输入项目的存放路径</p></li></ul><p><img src="/2022/12/28/idea/idea3.png" alt="计算机发展"></p><ul><li>点击ok。idea会帮助我们在本地创建一个项目文件夹</li></ul><p><img src="/2022/12/28/idea/idea4.png" alt="计算机发展"></p><ul><li>点击Module，准备新建一个模块</li></ul><p><img src="/2022/12/28/idea/idea5.png" alt="计算机发展"></p><ul><li><p>点击+</p><p>再点击New Module</p></li></ul><p><img src="/2022/12/28/idea/idea6.png" alt="计算机发展"></p><ul><li><p>我们要编写Java代码，所以要新建一个Java模块。</p><p>点击Java</p><p>再点击右下角的next</p></li></ul><p><img src="/2022/12/28/idea/idea7.png" alt="计算机发展"></p><ul><li><p>输入模块的名称</p><p>再点击右下角的Next</p></li></ul><p><img src="/2022/12/28/idea/idea8.png" alt="计算机发展"></p><ul><li><p>成功新建一个模块之后，中间就会出现刚刚新建的模块</p><p>点击右下角的OK</p></li></ul><p><img src="/2022/12/28/idea/idea9.png" alt="计算机发展"></p><ul><li><p>回到主界面</p><p>展开刚刚新建的模块</p><p>右键点击src，选择New，选择Java Class</p></li></ul><p><img src="/2022/12/28/idea/idea10.png" alt="计算机发展"></p><ul><li><p>输入类名</p><p>再按回车</p></li></ul><p><img src="/2022/12/28/idea/idea11.png" alt="计算机发展"></p><ul><li><p>由于字体比较小</p><p>所以，我们要设置一下字体。</p><p>点击File，选择Setting。</p></li></ul><p><img src="/2022/12/28/idea/idea12.png" alt="计算机发展"></p><ul><li><p>搜索一下font</p><p>在右边可以输入Size的数值来调节代码字体的大小。</p><p>设置完毕后点击右下角的OK</p></li></ul><p><img src="/2022/12/28/idea/idea13.png" alt="计算机发展"></p><ul><li>编写代码</li></ul><p><img src="/2022/12/28/idea/idea14.png" alt="计算机发展"></p><ul><li><p>运行代码</p><p>右键空白处，点击Run</p></li></ul><p><img src="/2022/12/28/idea/idea15.png" alt="计算机发展"></p><ul><li><p>最下面会弹出控制台。</p><p>所有输出语句中的内容，都会在控制台上展示。</p></li></ul><p><img src="/2022/12/28/idea/idea16.png" alt="计算机发展"></p><h3 id="8-5-IDEA中类的相关操作"><a href="#8-5-IDEA中类的相关操作" class="headerlink" title="8.5 IDEA中类的相关操作"></a>8.5 IDEA中类的相关操作</h3><h4 id="8-5-1-类的相关操作"><a href="#8-5-1-类的相关操作" class="headerlink" title="8.5.1 类的相关操作"></a>8.5.1 类的相关操作</h4><ul><li>新建类文件</li><li>删除类文件</li><li>修改类文件</li></ul><h4 id="8-5-2-新建类文件"><a href="#8-5-2-新建类文件" class="headerlink" title="8.5.2 新建类文件"></a>8.5.2 新建类文件</h4><ul><li><p>所有的Java代码都会写在src文件夹当中。</p><p>所以，右键点击src，选择new，点击Java Class</p><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E7%B1%BB1.png" alt="计算机发展"></p></li><li><p>输入类名，再按回车</p><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E7%B1%BB2.png" alt="计算机发展"></p></li><li><p>新建完毕</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E7%B1%BB3.png" alt="计算机发展"></p><h4 id="8-5-3-修改类名"><a href="#8-5-3-修改类名" class="headerlink" title="8.5.3 修改类名"></a>8.5.3 修改类名</h4><ul><li><p>右键点击想要修改的文件</p><p>点击Refactor</p><p>再点击Rename</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D1.png" alt="计算机发展"></p><ul><li><p>输入想要修改的名字</p><p>输入完毕点击下面的Refactor</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D2.png" alt="计算机发展"></p><ul><li><p>文件名和类名均已修改成功</p><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D3.png" alt="计算机发展"></p></li></ul><h4 id="8-5-4-删除类文件"><a href="#8-5-4-删除类文件" class="headerlink" title="8.5.4 删除类文件"></a>8.5.4 删除类文件</h4><ul><li><p>想要删除哪个文件，就右键点击该文件</p><p>选择Delete即可</p></li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E7%B1%BB%E6%96%87%E4%BB%B61.png" alt="计算机发展"></p><ul><li>在弹出的界面中点击OK，确定删除</li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E7%B1%BB%E6%96%87%E4%BB%B62.png" alt="计算机发展"></p><blockquote><p>小贴士：</p><p>此时删除是不走回收站的，直接从硬盘中删掉了。</p></blockquote><h3 id="8-6-IDEA中模块的相关操作"><a href="#8-6-IDEA中模块的相关操作" class="headerlink" title="8.6 IDEA中模块的相关操作"></a>8.6 IDEA中模块的相关操作</h3><h4 id="8-6-1-模块的相关操作"><a href="#8-6-1-模块的相关操作" class="headerlink" title="8.6.1 模块的相关操作"></a>8.6.1 模块的相关操作</h4><ul><li>新建模块</li><li>删除模块</li><li>修改模块</li><li>导入模块</li></ul><h4 id="8-6-2-新建模块"><a href="#8-6-2-新建模块" class="headerlink" title="8.6.2 新建模块"></a>8.6.2 新建模块</h4><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li>选择Module</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li><p>点击+</p><p>选择New Module</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><ul><li><p>要创建一个Java模块，所以选择第一个Java</p><p>点击右下角的Next</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%974.png" alt="计算机发展"></p><ul><li><p>输入模块的名称</p><p>点击右下角的Finish</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%975.png" alt="计算机发展"></p><ul><li><p>成功新建完毕之后，在中间空白区域就出现了刚刚新建的模块</p><p>点击右下角的OK</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%976.png" alt="计算机发展"></p><ul><li>在主界面中，也会出现刚刚新建的模块</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%977.png" alt="计算机发展"></p><h4 id="8-6-3-删除模块"><a href="#8-6-3-删除模块" class="headerlink" title="8.6.3 删除模块"></a>8.6.3 删除模块</h4><ul><li><p>右键点击模块</p><p>选择Remove Module</p></li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li>选择Remove，表示确定删除</li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li>此时发现，在IDEA列表页面，删除的模块已经不在了。</li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><blockquote><p>小贴士：</p><p>此时删除仅仅是从IDEA列表中的删除，在本地硬盘中还是存在的。</p></blockquote><h4 id="8-6-4-修改模块"><a href="#8-6-4-修改模块" class="headerlink" title="8.6.4 修改模块"></a>8.6.4 修改模块</h4><ul><li><p>右键点击模块名</p><p>选择Refactor</p><p>再选择Rename</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D1.png" alt="计算机发展"></p><ul><li><p>选择第三个修改模块名和本地文件夹名</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D3.png" alt="计算机发展"></p><ul><li><p>输入要修改的新的模块名</p><p>输入完毕点击Refactor</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D4.png" alt="计算机发展"></p><ul><li>回到主界面，就发现模块名和文件夹名都已经修改完毕</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D5.png" alt="计算机发展"></p><h4 id="8-6-5-导入模块"><a href="#8-6-5-导入模块" class="headerlink" title="8.6.5 导入模块"></a>8.6.5 导入模块</h4><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li><p>选择Module</p><p>点击+</p><p>选择Import Module</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li><p>从本地硬盘中选择要导入的模块</p><p>再点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><ul><li>不断点击Next</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%974.png" alt="计算机发展"></p><ul><li><p>如果中间出现提示框，则点击Overwrite</p><p>然后继续点击右下角的Next</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%975.png" alt="计算机发展"></p><ul><li>一直点到finish为止</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%976.png" alt="计算机发展"></p><ul><li>成功导入后，在中间位置就会出现导入的模块信息</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%977.png" alt="计算机发展"></p><ul><li>在主界面中也会出现导入的模块信息</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%978.png" alt="计算机发展"></p><ul><li><p>展开模块点击模块中的Java文件，会发现代码报错。</p><p>是因为导入模块跟JDK没有关联导致。</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%979.png" alt="计算机发展"></p><ul><li><p>可以点击右上角的Setup SDK</p><p>再选择已经安装的JDK版本即可</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9710.png" alt="计算机发展"></p><ul><li>导入完毕之后，代码就恢复正常不会报错了</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9711.png" alt="计算机发展"></p><h3 id="8-7-IDEA中项目的相关操作"><a href="#8-7-IDEA中项目的相关操作" class="headerlink" title="8.7 IDEA中项目的相关操作"></a>8.7 IDEA中项目的相关操作</h3><h4 id="8-7-1-项目的相关操作"><a href="#8-7-1-项目的相关操作" class="headerlink" title="8.7.1 项目的相关操作"></a>8.7.1 项目的相关操作</h4><ul><li>关闭项目</li><li>打开项目</li><li>修改项目</li><li>新建项目</li></ul><h4 id="8-7-2-关闭项目"><a href="#8-7-2-关闭项目" class="headerlink" title="8.7.2 关闭项目"></a>8.7.2 关闭项目</h4><ul><li>点击File，选择Close Project即可</li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>刚刚操作的项目就已经关闭了</p><p>左侧是项目列表，如果要再次打开该项目，直接点击即可。</p><p>右侧有create new project，可以再建一个新的项目</p></li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li><p>鼠标放在项目上，后面会出现一个叉。</p><p>如果点击了这里的叉，会在IDEA的列表中删除。不会删除本地硬盘上的项目。</p></li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><h4 id="8-7-3-打开项目"><a href="#8-7-3-打开项目" class="headerlink" title="8.7.3 打开项目"></a>8.7.3 打开项目</h4><ul><li><p>在本界面还可以打开本地已经存在的项目</p><p>点击Open or Import</p></li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>选择要打开的项目</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li>项目就被打开了。</li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><h4 id="8-7-4-修改项目"><a href="#8-7-4-修改项目" class="headerlink" title="8.7.4 修改项目"></a>8.7.4 修改项目</h4><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>在这个界面，默认是Module</p><p>所以，要先点击Project</p><p>在右侧页面中，输入新的项目名称</p><p>修改JDK版本和编译版本都变成JDK14</p><p>再点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li>此时发现，项目名称已经修改完毕</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li>但是本地文件夹的名字还没有修改</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE4.png" alt="计算机发展"></p><ul><li>需要先关闭当前项目</li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li>点击项目后面的叉，从列表中移除项目</li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li>到本地硬盘中手动修改文件夹的名称</li></ul><p> <img src="F:/JavaSE%E6%9C%80%E6%96%B0%E7%89%88/day02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E7%AC%94%E8%AE%B0/img/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE5.png" alt="计算机发展"></p><ul><li>点击Open or Import重新打开项目</li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>选择修改之后的项目</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE6.png" alt="计算机发展"></p><ul><li>此时会发现，项目名称和本地硬盘文件夹的名称都已经修改完毕了</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE7.png" alt="计算机发展"></p><h4 id="8-7-5-新建项目"><a href="#8-7-5-新建项目" class="headerlink" title="8.7.5 新建项目"></a>8.7.5 新建项目</h4><ul><li><p>点击File</p><p>选择New</p><p>点击Project</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li>同样还是创建一个什么都没有的空项目</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li><p>输入项目的名称</p><p>点击右下角的finish</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li><p>IDEA循环是否需要帮我们在本地创建一个新的文件夹</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE4.png" alt="计算机发展"></p><ul><li><p>询问是在本窗口打开还是在一个新的窗口打开。</p><p>可以点击New Window，在一个新的窗口打开。</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE5.png" alt="计算机发展"></p><ul><li>此时就出现了两个窗口，在一个新的窗口打开了新的项目</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE6.png" alt="计算机发展"></p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-人机交互"><a href="#1-人机交互" class="headerlink" title="1.人机交互"></a>1.人机交互</h2><h3 id="1-1什么是cmd"><a href="#1-1什么是cmd" class="headerlink" title="1.1什么是cmd"></a>1.1什么是cmd</h3><p>在windows操作系统中，利用命令行方式去操作计算机。</p><p>我们可以命令行去操作计算机，例：打开文件，打开文件夹，创建文件夹等等。</p><h3 id="1-2-如何打开CMD窗口"><a href="#1-2-如何打开CMD窗口" class="headerlink" title="1.2 如何打开CMD窗口"></a>1.2 如何打开CMD窗口</h3><p>​    1.按下快捷键win + R，此时会出现运行窗口</p><p>​    2.在运行窗口输入cmd，回车。</p><img src="image-20221227203420241.png" alt="image-20221227203420241" style="zoom:50%;" /><p><strong>解惑</strong>：</p><p>​    cmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名）</p><h3 id="1-3常用的cmd命令"><a href="#1-3常用的cmd命令" class="headerlink" title="1.3常用的cmd命令"></a>1.3常用的cmd命令</h3><p> 扩展一个小点：</p><p>​    在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。</p><p>​    而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。</p><p>常见的CMD命令如下：</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2...</td><td>进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h3 id="1-4-cmd练习"><a href="#1-4-cmd练习" class="headerlink" title="1.4 cmd练习"></a>1.4 cmd练习</h3><p>需求：利用cmd打开qq</p><p>完成步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1,确定自己电脑上的QQ安装在哪里</span><br><span class="line">2,启动cmd</span><br><span class="line">3,进入到启动程序QQ.exe所在的路径。</span><br><span class="line">4,输出qq.exe加回车表示启动qq。</span><br></pre></td></tr></table></figure><p><strong>解惑</strong>：</p><p>​    在windows操作系统当中，文件名或者文件夹名是忽略大小写的。</p><h3 id="1-5-🎇环境变量"><a href="#1-5-🎇环境变量" class="headerlink" title="1.5 🎇环境变量"></a>1.5 🎇环境变量</h3><p>作用：</p><p>​        <em>如果我想要在CMD的任意目录下，都可以启动某一个软件，那么就可以把这个软件的路径配置到环境变量中的PATH里面。</em></p><p>​        在启动软件的时候，操作系统会先在当前路径下找，如果在当前录课没有再到环境变量的路径中去找。如果都找不到就提示无法启动。</p><p>步骤：</p><ul><li>右键我的电脑，选择属性。</li><li>点击左侧的高级系统设置</li><li>选择高级，再点击下面的环境变量。</li><li>找系统变量里面的PATH</li><li>把软件的完整路径，配置到PATH当中就可以了。</li><li>（可做可不做）就是把自己配置的路径，移动到最上面。</li></ul><p>图解示例如下：</p><p>第一步：右键点击我的电脑并选择属性。</p><p>（如果无法出现第二步界面，可以打开我的电脑之后右键点击空白处）</p><p>第二步：点击高级系统设置。</p><img src="image-20221227203939392.png" alt="image-20221227203939392" style="zoom:50%;" /><p>第三步：选择高级，再点击下面的环境变量。</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227204029393.png" alt="image-20221227204029393"></p><p>第四步：找系统变量里面的PATH</p><p>第五步：点击新建，把软件的完整路径，配置到PATH当中，再点击确定即可。</p><p>第六步：（可做可不做）点击上移，把当前配置的路径移动到最上面。</p><p>移动的好处：在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上面查找的速度比较快。</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227204132283.png" alt="image-20221227204132283"></p><h2 id="2-java概述"><a href="#2-java概述" class="headerlink" title="2. java概述"></a>2. java概述</h2><h3 id="2-1-java是什么"><a href="#2-1-java是什么" class="headerlink" title="2.1 java是什么"></a>2.1 java是什么</h3><p>Java是一门非常火的计算机语言。（也叫做编程语言）</p><h3 id="2-2-下载和安装"><a href="#2-2-下载和安装" class="headerlink" title="2.2 下载和安装"></a>2.2 下载和安装</h3><p>JDK下载</p><p>官网：<a href="http://www.oracle.com/">http://www.oracle.com</a></p><p>针对不同的系统下载对应的版本</p><p><strong>注意</strong>：</p><p>​    1.傻瓜安装，下一步即可。</p><p>​    2.<strong>安装路径中不要包含中午和空格</strong>。</p><p>​    3.所有开发工具最好安装目录统一。</p><p>不要下载JDK18，有bug，中午会乱码。</p><h5 id="JDK安装目录"><a href="#JDK安装目录" class="headerlink" title="JDK安装目录"></a>JDK安装目录</h5><p>​    🎈bin:该路径下存放了各种工具命令。其中比较重要的有：javac和java（比较重要）。<br>​    conf:该路径下存放了相关配置文件。<br>​    include:该路径下存放了一些平台特定的头文件。</p><p>​    jmods:该路径下存放了各种模块。<br>​    legal:该路径下存放了各模块的授权文档。</p><p>​    lib:该路径下存放了工具的一些补充JAR包。</p><h3 id="2-3-HelloWorld案例"><a href="#2-3-HelloWorld案例" class="headerlink" title="2.3 HelloWorld案例"></a>2.3 HelloWorld案例</h3><p>​    HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="2-3-1-java程序开发运行流程"><a href="#2-3-1-java程序开发运行流程" class="headerlink" title="2.3.1 java程序开发运行流程"></a>2.3.1 java程序开发运行流程</h4><p>编写程序、编译程序、运行程序。</p><h4 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h4><ol><li>新建文本文档文件，修改名称为HelloWorld.java。</li></ol><p><strong>注意</strong>：后缀名为java的才是java文件。</p><ol start="2"><li>用记事本打开HelloWorld.java文件，输写程序内容。</li></ol><p><strong>注意</strong>：代码要跟我编写的完全保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>保存</li></ol><p><strong>注意</strong>：未保存的文件在左上角会有*符号标记</p><ol start="4"><li><p><strong>编译文件。编译后会产生一个class文件。</strong></p><p><strong>java文件：程序员自己编写的代码。</strong></p><p><strong>class文件：交给计算机执行的文件。</strong></p></li><li><p>运行代码</p><p><strong>注意</strong>：运行的是编译之后的class文件。</p></li></ol><blockquote><p>用到两个命令：</p><p>​    javac + 文件名 + 后缀名 （就是编译java文件）</p><p>​    java + 文件名（运行编译之后的class文件）</p></blockquote><h3 id="2-4-HelloWorld案例常见问题"><a href="#2-4-HelloWorld案例常见问题" class="headerlink" title="2.4 HelloWorld案例常见问题"></a>2.4 HelloWorld案例常见问题</h3><h4 id="2-4-1-BUG"><a href="#2-4-1-BUG" class="headerlink" title="2.4.1 BUG"></a>2.4.1 BUG</h4><p>​    在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p><h4 id="2-4-2-BUG的解决"><a href="#2-4-2-BUG的解决" class="headerlink" title="2.4.2 BUG的解决"></a>2.4.2 BUG的解决</h4><ol><li>具备识别BUG的能力：多看</li><li>具备分析BUG的能力：多思考，多查资料</li><li>具备解决BUG的能力：多尝试，多总结</li></ol><h4 id="2-4-3-HelloWorld常见问题"><a href="#2-4-3-HelloWorld常见问题" class="headerlink" title="2.4.3 HelloWorld常见问题"></a>2.4.3 HelloWorld常见问题</h4><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀.class</p><p>…</p><h4 id="常见错误代码1："><a href="#常见错误代码1：" class="headerlink" title="常见错误代码1："></a>常见错误代码1：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">publicclass HelloWorld&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    public和class之间缺少一个空格。</p><p>技巧：一般来讲在单词之间的空格是不能省略的。</p><p>​    如果是单词和符号之间的空格是可以省略的。</p><h4 id="常见错误代码2："><a href="#常见错误代码2：" class="headerlink" title="常见错误代码2："></a>常见错误代码2：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        system.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    system首字母必须大写。</p><p>技巧：</p><p>​    Java代码中，是严格区分大小写的。</p><p>​    所以该大写的地方一定要大写，该小写的地方一定要小写。多多练习。</p><h4 id="常见错误代码3："><a href="#常见错误代码3：" class="headerlink" title="常见错误代码3："></a>常见错误代码3：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(HelloWorld);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    第三行代码中的HelloWorld必须用双引号引起来，否则就会出现问题。</p><h4 id="常见错误代码4："><a href="#常见错误代码4：" class="headerlink" title="常见错误代码4："></a>常见错误代码4：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    在以后代码当中，所有的标点符号必须是英文状态下的。</p><p>技巧：</p><p>​    可以在输入法中进行对应的设置。</p><h3 id="2-5-环境变量"><a href="#2-5-环境变量" class="headerlink" title="2.5 环境变量"></a>2.5 环境变量</h3><h4 id="2-5-1-为什么配置环境变量"><a href="#2-5-1-为什么配置环境变量" class="headerlink" title="2.5.1 为什么配置环境变量"></a>2.5.1 为什么配置环境变量</h4><p>​    开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。</p><p>注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。</p><h4 id="2-5-2配置方式"><a href="#2-5-2配置方式" class="headerlink" title="2.5.2配置方式"></a>2.5.2配置方式</h4><p><img src="/image-20210923091654365.png" alt="image-20210923091654365"></p><p>以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。</p><p>①<strong>JAVA_HOME</strong>：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091710450.png" alt="image-20210923091710450"></p><p>②<strong>Path</strong>：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091721035.png" alt="image-20210923091721035"></p><h4 id="2-5-3-win10的bug"><a href="#2-5-3-win10的bug" class="headerlink" title="2.5.3 win10的bug"></a>2.5.3 win10的bug</h4><p>当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。</p><p>步骤：</p><ul><li><p>还是要配置JAVA_HOME给以后的相关软件去使用</p></li><li><p>我们可以把java和javac的完整路径配置到PATH当中。</p><p>E:\develop\JDK\bin</p></li></ul><h2 id="3-Notepad"><a href="#3-Notepad" class="headerlink" title="3.Notepad++"></a>3.Notepad++</h2><h3 id="3-1-Notepad记事本"><a href="#3-1-Notepad记事本" class="headerlink" title="3.1 Notepad记事本"></a>3.1 Notepad记事本</h3><p>高级记事本<br>有行号，而且ava中的一些特殊单词会高亮显示</p><h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><p>傻瓜式安装，直接点击下一步就可以了。</p><p>​    对安装路径有两个小建议：</p><ul><li>路径不要有中文，不要有空格，不要有一些特殊符号</li><li>建议最好把所有的跟开发相关的软件都放在一起，方便管理。</li></ul><h3 id="3-3-设置"><a href="#3-3-设置" class="headerlink" title="3.3 设置"></a>3.3 设置</h3><p>​    右键点击java文件，选择edit with notepad++。</p><p>​    点击设置，再点击首选项。在弹出的页面当中，左侧选择新建，中间选择Java，右侧选择ANSI。</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227211339166.png" alt="image-20221227211339166"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227211445432.png" alt="image-20221227211445432"></p><h3 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h3><p>​    利用notepad++去编写一个HelloWorld并能成功编译和运行。</p><h2 id="4-Java语言的发展"><a href="#4-Java语言的发展" class="headerlink" title="4  Java语言的发展"></a>4  Java语言的发展</h2><p>三个版本：</p><ul><li>Java5.0：这是Java的第一个大版本更新。</li><li><strong>Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。</strong></li><li>Java15.0：这个是我们课程中学习的版本。</li></ul><p>解惑：</p><p>​    我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？</p><p>向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。</p><p>举例：</p><p>用8版本开发的代码，用11版本能运行吗？必须可以的。</p><p>用11版本开发的代码，用8版本能运行吗？不一定。</p><p>如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。</p><p>如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。</p><h3 id="4-1-Java的三大平台"><a href="#4-1-Java的三大平台" class="headerlink" title="4.1 Java的三大平台"></a>4.1 Java的三大平台</h3><p>​    JavaSE、JavaME、JavaEE</p><h4 id="4-1-1-JavaSE"><a href="#4-1-1-JavaSE" class="headerlink" title="4.1.1 JavaSE"></a>4.1.1 JavaSE</h4><p>​    是其他两个版本的基础。</p><h4 id="4-1-2-JavaME"><a href="#4-1-2-JavaME" class="headerlink" title="4.1.2 JavaME"></a>4.1.2 JavaME</h4><p>​    Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p><p>​    其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p><p>​    但是，安卓也是可以用Java来开发的。</p><h4 id="4-1-3-JavaEE"><a href="#4-1-3-JavaEE" class="headerlink" title="4.1.3 JavaEE"></a>4.1.3 JavaEE</h4><p>​    用于Web方向的网站开发。（主要从事后台服务器的开发）</p><p>​    在服务器领域，Java是当之无愧的龙头老大。</p><h3 id="4-2-Java的主要特性"><a href="#4-2-Java的主要特性" class="headerlink" title="4.2  Java的主要特性"></a>4.2  Java的主要特性</h3><ul><li><p><strong>面向对象</strong></p></li><li><p><strong>安全性</strong></p></li><li><p><strong>多线程</strong></p></li><li><p><strong>简单易用</strong></p></li><li><p><strong>开源</strong></p></li><li><p><strong>跨平台</strong></p></li></ul><h3 id="4-3-高级语言的编译运行方式"><a href="#4-3-高级语言的编译运行方式" class="headerlink" title="4.3 高级语言的编译运行方式"></a>4.3 高级语言的编译运行方式</h3><p> 1.编译型<br> 2.解释型<br> 3.混合型：半编译，半解释</p><p>编译型：</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220540696.png" alt="image-20221227220540696"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220141760.png" alt="不同平台的编译"></p><p>本图的细节 ： 不同平台重新编译一次，编译成三个不同的文件</p><p>解释型：</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220330674.png" alt="解释型过程"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220405230.png" alt="image-20221227220405230"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220432293.png" alt="混合型编译运行过程"></p><h4 id="4-4-Java语言跨平台的原理-Write-Once-Run-Anywhere"><a href="#4-4-Java语言跨平台的原理-Write-Once-Run-Anywhere" class="headerlink" title="4.4 Java语言跨平台的原理 (Write Once Run Anywhere)"></a>4.4 Java语言跨平台的原理 (Write Once Run Anywhere)</h4><ul><li>操作系统本身其实是不认识Java语言的。</li><li><strong>但是针对于不同的操作系统，Java提供了不同的虚拟机。</strong></li></ul><p><strong>虚拟机会把Java语言翻译成操作系统能看得懂的语言。</strong></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091350952-16721482793651.png" alt="跨平台工作原理"></p><h3 id="✨4-4-JRE和JDK"><a href="#✨4-4-JRE和JDK" class="headerlink" title="✨4.4  JRE和JDK"></a>✨4.4  JRE和JDK</h3><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091544110-16721482793652.png" alt="image-20210923091544110"></p><p>JVM（Java Virtual Machine），Java虚拟机</p><p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：<strong>我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</strong></p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><h3 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h3><p>  在程序指定位置添加的说明性文字</p><p>简单的理解，就是对代码的一种解释</p><p>方便自已和他人阅读</p><h3 id="5-1-2-注释的分类"><a href="#5-1-2-注释的分类" class="headerlink" title="5.1.2 注释的分类"></a>5.1.2 注释的分类</h3><p>1.单行注释</p><blockquote><p>//注释信息</p></blockquote><p>2.多行注释：格式</p><blockquote><p>/*注释信息*/</p></blockquote><p>不能嵌套运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  wode  /*  nide mingzi */</span>   */</span><br></pre></td></tr></table></figure><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221228194938423.png" alt="多行注释嵌套"></p><p>3.文档注释</p><blockquote><p>/**  注释信息*/</p></blockquote><p>文档注释暂时用不上。</p><p>注释不会影响代码运行结果</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">knowledge</span> &#123;</span><br><span class="line"><span class="comment">//叫做main方法，表示程序的主入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*叫做输出语句（打印语句）</span></span><br><span class="line"><span class="comment">会把小括里面的内容进行输出打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello world!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-关键字"><a href="#6-关键字" class="headerlink" title="6 关键字"></a>6 关键字</h2><h3 id="6-1-含义"><a href="#6-1-含义" class="headerlink" title="6.1 含义"></a>6.1 含义</h3><p>​        被java<strong>赋予了特定含义</strong>的<strong>英文单词</strong>。</p><h3 id="6-2-特点"><a href="#6-2-特点" class="headerlink" title="6.2 特点"></a>6.2 特点</h3><p>​    1.关键字的字母<strong>全部小写</strong>。</p><p>​    2.常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。</p><h3 id="6-3-常见的关键字"><a href="#6-3-常见的关键字" class="headerlink" title="6.3 常见的关键字"></a>6.3 常见的关键字</h3><p>​        1. <strong>class</strong> ：用于（创建/定义）<strong>一个类是Java最基本的组成单元</strong>。</p><p>​        </p><h2 id="7-字面量"><a href="#7-字面量" class="headerlink" title="7 字面量"></a>7 字面量</h2><h3 id="7-1-含义"><a href="#7-1-含义" class="headerlink" title="7.1 含义"></a>7.1 含义</h3><p>​        告诉数据在程序中的书写格式 。（就是数值或符号）</p><h3 id="7-2-字面量的分类"><a href="#7-2-字面量的分类" class="headerlink" title="7.2 字面量的分类"></a>7.2 字面量的分类</h3><table><thead><tr><th align="left">字面量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td align="left">整数类型</td><td>不带小数的数字</td><td>666，-8</td></tr><tr><td align="left">小数类型</td><td>带小数点的数字</td><td>13.2，-9.0</td></tr><tr><td align="left">字符串类型</td><td>用双引号括起来的内容</td><td>“黑哦了 hello”</td></tr><tr><td align="left">字符类型</td><td>单引号括起来，内容只有一个</td><td>‘h’，’我’</td></tr><tr><td align="left">布尔类型</td><td>布尔值，表示真假</td><td>只有两个值：true false</td></tr><tr><td align="left">空类型</td><td>一个特殊的值，空值</td><td>值是：null</td></tr></tbody></table><p>注意：</p><p>1.null不能直接打印，如果我们打印null ，只能用字符串输出</p><p>2.true false 是关键字，输出直接输出 true 和 false</p><h3 id="7-3-特殊字符的字面量"><a href="#7-3-特殊字符的字面量" class="headerlink" title="7.3 特殊字符的字面量"></a>7.3 特殊字符的字面量</h3><blockquote><ol><li>\t 在打印的时候，把前面的字符串的长度补齐到八，<strong>或者8的整数倍</strong>，最少补一个空格最多补八个空格</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//\t 制表符 目的：熟悉制表符基本用法</span></span><br><span class="line">System.out.println(<span class="string">&quot;name&quot;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>null</li></ol><h2 id="8-变量"><a href="#8-变量" class="headerlink" title="8.变量"></a>8.变量</h2><h3 id="8-1-变量的定义格式"><a href="#8-1-变量的定义格式" class="headerlink" title="8.1 变量的定义格式"></a>8.1 变量的定义格式</h3><p>​        <em><strong><u>==数据类型 变量名 = 数据值；==</u></strong></em></p><p>数据类型：空间中储存的数据，加入类型限制：整数或小数……</p><p>变量名：为空间起的名字。</p><p>数据值：存在空间里面的数值。</p><p>​    数据类型：限定了变量当中能存储什么类型的数据。</p><p>​               如果要存10，那么数据类型就需要写整数类型。</p><p>​               如果要存10.0，那么数据类型就需要写小数类型。</p><p>​    变量名：其实就是这个容器的名字。</p><p>​            当以后想要使用变量里面的数据时，直接使用变量名就可以了。</p><p>​    数据值：真正存储在容器中的数据。</p><p>​    分号：表示语句的结束，就跟以前写作文时候的句号是一样的。</p><img src="image-20221228202035640.png" alt="变量本质"  /><p>作用：方便以后使用。<br>等号：赋值。</p><h3 id="8-2-变量使用方式"><a href="#8-2-变量使用方式" class="headerlink" title="8.2 变量使用方式"></a>8.2 变量使用方式</h3><p>1.参与打印</p><p>2.参与计算</p><p>3.修改记录的值</p><p><strong>注意事项</strong></p><p>​    1.👓只能存在一个值</p><p>​    2.🎎变量名不允许重复定义</p><p>​    3.🥼一条语句可以定义多个变量</p><p>​    4.🎡<strong>变量在使用之前一定要进行赋值</strong></p><p>​    5.<strong>🎭变量的作用范围</strong></p><h2 id="9-数据类型-（与变量定义公式中数据类型相关）"><a href="#9-数据类型-（与变量定义公式中数据类型相关）" class="headerlink" title="9 数据类型 （与变量定义公式中数据类型相关）"></a>9 数据类型 （与变量定义公式中数据类型相关）</h2><h3 id="9-1-类型"><a href="#9-1-类型" class="headerlink" title="9.1 类型"></a>9.1 类型</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.<strong>基本数据类型</strong></h4><table><thead><tr><th align="left">数据类型</th><th align="left">关键字</th><th align="left">内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td align="left">整数</td><td align="left">byte</td><td align="left">1</td><td>负的2的7次方 ~ 2的7次方-1(-128~127)</td></tr><tr><td align="left"></td><td align="left">short</td><td align="left">2</td><td>负的2的15次方 ~ 2的15次方-1(-32768~32767)</td></tr><tr><td align="left"></td><td align="left">int（默认）</td><td align="left">4</td><td>负的2的31次方 ~ 2的31次方-1</td></tr><tr><td align="left"></td><td align="left">long</td><td align="left">8</td><td>负的2的63次方 ~ 2的63次方-1</td></tr><tr><td align="left">浮点数</td><td align="left">float</td><td align="left">4</td><td>1.401298e-45 ~ 3.402823e+38</td></tr><tr><td align="left"></td><td align="left">double（默认）</td><td align="left">8</td><td>4.9000000e-324 ~ 1.797693e+308</td></tr><tr><td align="left">字符</td><td align="left">char</td><td align="left">2</td><td>0-65535</td></tr><tr><td align="left">布尔</td><td align="left">boolean</td><td align="left">1</td><td>true，false</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>​    e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>​    在java中整数默认是int类型，浮点数默认是double类型。</p><p><strong>需要记住的点：</strong></p><p>1.byte类型的取值范围：</p><p>​    -128 ~ 127</p><p>2.int类型的大概取值范围：</p><p>​    -21亿多  ~ 21亿多</p><p>3.整数类型和小数类型的取值范围大小关系：</p><p>​    double &gt; float &gt; long &gt; int &gt; short &gt; byte</p><p>最为常用的数据类型选择：</p><ul><li><p>在定义变量的时候，要根据实际的情况来选择不同类型的变量。</p><p>比如：人的年龄，可以选择byte类型。</p><p>比如：地球的年龄，可以选择long类型。</p></li><li><p>如果整数类型中，不太确定范围，那么默认使用int类型。</p></li><li><p>如果小数类型中，不太确定范围，那么默认使用double类型。</p></li><li><p>如果要定义字符类型的变量，那么使用char</p></li><li><p>如果要定义布尔类型的变量，那么使用boolean</p></li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h4><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li><strong>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</strong></li><li><strong>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以</strong>）**</li></ul><h4 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h4><h2 id="10-标识符-（与变量定义式中变量名有关）"><a href="#10-标识符-（与变量定义式中变量名有关）" class="headerlink" title="10 标识符  （与变量定义式中变量名有关）"></a>10 标识符  （与变量定义式中变量名有关）</h2><h3 id="10-1-含义"><a href="#10-1-含义" class="headerlink" title="10.1 含义"></a>10.1 含义</h3><p>​        就是给类，方法，变量等起的名字。</p><h3 id="10-2-命名规则"><a href="#10-2-命名规则" class="headerlink" title="10.2 命名规则"></a>10.2 命名规则</h3><p>必须要这么做，否则代码会报错。</p><ul><li><strong>必须由数字、字母、下划线_、美元符号$组成。</strong></li><li><strong>数字不能开头</strong></li><li><strong>不能是关键字</strong></li><li><strong>区分大小写的。</strong></li></ul><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221228204704380.png" alt="练习题"></p><h3 id="10-3-小驼峰命名法"><a href="#10-3-小驼峰命名法" class="headerlink" title="10.3 小驼峰命名法"></a>10.3 小驼峰命名法</h3><p>适用于<strong>变量名</strong>和<strong>方法名</strong></p><ul><li><p>如果是一个单词，那么全部小写，比如：name</p></li><li><p><strong>如果是多个单词，那么从第二个单词开始，首字母大写</strong>，比如：firstName、maxAge</p></li></ul><h3 id="10-4-大驼峰命名法"><a href="#10-4-大驼峰命名法" class="headerlink" title="10.4 大驼峰命名法"></a>10.4 大驼峰命名法</h3><p>适用于类名</p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。</p></li><li><p><strong>如果是多个单词，那么每一个单词首字母都需要大写</strong>。比如：HelloWorld</p></li></ul><p>不管起什么名字，都要做到见名知意。</p><h3 id="阿里巴巴命名规范细节："><a href="#阿里巴巴命名规范细节：" class="headerlink" title="阿里巴巴命名规范细节："></a>阿里巴巴命名规范细节：</h3><ol><li><p><strong>尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。</strong></p><p>正确：alibaba、hangzhou、nanjing</p><p>错误：jiage、dazhe</p></li><li><p><strong>平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。</strong></p><p>错误：_name</p><p>正确：name</p></li></ol><h2 id="11-键盘录入"><a href="#11-键盘录入" class="headerlink" title="11 键盘录入"></a>11 键盘录入</h2><p>键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。</p><p>使用步骤：</p><p>第一步：</p><p>​    <strong>导包</strong>：其实就是表示先找到Scanner这个类在哪。</p><p>第二步：</p><p>​    <strong>创建对象</strong>：其实就表示申明一下，我准备开始用Scanner这个类了。</p><p>第三步：</p><p>​    <strong>接收数据</strong>：也是真正干活的代码。<strong>nextInt 中I 大写。</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包，其实就是先找到Scanner这个类在哪</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//3.接收数据</span></span><br><span class="line"><span class="comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-单选题"><a href="#1-单选题" class="headerlink" title="1. 单选题"></a>1. 单选题</h2><p>台式机，安卓手机，iPhone手机，他们其实都是计算机，计算机干的事情就是严格的执行人的指令，但是目前的科技条件下，电脑仍然有一个很大的短板，这个短板是？</p><p>A.思考</p><p>B.计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   计算机最擅长的是运行固定的程序，就目前而言，计算机还缺少思考的能力。包括目前的人工智能，也缺少类似于人的思考过程。</span><br><span class="line">我们以下棋的人工智能为例，包括五子棋，国际象棋，围棋等。在以前，计算机会根据对手的每一步，计算自己所有步骤的胜率，根据结果找出最优的下法。其中最杰出的代表就是1997年深蓝战胜了人类的国际象棋冠军卡斯帕罗夫。在国际象棋中，步骤是有限的，深蓝就在这有限个走法中找到胜率最大的。这种把所有情况都考虑到的方式叫做穷举法，适用于不是很复杂的情况，这是以前的人工智能。但是这种方式是有弊端的，比如围棋，围棋中可走的步数就太多了，计算量太大，利用穷举法就不现实，所以在下围棋的时候就会更换算法，比如：在201年AlphaGo对战人类顶级围棋大师的时候，就没有采取穷举法，而是借鉴了人类的思维习惯：推演。也就是，走一步，看三步。首先会判断，在哪几个地方可以落子，然后再判断每一个地方的胜率，找出胜率最大的，这样就不需要把整个棋盘中可以落子的所有地方都考虑完毕，大大减少了计算的时间。但是这种方式也是程序员提前写好的程序，还不能算是自我思考。</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>计算机不能思考，那他是如何工作的呢，下面的描述哪个是对的？</p><p>A.等待人工智能的进一步发展，计算机能自己思考</p><p>B.人类告诉计算机如何计算，规则是什么</p><p><strong>B</strong> </p><h2 id="2-多选题"><a href="#2-多选题" class="headerlink" title="2.多选题"></a>2.多选题</h2><p>任何计算机能执行的东西都是程序，下面的内容哪些是程序？</p><p>A.操作系统</p><p>B.360浏览器</p><p>C.安卓app</p><p>D.电脑病毒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 只要是我们人为编写的，都是程序。</span><br><span class="line">计算机中的程序有系统软件还有应用软件。</span><br><span class="line">关于计算机的其他知识我已录了视频，可以下载观看。</span><br><span class="line">链接：https://pan.baidu.com/s/1et04S2zgVInVNwvmnTuIfw </span><br><span class="line">提取码：m6ga</span><br><span class="line">答案：ABCD</span><br></pre></td></tr></table></figure><h2 id="3-流程考察题"><a href="#3-流程考察题" class="headerlink" title="3.流程考察题"></a>3.流程考察题</h2><p>大多数程序都是顺序结构，计算机一步一步的执行我们的指令，请大家为黑马机器人排列指令，完成机器人进屋的操作</p><p>A.把门拉开</p><p>B.开锁</p><p>C.进入房间</p><p>D.关上房门</p><h2 id="4-流程考察题"><a href="#4-流程考察题" class="headerlink" title="4.流程考察题"></a>4.流程考察题</h2><p>请给下面的步骤排序，制作麦辣鸡腿堡</p><p>A.把第一片面包和第二片面包夹在一起</p><p>B.在第一片面包上面放麦辣鸡酱</p><p>C.拿两片面包</p><p>D.在第二片面包上放麦辣鸡</p><h2 id="题目1（选择）"><a href="#题目1（选择）" class="headerlink" title="题目1（选择）"></a>题目1（选择）</h2><p>下列关于java变量声明那个是错误的：</p><p>A . int x = 5;</p><p>B. double d = 3.14;</p><p>C. char grade = ‘C’;</p><p>D. String name = ‘黑马程序员’;</p><h2 id="题目2（看代码说结果）"><a href="#题目2（看代码说结果）" class="headerlink" title="题目2（看代码说结果）"></a>题目2（看代码说结果）</h2><p>看代码说结果，不要去运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line">money = money + <span class="number">5</span>;</span><br><span class="line">money -= <span class="number">2.5</span>;</span><br><span class="line">money = money + <span class="number">10</span>;</span><br><span class="line">money = money -<span class="number">3</span>;</span><br><span class="line">System.out.println(money)</span><br></pre></td></tr></table></figure><h2 id="题目3-（代码题）"><a href="#题目3-（代码题）" class="headerlink" title="题目3:（代码题）"></a>题目3:（代码题）</h2><p>请用代码描述下列银行流水变化过程：</p><ol><li>小明账户bankBalance初始值有500.00元</li><li>存入250元</li><li>支出100元</li><li>打印剩余存款</li></ol><h2 id="题目4：（选择题）"><a href="#题目4：（选择题）" class="headerlink" title="题目4：（选择题）"></a>题目4：（选择题）</h2><p>变量名是一个单词或者是一组单词，用来描述一个数据的含义，方便人理解，变量名不能有空格。下面的名字哪些可以是变量名?  </p><p>A. mybirthday</p><p>B. myname  </p><p>C. my name </p><p>D. my birthday</p><p>E. 1987.  </p><p>F. ”传智播客” </p><h2 id="题目5：（选择题）"><a href="#题目5：（选择题）" class="headerlink" title="题目5：（选择题）"></a>题目5：（选择题）</h2><p>关于变量的说法哪些是对的?  </p><p>A. 一个变量-一次就可以存储很多种不同的数据</p><p>B. 变量是值的容器,定义变量可以存放值 </p><p>C. 变量可以随时修改存储数据的类型</p><p>D. 定义变量可以帮我们存储信息方便后面使用 </p><h2 id="题目6：（选择题）"><a href="#题目6：（选择题）" class="headerlink" title="题目6：（选择题）"></a>题目6：（选择题）</h2><p>下面代码哪些是创建一个变量?  </p><p>A. int myAge = 18;  </p><p>B. myName=’传智播客”;</p><p>C. myAge = 16;  </p><p>D. String myName ; </p><h2 id="题目7：（选择题）"><a href="#题目7：（选择题）" class="headerlink" title="题目7：（选择题）"></a>题目7：（选择题）</h2><p>int和float的区别是什么?  </p><p>A. 区别是没有区别  </p><p>B. int是变量, float是方法  </p><p>C. int是用来存放整数数据的变量类型，float是存放小数的</p><p>D. int类型的数据要用”， 引号引起来 </p><h2 id="题目8：（代码题）"><a href="#题目8：（代码题）" class="headerlink" title="题目8：（代码题）"></a>题目8：（代码题）</h2><p>变量应该是先声哪后使用,请完成下面代码  </p><p>A.声明字符串型变量name  </p><p>B.声明字符串型变量birthday</p><p>C.声明整数类型变量age  </p><p>D.声明float类型变量money </p><h2 id="题目9（代码题）"><a href="#题目9（代码题）" class="headerlink" title="题目9（代码题）"></a>题目9（代码题）</h2><p>请编写程序，分别定义8种基本数据类型的变量，并打印变量的值。</p><h3 id="训练目标"><a href="#训练目标" class="headerlink" title="训练目标"></a>训练目标</h3><p>java中的八种基本基本数据类型和变量的定义</p><h3 id="训练提示"><a href="#训练提示" class="headerlink" title="训练提示"></a>训练提示</h3><p>1、java中的8种基本数据类型都有什么？</p><p>2、定义变量的格式是什么？</p><p>3、变量名该怎样定义？</p><p>4、该怎样使用变量？</p><h3 id="参考方案"><a href="#参考方案" class="headerlink" title="参考方案"></a>参考方案</h3><p>定义变量，并输出变量的值。</p><h3 id="训练步骤"><a href="#训练步骤" class="headerlink" title="训练步骤"></a>训练步骤</h3><p>1、创建java文件，定义类Test03，编写主方法。</p><p>2、在java语言中，定义变量必须明确变量的数据类型。八种基本数据类型包括byte、short、int、long、float、double、char、boolean。</p><p>3、定义变量的格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">数据类型 变量名; <span class="comment">// 先声明</span></span><br><span class="line">变量名 = 初始化值; <span class="comment">// 再赋值</span></span><br></pre></td></tr></table></figure><p>4、可以包含英文字母、数字字符、英文下划线（_）和英文美元符（$），并且不能以数字开头。在开发中，java变量的命名又最好符合“小驼峰”式的惯例规范，并且最好做到见名知意。</p><p>5、在输出语句中，直接调用变量名即可。</p><p>6、编译并运行代码，查看输出结果。</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目10（代码题）"><a href="#题目10（代码题）" class="headerlink" title="题目10（代码题）"></a>题目10（代码题）</h2><p>请根据下列描述，选用合适的数据类型定义变量，并输出变量的值。</p><p>1、班级里有100个学员。</p><p>2、某商品价格55.55元。</p><p>3、地球已经诞生超过46亿年。</p><p>4、“5是偶数”这句话的描述是假的。</p><p>输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">55.55</span></span><br><span class="line"><span class="number">4600000000</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="训练目标-1"><a href="#训练目标-1" class="headerlink" title="训练目标"></a>训练目标</h3><p>变量的定义</p><h3 id="训练提示-1"><a href="#训练提示-1" class="headerlink" title="训练提示"></a>训练提示</h3><p>1、不同的数据信息需要使用不同的数据类型，可以根据不同数据类型的大小以及特点选择合适的类型来定义变量，描述事物的信息。</p><h3 id="参考方案-1"><a href="#参考方案-1" class="headerlink" title="参考方案"></a>参考方案</h3><p>定义变量描述信息。</p><h3 id="训练步骤-1"><a href="#训练步骤-1" class="headerlink" title="训练步骤"></a>训练步骤</h3><p>1、创建java文件，定义类Test04，编写主方法。</p><p>2、在主方法中定义不同的变量描述题目中的信息。</p><p>​    2.1、学员数量，可以用默认的整数类型int表示</p><p>​    2.2、商品价格，使用默认的浮点数类型double表示</p><p>​    2.3、天文数字，可以使用长整型long表示</p><p>​    2.4、一个描述真或者假，只有两种状态，可以使用boolean类型</p><p>3、使用输出语句，输出变量。</p><p>4、编译并运行，查看输出结果。</p><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目11（代码题）"><a href="#题目11（代码题）" class="headerlink" title="题目11（代码题）"></a>题目11（代码题）</h2><p>在今天的课程学习中，我们知道了java的8种基本数据类型，随着后续学习，我们还将学习引用数据类型。此时由于练习需要，我们要了解其中一个最常用的引用数据类型-字符串（String），字符串变量的一种定义方式与基本数据类型一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型 变量名 = 初始化值；</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 其中String为数据类型，str为变量名（符合标识符规则即可），&quot;中国&quot;是我们学习的字符串常量值。</span></span><br><span class="line"><span class="comment">// 总体即表示：将字符串&quot;abc&quot;，赋值给字符串类型的变量str。</span></span><br><span class="line"><span class="comment">// 输出结果为：中国</span></span><br></pre></td></tr></table></figure><p>请根据以上描述，选用合适的数据类型定义变量用于描述一个学员的信息，并将其输出到屏幕上。输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">************************</span><br><span class="line">我的姓名是：张三</span><br><span class="line">我的性别是：男</span><br><span class="line">我的年龄是：<span class="number">18</span></span><br><span class="line">我的地址是：xx省xx市</span><br><span class="line">我的饭卡余额是：<span class="number">55.55</span>元</span><br><span class="line">************************</span><br></pre></td></tr></table></figure><h3 id="训练目标-2"><a href="#训练目标-2" class="headerlink" title="训练目标"></a>训练目标</h3><p>数据类型、变量的定义和使用、字符串连接符</p><h3 id="训练提示-2"><a href="#训练提示-2" class="headerlink" title="训练提示"></a>训练提示</h3><p>1、根据题目要求，学员的信息包含姓名、性别、年龄、地址、余额，这些信息分别应该使用什么样的数据类型来存储呢？</p><p>2、在输出语句中，为了按照题目要求的格式输出，需要将一些已知字符串和变量进行拼接，比如：”我的姓名是：” + name</p><h3 id="参考方案-2"><a href="#参考方案-2" class="headerlink" title="参考方案"></a>参考方案</h3><h3 id="训练步骤-2"><a href="#训练步骤-2" class="headerlink" title="训练步骤"></a>训练步骤</h3><p>1、创建java文件，定义类Test03，编写主方法。</p><p>2、在主方法中定义变量用于存储学员信息。</p><p>2.1、姓名、性别、地址都可以使用字符串类型</p><p>2.2、年龄为整数数据，使用int类型</p><p>2.3、余额为小数类型，使用double类型</p><p>3、将已知字符串与变量使用“+”拼接在一起输出。</p><p>4、保存文件，编译运行，查看结果。</p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2022/12/27/hexo/"/>
      <url>/2022/12/27/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>nodejs选择LTS版本就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><p>在开hexo博客的文件夹中,用git打开<br>输入  </p><blockquote><p>npm install -g hexo-cli &gt;</p></blockquote><p>   安装完之后可以用  </p><blockquote><p>hexo -v</p></blockquote><p>查看版本  </p><p>之后初始化hexo,初始化之前,文件夹里没有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">//blog 是博客所初始化的名字,可以根据自己的喜好定义</span><br></pre></td></tr></table></figure><p>然后进入blog文件<br>执行下面的命令   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**</p><p>最后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server //或者 hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入localhost:4000,即查看博客</p><h3 id="4-Github创建个人仓库"><a href="#4-Github创建个人仓库" class="headerlink" title="4.Github创建个人仓库"></a>4.Github创建个人仓库</h3><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。其他的地方随意设置.</p><h3 id="5-生成shh添加到github中"><a href="#5-生成shh添加到github中" class="headerlink" title="5.生成shh添加到github中"></a>5.生成shh添加到github中</h3><p>回到git bash中  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道  你是不是对应它的账户。<br>可以用以下两条，检查一下你有没有输对  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>然后会告诉你在本地生成.shh的文件的路径,按路径找到,     </p><p><img src="/2022/12/27/hexo/image-20221227193242479.png" alt="image-20221227193242479"><br>按图中勾住所圈的即可找到文件  </p><p>​    ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。</p><p><img src="/2022/12/27/hexo/3194ad0a9d04d94c09485122932968f3.png" alt="img"><br>在git查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="6-将hexo-部署到github中"><a href="#6-将hexo-部署到github中" class="headerlink" title="6.将hexo 部署到github中"></a>6.将hexo 部署到github中</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repo可以去找仓库code那儿和shh混到一块的网址<br>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p><strong>注意:hexo g不能少</strong></p><h3 id="hexo的基本操作"><a href="#hexo的基本操作" class="headerlink" title="hexo的基本操作!"></a>hexo的基本操作!</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test_my_site</title>
      <link href="/2022/12/27/test-my-site/"/>
      <url>/2022/12/27/test-my-site/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/12/27/test-my-site/52daefd8b018b1983a324db970a3188d1daf4668.jpg" alt="52daefd8b018b1983a324db970a3188d1daf4668"><img src="/2022/12/27/test-my-site/e5155bac16407a1618099336b4f31996308098d6.jpg" alt="e5155bac16407a1618099336b4f31996308098d6"></p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/27/hello-world/"/>
      <url>/2022/12/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
