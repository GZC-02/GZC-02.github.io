<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面向对象进阶</title>
      <link href="/2023/01/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/01/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p> [toc]</p><h2 id="9-final"><a href="#9-final" class="headerlink" title="9 final"></a>9 final</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><p>   学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。</p><p>如果有一个方法我不想别人去改写里面内容，该怎么办呢？</p><p>Java提供了<code>final</code> 关键字，表示修饰的内容不可变。</p><ul><li><strong>final</strong>：  不可改变，最终的含义。可以用于修饰类、方法和变量。<ul><li>类：被修饰的类，不能被继承,表示为最终类。</li><li>方法：被修饰的方法，不能被重写，表示为最终方法。</li><li>变量：被修饰的变量，有且仅能被赋值一次，叫做常量。<h3 id="9-2-使用方式"><a href="#9-2-使用方式" class="headerlink" title="9.2 使用方式"></a>9.2 使用方式</h3></li></ul></li></ul><h4 id="9-2-1-修饰类"><a href="#9-2-1-修饰类" class="headerlink" title="9.2.1 修饰类"></a>9.2.1 修饰类</h4><p>final修饰的类，不能被继承。</p><p>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> class 类名 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class Zi extends Fu &#123;&#125; // 报错,不能继承final的类</span></span><br></pre></td></tr></table></figure><p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h4 id="9-2-2-修饰方法"><a href="#9-2-2-修饰方法" class="headerlink" title="9.2.2 修饰方法"></a>9.2.2 修饰方法</h4><p>final修饰的方法，不能被重写。<br>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi2</span> <span class="keyword">extends</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void show1() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Zi2 show1&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-3-修饰变量-局部变量"><a href="#9-2-3-修饰变量-局部变量" class="headerlink" title="9.2.3 修饰变量-局部变量"></a>9.2.3 修饰变量-局部变量</h4><ol><li><strong>局部变量——基本类型</strong><br>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">// 第一次赋值 </span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明变量，直接赋值，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        b = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，下面两种写法，哪种可以通过编译？</p><p>写法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根据 <code>final</code> 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</strong></p><h4 id="9-2-4-修饰变量-成员变量"><a href="#9-2-4-修饰变量-成员变量" class="headerlink" title="9.2.4 修饰变量-成员变量"></a>9.2.4 修饰变量-成员变量</h4><p>成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个：</p><ul><li>显示初始化(在定义成员变量的时候立马赋值)（常用）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）。</p><p><strong>注意：每个构造方法中都要赋值一次！</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote><h3 id="9-3-常量"><a href="#9-3-常量" class="headerlink" title="9.3 常量"></a>9.3 常量</h3><p>   实际开发中，常量一般作为系统的配置信息，方便维护，提高可读性  </p><p>常量的命名规范：<br>。单个单词：全部大写<br>●多个单词：==全部大写，单词之间用下划线隔开。==    </p><h3 id="9-4-细节"><a href="#9-4-细节" class="headerlink" title="9.4 细节"></a>9.4 细节</h3><blockquote><p>final修饰的变量是基本类型,那么变量存储的数据值不能发生改变。<br>final修饰的变量是引用类型,那么变量存储的地址值不能发生改变，对象内部的可以改变。  </p></blockquote><p>​    </p><h2 id="10-权限修饰符"><a href="#10-权限修饰符" class="headerlink" title="10 权限修饰符"></a>10 权限修饰符</h2><h3 id="10-1-权限修饰符"><a href="#10-1-权限修饰符" class="headerlink" title="10.1 权限修饰符"></a>10.1 权限修饰符</h3><p>​    在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，我们之前已经学习过了public 和 private，接下来我们研究一下protected和默认修饰符的作用。</p><ul><li><p>public：公共的，所有地方都可以访问。</p></li><li><p>protected：本类 ，本包，其他包中的子类都可以访问。</p></li><li><p>默认（没有修饰符）：本类 ，本包可以访问。</p><p>注意：默认是空着不写，不是default</p></li><li><p>private：私有的，当前类可以访问。<br><code>public &gt; protected &gt; 默认 &gt; private</code></p></li></ul><h3 id="10-2-不同权限的访问能力"><a href="#10-2-不同权限的访问能力" class="headerlink" title="10.2 不同权限的访问能力"></a>10.2 不同权限的访问能力</h3><table><thead><tr><th></th><th>public</th><th>protected</th><th>默认</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的类</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>不同包中的无关类（main方法）</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>可见，public具有最大权限。private则是最小权限。</p><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li><p>成员变量使用<code>private</code> ，隐藏细节。</p></li><li><p>构造方法使用<code> public</code> ，方便创建对象。</p></li><li><p>成员方法使用<code>public</code> ，方便调用方法。</p></li></ul><blockquote><p>小贴士：不加权限修饰符，就是默认权限</p></blockquote><h3 id="10-3-权限修饰符的使用规则"><a href="#10-3-权限修饰符的使用规则" class="headerlink" title="10.3 权限修饰符的使用规则"></a>10.3 权限修饰符的使用规则</h3><p>实际开发中，一般只用private和public</p><ul><li>成员变量私有</li><li>方法公开<br><strong>特例：如果方法中的代码是抽取其他方法中共性代码，这个方法一般也私有。</strong></li></ul><h2 id="11-代码块codeBlock"><a href="#11-代码块codeBlock" class="headerlink" title="11 代码块codeBlock"></a>11 代码块codeBlock</h2><h3 id="11-1-局部代码块"><a href="#11-1-局部代码块" class="headerlink" title="11.1 局部代码块"></a>11.1 局部代码块</h3><p>方法里面的一对单独代码块</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230114205808189.png" alt="image-20230114205808189"><br>因为当代码执行到这里时，变量a就从内存中消失了  </p><h3 id="11-2-构造代码块"><a href="#11-2-构造代码块" class="headerlink" title="11.2 构造代码块"></a>11.2 构造代码块</h3><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230114210348641.png" alt="image-20230114210348641"></p><p>构造代码块：<br>1.写在成员位置的代码块<br>2.作用：可以把多个构造方法中重复的代码抽取出来<br>3.执行时机：我们在创建本类对象的时候会先执行构造代码块再执行构造方法<br>这个技术也渐渐淘汰了，因为不够灵活。  </p><p>更加灵活的处理方法</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230114210436330.png" alt="image-20230114210436330"></p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230114210456420.png" alt="image-20230114210456420"></p><h3 id="11-3-静态代码块"><a href="#11-3-静态代码块" class="headerlink" title="11.3 静态代码块"></a>11.3 静态代码块</h3><p>格式：static { }<br>特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次<br>使用场景：在类加载的时候，做一些数据初始化的时候使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> string name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//执行时机：</span></span><br><span class="line"><span class="comment">//随若类的加载而加载的，并且只执行一次。</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.printin(<span class="string">&quot;静态代码块执行了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">( )</span> &#123;</span><br><span class="line">System.out.printin(<span class="string">&quot;空参构造&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(string name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">System.out.printin(<span class="string">&quot;有参构造&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line"><span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s1 <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">Student s2 <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">13</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//静态代码块执行了</span></span><br><span class="line"><span class="comment">//空参构造</span></span><br><span class="line"><span class="comment">//有参构造</span></span><br></pre></td></tr></table></figure><p>main方法可以被我们手动调用</p><p><strong>例子</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/上图main方法的调用</span><br><span class="line">Test.main(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够写出抽象类的格式</li><li><input disabled="" type="checkbox"> 能够写出抽象方法的格式</li><li><input disabled="" type="checkbox"> 能说出抽象类的应用场景</li><li><input disabled="" type="checkbox"> 写出定义接口的格式</li><li><input disabled="" type="checkbox"> 写出实现接口的格式</li><li><input disabled="" type="checkbox"> 说出接口中成员的特点</li><li><input disabled="" type="checkbox"> 能说出接口的应用场景</li><li><input disabled="" type="checkbox"> 能说出接口中为什么会出现带有方法体的方法</li><li><input disabled="" type="checkbox"> 能完成适配器设计模式</li></ul><h2 id="12-抽象类"><a href="#12-抽象类" class="headerlink" title="12 抽象类"></a>12 抽象类</h2><h3 id="12-1-概念"><a href="#12-1-概念" class="headerlink" title="12.1 概念"></a>12.1 概念</h3><p>​       父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p><ul><li><p><strong>抽象方法</strong> ： 没有方法体的方法。</p></li><li><p><strong>抽象类</strong>：包含抽象方法的类。</p></li></ul><h3 id="12-2-abstract使用格式"><a href="#12-2-abstract使用格式" class="headerlink" title="12.2 abstract使用格式"></a>12.2 abstract使用格式</h3><p><strong>abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</strong></p><h4 id="12-2-1-抽象方法"><a href="#12-2-1-抽象方法" class="headerlink" title="12.2.1 抽象方法"></a>12.2.1 抽象方法</h4><p>使用<code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>==没有方法体的方法是抽象方法。==</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表)；</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure><h4 id="12-2-2-抽象类"><a href="#12-2-2-抽象类" class="headerlink" title="12.2.2 抽象类"></a>12.2.2 抽象类</h4><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230116205220560.png" alt="image-20230116205220560"></p><p>如果一个类包含抽象方法，那么该类必须是抽象类。<strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。</strong></p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名字 &#123; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-2-3-抽象类的使用"><a href="#12-2-3-抽象类的使用" class="headerlink" title="12.2.3 抽象类的使用"></a>12.2.3 抽象类的使用</h4><p><strong>要求</strong>：继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类,抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="comment">// 抽象方法必须要放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.重写父类的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;管理其他人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;厨师炒菜多加点盐...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建抽象类,抽象类不能创建对象</span></span><br><span class="line"><span class="comment">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span></span><br><span class="line"><span class="comment">//Employee e = new Employee();</span></span><br><span class="line"><span class="comment">//e.work();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建子类</span></span><br><span class="line"><span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">m.work();</span><br><span class="line"></span><br><span class="line"><span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;ap002&quot;</span>, <span class="string">&quot;库克&quot;</span>, <span class="number">1</span>);</span><br><span class="line">c.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h3 id="12-3-抽象类的特征"><a href="#12-3-抽象类的特征" class="headerlink" title="12.3  抽象类的特征"></a>12.3  抽象类的特征</h3><p>抽象类的特征总结起来可以说是 <strong>有得有失</strong></p><p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p><p><strong>有失：抽象类失去了创建对象的能力。</strong></p><p><strong>其他成员（构造方法，实例方法，静态方法等）抽象类都是具备的。</strong>  </p><h3 id="12-4-抽象类的细节"><a href="#12-4-抽象类的细节" class="headerlink" title="12.4 抽象类的细节"></a>12.4 抽象类的细节</h3><p> 不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的意义是为了被子类继承。</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ol><p>​    6.</p><h3 id="12-5-抽象类存在的意义"><a href="#12-5-抽象类存在的意义" class="headerlink" title="12.5 抽象类存在的意义"></a>12.5 抽象类存在的意义</h3><p>   抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。**==抽象类可以强制让子类，一定要按照规定的格式进行重写==**。    </p><h2 id="13-接口"><a href="#13-接口" class="headerlink" title="13 接口"></a>13 接口</h2><h3 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h3><p>   我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，构造方法，成员变量等。那么什么是接口呢？<strong>接口是更加彻底的抽象，JDK7之前，包括 JDK7，接口中全部是抽象方法。接口同样是不能创建对象的</strong>。<br>   本质：接口是一种规则。  </p><h3 id="13-2-定义格式"><a href="#13-2-定义格式" class="headerlink" title="13.2 定义格式"></a>13.2 定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式：</span></span><br><span class="line">interface 接口名称 &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的声明：interface</span></span><br><span class="line"><span class="comment">// 接口名称：首字母大写，满足“驼峰模式”</span></span><br></pre></td></tr></table></figure><h3 id="13-3-接口成分的特点"><a href="#13-3-接口成分的特点" class="headerlink" title="13.3 接口成分的特点"></a>13.3 接口成分的特点</h3><p>  在JDK7，包括JDK7之前，接口中的<strong>只有</strong>包含：抽象方法和常量</p><h4 id="13-3-1-抽象方法"><a href="#13-3-1-抽象方法" class="headerlink" title="13.3.1 抽象方法"></a>13.3.1 抽象方法</h4><p>​       注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！<br>​       按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</p><h4 id="13-3-2-常量"><a href="#13-3-2-常量" class="headerlink" title="13.3.2 常量"></a>13.3.2 常量</h4><p>   在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。</p><h4 id="13-3-3-案例"><a href="#13-3-3-案例" class="headerlink" title="13.3.3 案例"></a>13.3.3 案例</h4><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-4-基本的实现"><a href="#13-4-基本的实现" class="headerlink" title="13.4 基本的实现"></a>13.4 基本的实现</h3><h4 id="13-4-1-实现接口的概念"><a href="#13-4-1-实现接口的概念" class="headerlink" title="13.4.1 实现接口的概念"></a>13.4.1 实现接口的概念</h4><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><h4 id="13-4-2-实现接口的格式"><a href="#13-4-2-实现接口的格式" class="headerlink" title="13.4.2 实现接口的格式"></a>13.4.2 实现接口的格式</h4><ul><li>接口用关键字interface来定义<br>public interface 接口名 { }</li><li>接口不能实例化</li><li>接口和类之间是实现关系，通过implements关键字表示<br>public class类名implements接口名 {}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**接口的实现：</span></span><br><span class="line"><span class="comment">    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">    实现类的格式:*/</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2</span>,接口<span class="number">3.</span>..&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？  </p><h4 id="13-4-3-类实现接口的要求和意义"><a href="#13-4-3-类实现接口的要求和意义" class="headerlink" title="13.4.3  类实现接口的要求和意义"></a>13.4.3  类实现接口的要求和意义</h4><ol><li>必须重写实现的全部接口中所有抽象方法。</li><li>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。</li><li><strong>意义：接口体现的是一种规范，==接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。==这正是一种==强制性==的规范。</strong><h4 id="13-4-4-类与接口基本实现案例"><a href="#13-4-4-类与接口基本实现案例" class="headerlink" title="13.4.4  类与接口基本实现案例"></a>13.4.4  类与接口基本实现案例</h4></li></ol><p>案例一：</p><p>假如我们定义一个运动员的<strong>接口</strong>（规范），代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   接口：接口体现的是规范。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// 抽象方法，跑步。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span>; <span class="comment">// 抽象方法，遵守法律。</span></span><br><span class="line">    String <span class="title function_">compittion</span><span class="params">(String project)</span>;  <span class="comment">// 抽象方法，比赛。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义一个乒乓球运动员类，实现接口，实现接口的<strong>实现类</strong>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._03接口的实现;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现：</span></span><br><span class="line"><span class="comment"> *    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment"> *    实现类的格式:</span></span><br><span class="line"><span class="comment"> *      class 类名 implements 接口1,接口2,接口3...&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span>  <span class="keyword">implements</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员稍微跑一下！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员守法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">compittion</span><span class="params">(String project)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参加&quot;</span>+project+<span class="string">&quot;得金牌！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类对象。</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">zjk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>();</span><br><span class="line">        zjk.run();</span><br><span class="line">        zjk.law();</span><br><span class="line">        System.out.println(zjk.compittion(<span class="string">&quot;全球乒乓球比赛&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例二</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类：</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Animal&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rabbit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rabbit</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;兔子吃胡萝卜！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Forg</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Swim</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Forg</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Forg</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;青蛙吃虫子！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;青蛙在游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//package com.itheima.demo1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Swim</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗刨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="13-5-创建过程中的快捷方法："><a href="#13-5-创建过程中的快捷方法：" class="headerlink" title="13.5 创建过程中的快捷方法："></a>13.5 创建过程中的快捷方法：</h3><h4 id="补抽象方法和接口"><a href="#补抽象方法和接口" class="headerlink" title="补抽象方法和接口"></a>补抽象方法和接口</h4><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230118202504306.png" alt="image-20230118202504306"></p><p>点击红色波浪线，按Alt+回车 ，选择第一个</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230118202652552.png" alt="image-20230118202652552"></p><p>一般ctr+a，全选，按回车。</p><h4 id="补构造方法"><a href="#补构造方法" class="headerlink" title="补构造方法"></a>补构造方法</h4><p>alt + Fn + insert，</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230118203057734.png" alt="image-20230118203057734"></p><p>ctrl +a 全选 ，回车即可。</p><h3 id="13-5-接口特点"><a href="#13-5-接口特点" class="headerlink" title="13.5 接口特点"></a>13.5 接口特点</h3><p>🎐成员变量<br>   只能是常量<br>   默认修饰符：public static final<br>🎢构造方法<br>      没有<br>✨成员方法<br>    只能是抽象方法<br>    默认修饰符：public abstract<br>🎊JDK7以前：接口中只能定义抽象方法。<br>🎑JDK8的新特性：接口中可以定义有方法体的方法。<br>🎏JDK9的新特性：接口中可以定义私有方法。</p><p>成员变量默认修饰符：public static final 证明方法</p><p><strong>内存分析工具</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interimpl</span> <span class="keyword">implements</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*System.out.println(Inter.a);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Inter.a = 15;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Interimpl</span> <span class="variable">ii</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Interimpl</span>();</span><br><span class="line">        ii.method();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        sc.next();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行，点击Terminal（终端），输入jps</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230118211408321.png" alt="image-20230118211408321"></p><p>再输入jhsdb hsdb , 打开内存分析工具。</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230118211503037.png" alt="image-20230118211503037"></p><p>点开File，点第一个对话框，输入测试类Test的id。</p><p><img src="/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/image-20230118211606657.png" alt="image-20230118211606657"></p><p>……先不了解。</p><h3 id="13-6-类与接口的多实现"><a href="#13-6-类与接口的多实现" class="headerlink" title="13.6 类与接口的多实现"></a>13.6 类与接口的多实现</h3><p><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口。</strong></p><p>首先我们先定义两个接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这一个运动员的规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment"> *    一个类可以实现多个接口: Law, SportMan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊长守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。</p><h3 id="13-7-接口与接口的多继承"><a href="#13-7-接口与接口的多继承" class="headerlink" title="13.7 接口与接口的多继承"></a>13.7 接口与接口的多继承</h3><p>Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：</p><p><strong>类与接口是实现关系</strong></p><p><strong>接口与接口是继承关系</strong></p><p>接口继承接口就是把其他接口的抽象方法与本接口进行了合并。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Abc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *  总结：</span><br><span class="line"> *     接口与类之间是多实现的。</span><br><span class="line"> *     接口与接口之间是多继承的。</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span> , Abc &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-8-🎐扩展：接口的细节"><a href="#13-8-🎐扩展：接口的细节" class="headerlink" title="13.8 🎐扩展：接口的细节"></a>13.8 🎐扩展：接口的细节</h3><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><strong>当两个接口中存在相同抽象方法的时候，该怎么办？</strong></li></ol><blockquote><p>只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。</p></blockquote><ol start="2"><li>实现类能不能继承A类的时候，同时实现其他接口呢？</li></ol><blockquote><p>继承的父类，就好比是亲爸爸一样<br>实现的接口，就好比是干爹一样<br>可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。</p></blockquote><ol start="3"><li>实现类能不能继承一个抽象类的时候，同时实现其他接口呢？</li></ol><blockquote><p>实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。</p></blockquote><ol start="4"><li>实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？</li></ol><blockquote><p>处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。<br>处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。</p></blockquote><ol start="5"><li>如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?</li></ol><blockquote><p>可以在接口跟实现类中间，新建一个中间类（适配器类）<br>让这个适配器类去实现接口，对接口里面的所有的方法做空重写。<br>让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。<br>因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象</p></blockquote><h3 id="13-9-🎉多学三招"><a href="#13-9-🎉多学三招" class="headerlink" title="13.9 🎉多学三招-"></a>13.9 🎉多学三招-</h3><h4 id="13-9-1-接口中新增方法"><a href="#13-9-1-接口中新增方法" class="headerlink" title="13.9.1 接口中新增方法"></a>13.9.1 接口中新增方法</h4><ul><li>JDK7以前：接口中只能定义抽象方法。</li><li>JDK8的新特性：接口中可以定义有方法体的方法。（默认、静态)</li><li>JDK9的新特性：接口中可以定义私有方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/01/11/Linux/"/>
      <url>/2023/01/11/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="1-linux概述"><a href="#1-linux概述" class="headerlink" title="1.linux概述"></a>1.linux概述</h2><h3 id="1-1-学习Linux之前先了解Unix"><a href="#1-1-学习Linux之前先了解Unix" class="headerlink" title="1.1 学习Linux之前先了解Unix"></a>1.1 学习Linux之前先了解Unix</h3><p>​        Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发。UNIX的商标权由国际开放标准组织（The Open Group）所拥有。UNIX操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p><h3 id="1-2-Linux的概述："><a href="#1-2-Linux的概述：" class="headerlink" title="1.2 Linux的概述："></a>1.2 Linux的概述：</h3><p>​        Linux是基于Unix的</p><p>​        Linux是一种自由和**==开放源码==**的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机</p><p><img src="/Linux/12.png" alt="12"></p><p>​       诞生于1991 年10 月5 日。是由芬兰赫尔辛基大学学生Linus Torvalds和后来加入的众多爱好者共同开发完成</p><p><img src="/Linux/%E6%A0%87%E5%BF%97.png" alt="标志">![Linus Torvalds](Linux/Linus Torvalds.png)</p><h3 id="1-3-Linux的历史："><a href="#1-3-Linux的历史：" class="headerlink" title="1.3 Linux的历史："></a>1.3 Linux的历史：</h3><p>​        Linux最初是由芬兰赫尔辛基大学学生Linus Torvalds由于自己不满意教学中使用的MINIX操作系统， 所以在1990年底由于个人爱好设计出了LINUX系统核心。后来发布于芬兰最大的ftp服务器上，用户可以免费下载，所以它的周边的程序越来越多，Linux本身也逐渐发展壮大起来，之后Linux在不到三年的时间里成为了一个功能完善，稳定可靠的操作系统.</p><h3 id="1-4-Linux系统的应用"><a href="#1-4-Linux系统的应用" class="headerlink" title="1.4 Linux系统的应用"></a>1.4 Linux系统的应用</h3><p>==服务器系统==Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等； </p><p>嵌入式系统路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，</p><p>高性能运算、计算密集型应用Linux有强大的运算能力。</p><p>桌面应用系统</p><p>移动手持系统</p><p>window图形界面虽然 很好但是不适合但服务器 </p><h3 id="1-5-Linux的版本"><a href="#1-5-Linux的版本" class="headerlink" title="1.5 Linux的版本"></a>1.5 Linux的版本</h3><p>​        <strong>Linux</strong>的版本分为两种：**==内核版本==和==发行版本==<strong>；</strong>内核版本**是指在Linus领导下的内核小组开发维护的系统内核的版本号 ，内核不要钱，免费的，发行版本可能会要钱；</p><h3 id="1-6-Linux的主流版本"><a href="#1-6-Linux的主流版本" class="headerlink" title="1.6 Linux的主流版本"></a>1.6 Linux的主流版本</h3><p><img src="/Linux/%E4%B8%BB%E6%B5%81%E7%89%88%E6%9C%AC.png" alt="主流版本"></p><h2 id="2-linux-安装"><a href="#2-linux-安装" class="headerlink" title="2 linux 安装"></a>2 linux 安装</h2><h3 id="2-1-虚拟机安装"><a href="#2-1-虚拟机安装" class="headerlink" title="2.1 虚拟机安装"></a>2.1 虚拟机安装</h3><p>虚拟机：一台虚拟的电脑.</p><p>虚拟机软件:</p><p>* VmWare    :收费的.</p><p>* VirtualBox  :免费的.</p><h3 id="2-2-安装VmWare"><a href="#2-2-安装VmWare" class="headerlink" title="2.2 安装VmWare"></a>2.2 安装VmWare</h3><p>参考《虚拟软件vmware安装.doc》</p><h3 id="2-3-安装centOS"><a href="#2-3-安装centOS" class="headerlink" title="2.3 安装centOS"></a>2.3 安装centOS</h3><p>登录时，用户写root，密码就是你设的根密码（021203）（不是账号密码）。</p><p><img src="/Linux/image-20230111181217057.png" alt="image-20230111181217057"></p><p><strong>ifconfig inet addr 就是ip地址</strong></p><h3 id="2-4-Linux的远程访问"><a href="#2-4-Linux的远程访问" class="headerlink" title="2.4 Linux的远程访问"></a>2.4 Linux的远程访问</h3><h3 id="2-4-1．-安装一个远程访问的软件-CRT"><a href="#2-4-1．-安装一个远程访问的软件-CRT" class="headerlink" title="2.4.1． 安装一个远程访问的软件:CRT"></a>2.4.1． 安装一个远程访问的软件:CRT</h3><h3 id="2-4-2-连接Linux"><a href="#2-4-2-连接Linux" class="headerlink" title="2.4.2 连接Linux:"></a>2.4.2 连接Linux:</h3><p><img src="/Linux/CRT.png" alt="CRT"></p><p>需要录入linux的ip地址(主机名字）及用户名密码</p><p>查看ip地址ifconfig</p><p>修改背景</p><p><img src="/Linux/image-20230111200557895.png" alt="image-20230111200557895"></p><p><img src="/Linux/image-20230111200649061.png" alt="image-20230111200649061"></p><h3 id="3-Linux目录结构"><a href="#3-Linux目录结构" class="headerlink" title="3 Linux目录结构"></a>3 Linux目录结构</h3><p><img src="/Linux/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Linux目录结构"></p><p>root管理员的home目录root</p><p>其他用户的home目录home目录中</p><p>usr ：安装的软件</p><p>/ 表示系统根目录</p><p>~表示用户根目录（root）</p><h3 id="4-Linux的常用命令"><a href="#4-Linux的常用命令" class="headerlink" title="4. Linux的常用命令"></a>4. Linux的常用命令</h3><p>pwd 当前目录</p><p>ls :展示可以显示的文件</p><p>ls -a  浏览全部文件，包括掩藏文件</p><p>以点开头的文件名，一般都是隐藏文件</p><p>ls -l 详细信息 简写 为 ll</p><h4 id="4-1-切换目录命令cd："><a href="#4-1-切换目录命令cd：" class="headerlink" title="4.1 切换目录命令cd："></a>4.1 切换目录命令cd：</h4><p>使用cd app 切换到app目录</p><p>cd .. 切换到上一层目录</p><p>cd /   切换到系统根目录</p><p>cd ~   切换到用户主目录</p><p>cd -  切换到上一个所在目录</p><p>使用tab键来补全文件路径</p><h4 id="4-2-列出文件列表：ls-ll"><a href="#4-2-列出文件列表：ls-ll" class="headerlink" title="4.2 列出文件列表：ls ll"></a>4.2 列出文件列表：ls ll</h4><p>ls(list)是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容。  格式：ls[参数] [路径或文件名]</p><p>常用：</p><p>在linux中以 . 开头的文件都是隐藏的文件</p><h4 id="4-3-创建目录和移除目录：mkdir-rmdir"><a href="#4-3-创建目录和移除目录：mkdir-rmdir" class="headerlink" title="4.3 创建目录和移除目录：mkdir rmdir"></a>4.3 创建目录和移除目录：mkdir rmdir</h4><p>mkdir(make directory)命令可用来创建子目录。mkdir app  在当前目录下创建app目录mkdir –p app2/test  级联创建aap2以及test目</p><p>rmdir(remove directory)命令可用来删除“空”的子目录：rmdir app  删除app目录</p><h3 id="4-6-其他常用命令"><a href="#4-6-其他常用命令" class="headerlink" title="4.6 其他常用命令"></a>4.6 其他常用命令</h3><p>【pwd】</p><p>显示当前所在目录</p><p>【touch】</p><p>创建一个空文件</p><p>touch a.txt</p><p>【clear/ crtl + L】</p><p>清屏</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>易经</title>
      <link href="/2023/01/08/%E6%98%93%E7%BB%8F/"/>
      <url>/2023/01/08/%E6%98%93%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-初九曰：「潜龙勿用。」何谓也？"><a href="#1-初九曰：「潜龙勿用。」何谓也？" class="headerlink" title="1.初九曰：「潜龙勿用。」何谓也？"></a>1.初九曰：「潜龙勿用。」何谓也？</h3><p>子曰：「龙德而隐者也。不易乎世，不成乎名；遯世而无闷，不见是而无闷；乐则行之，忧则违之；确乎其不可拔，乾龙也。」</p><p>​        意思是隐喻事物在发展之初，虽然势头较好，但比较弱小，所以应该小心谨慎，不可轻举妄动。</p><h3 id="2-九二曰：「见龙在田，利见大人。」何谓也？"><a href="#2-九二曰：「见龙在田，利见大人。」何谓也？" class="headerlink" title="2.九二曰：「见龙在田，利见大人。」何谓也？"></a>2.九二曰：「见龙在田，利见大人。」何谓也？</h3><p>子曰：「龙德而正中者也。庸言之信，庸行之谨，闲邪存其诚，善世而不伐，德博而化。易曰：「见龙在田，利见大人。」君德 也。」</p><p>​        龙出现在田野之上，有利于见到大人物来发展自己。指大德大才之人，经过潜藏修养之后，其德业普施于世，可以有所作为。</p><h3 id="3-九三曰：「君子终日乾乾，夕惕若，厉无咎。」何谓也？"><a href="#3-九三曰：「君子终日乾乾，夕惕若，厉无咎。」何谓也？" class="headerlink" title="3.九三曰：「君子终日乾乾，夕惕若，厉无咎。」何谓也？"></a>3.九三曰：「君子终日乾乾，夕惕若，厉无咎。」何谓也？</h3><p>子曰：「君子进德修业，忠信，所以进德也。修辞立其诚，所以居业也。知至至之，可与几也。知终终之，可与存义 也。是故，居上位而不骄，在下位而不忧。故乾乾，因其时而惕，虽危而无咎矣。」</p><p>​        <strong>君子终日乾乾，就是说人一天到晚，都要保持本分，保持常态，永远这样。不但如此，到了晚上，还要警惕自己，不可放松，就像白天一样的小心。就是说到了中年做事得意的时候，做人做事随时随地都要小心，乃至到了晚年都不能放松</strong>。《大学》、《中庸》的思想，都是从这里来的，这就是所谓的“<strong>惕若</strong>”。</p><p><strong>“厉”，是精神的贯注与专精，磨磨自己，就没有毛病。</strong></p><h3 id="九四：「或跃在渊，无咎。」何谓也？"><a href="#九四：「或跃在渊，无咎。」何谓也？" class="headerlink" title="九四：「或跃在渊，无咎。」何谓也？"></a>九四：「或跃在渊，无咎。」何谓也？</h3><p>子曰：「上下无常，非为邪也。进退无恒，非离群也。君子进德修业，欲及时也，故无咎。」</p><h3 id="九五曰：「飞龙在天，利见大人。」何谓也？"><a href="#九五曰：「飞龙在天，利见大人。」何谓也？" class="headerlink" title="九五曰：「飞龙在天，利见大人。」何谓也？"></a>九五曰：「飞龙在天，利见大人。」何谓也？</h3><p>子曰：「同声相应，同气相求；水流湿，火就燥；云从龙，风从虎。圣人作，而万物覩，本乎天者亲上，本乎地者亲下，则各从其 类也。</p><h3 id="上九曰：「亢龙有悔。」何谓也？"><a href="#上九曰：「亢龙有悔。」何谓也？" class="headerlink" title="上九曰：「亢龙有悔。」何谓也？"></a>上九曰：「亢龙有悔。」何谓也？</h3><p>子曰：「贵而无位，高而无民，贤人在下而无辅，是以动而有悔也。」</p><p>居高位的人要戒骄，否则会因失败而后悔，后也指盛久必衰</p><p>乾龙勿用，下也。见龙在田，时舍也。终日乾乾，行事也。或跃在渊，自试也。飞龙在天，上治也。亢龙有悔，穷之灾也。乾元用九，天下治也。</p><p>乾龙勿用，阳气潜藏。见龙在田，天下文明。终日乾乾，与时偕行。或跃在渊，乾道乃革。飞龙在天，乃位乎天德。亢龙有悔，与时偕极。乾元用九，乃见天则。</p><p>乾元者，始而亨者也。利贞者，性情也。乾始能以美利利天下，不言所利。大矣哉！大哉乾乎？刚健中正，纯粹精也。六爻发挥，旁通情也。时乘六龙，以御天也。云行雨施，天 下平也。</p><p>君子以成德为行，日可见之行也。潜之为言也，隐而未见，行而未成，是以君子弗用也。</p><p>君子学以聚之，问以辩之，宽以居之，仁以行之。易曰：「见龙在田，利见大人。」君德也。</p><p>九三，重刚而不中，上不在天，下不在田。故乾乾，因其时而惕，虽危无咎矣。</p><p>九四，重刚而不中，上不在天，下不在田，中不在人，故或之。或之者，疑之也，故无咎。</p><p>夫大人者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶。先天下而天弗违，后天而奉天时。天且弗违，而况於人乎？况於鬼神乎？</p><p>亢之为言也，知进而不知退，知存而不知亡，知得而不知丧。其唯圣人乎？知进退存亡，而不失其正者，其为圣人乎？</p><p>四岁那年，我做了一个梦，梦里的我在一个陌生的地方，那地方有着名为手机的法宝，和一</p><p>我有一道融万法，敢教</p>]]></content>
      
      
      <categories>
          
          <category> 文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象进阶</title>
      <link href="/2023/01/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E4%B8%8A/"/>
      <url>/2023/01/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h1><ul><li><input checked="" disabled="" type="checkbox"> 能够说出使用多态的前提条件</li><li><input disabled="" type="checkbox"> 理解多态的向上转型</li><li><input disabled="" type="checkbox"> 理解多态的向下转型</li><li><input disabled="" type="checkbox"> 能够知道多态的使用场景</li><li><input disabled="" type="checkbox"> 包的作用</li><li><input disabled="" type="checkbox"> public和private权限修饰符的作用</li><li><input disabled="" type="checkbox"> 描述final修饰的类的特点</li><li><input disabled="" type="checkbox"> 描述final修饰的方法的特点</li><li><input disabled="" type="checkbox"> 描述final修饰的变量的特点</li></ul><h1 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h1><h2 id="1-static-静态变量"><a href="#1-static-静态变量" class="headerlink" title="1 static 静态变量"></a>1 static 静态变量</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>以前我们定义过如下类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> sex; <span class="comment">// &#x27;男&#x27;  &#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String  a)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经知道面向对象中，存在类和对象的概念，我们在类中定义了一些成员变量，例如name,age,sex ,结果发现这些成员变量，每个对象都存在（因为每个对象都可以访问）。</p><p>而像name ,age , sex确实是每个学生对象都应该有的属性，应该属于每个对象。</p><p>所以Java中成员（<strong>变量和方法</strong>）等是存在所属性的，Java是通过static关键字来区分的。<strong>static关键字在Java开发非常的重要，对于理解面向对象非常关键。</strong></p><p>关于 <code>static</code> 关键字的使用，它可以用来修饰的成员变量和成员方法，被static修饰的成员是<strong>属于类</strong>的是放在静态区中，没有static修饰的成员变量和方法则是<strong>属于对象</strong>的。我们上面案例中的<strong>成员变量都是没有static修饰的，所以属于每个对象。</strong></p><h3 id="1-2-定义格式和使用"><a href="#1-2-定义格式和使用" class="headerlink" title="1.2 定义格式和使用"></a>1.2 定义格式和使用</h3><p><strong>static是静态的意思。 static可以修饰成员变量或者修饰方法。</strong></p><h4 id="1-2-1-静态变量及其访问"><a href="#1-2-1-静态变量及其访问" class="headerlink" title="1.2.1 静态变量及其访问"></a>1.2.1 静态变量及其访问</h4><p>​         <strong>有static修饰成员变量，说明这个成员变量是属于类的，这个成员变量称为类变量或者静态（成员）变量。 直接用  类名访问即可</strong>。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。<strong>所有的对象都可以==共享==这个变量。</strong></p><p><strong>如何使用呢</strong></p><p>例如现在我们需要定义传智全部的学生类，那么这些学生类的对象的学校属性应该都是“传智”，这个时候我们可以把这个属性定义成static修饰的静态成员变量。</p><p><strong>定义格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 数据类型 变量名 = 初始值；    </span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">schoolName</span> <span class="operator">=</span> <span class="string">&quot;传智播客&quot;</span>； <span class="comment">// 属于类，只有一份。</span></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态成员变量的访问:</strong></p><p>==<strong>格式：类名.静态变量</strong>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(Student.schoolName); <span class="comment">// 传智播客</span></span><br><span class="line">    Student.schoolName = <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">    System.out.println(Student.schoolName); <span class="comment">// 黑马程序员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-实例变量及其访问"><a href="#1-2-2-实例变量及其访问" class="headerlink" title="1.2.2 实例变量及其访问"></a>1.2.2 实例变量及其访问</h4><p>无static修饰的成员变量属于每个对象的，  这个成员变量叫<strong>实例变量</strong>，之前我们写成员变量就是实例成员变量。</p><p><strong>需要注意的是</strong>：实例成员变量属于每个对象，必须创建类的对象才可以访问。   </p><p><strong>格式：对象.实例成员变量</strong></p><h3 id="1-3-static内存图"><a href="#1-3-static内存图" class="headerlink" title="1.3 static内存图"></a>1.3 static内存图</h3><p><img src="/image-20230109221626140.png" alt="image-20230109221626140"></p><p><img src="/image-20230109222016612.png" alt="image-20230109222016612"></p><h2 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2 静态方法"></a>2 静态方法</h2><h3 id="2-1-工具类"><a href="#2-1-工具类" class="headerlink" title="2.1 工具类"></a>2.1 工具类</h3><p>帮助我们做一些事情的，但是不描述任何事物的类</p><p>01 类名见名知意<br>02 私有化构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="comment">// 目的：不让外界创建他的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ArrUtil</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Javabean类"><a href="#2-2-Javabean类" class="headerlink" title="2.2 Javabean类"></a>2.2 Javabean类</h3><p>用来描述一类事物的类。比如，Student,Teacher,Dog,Cat等</p><h3 id="2-3-测试类"><a href="#2-3-测试类" class="headerlink" title="2.3 测试类"></a>2.3 测试类</h3><p>用来检查其他类是否书写正确，带有main方法的类，是程序的入口</p><h3 id="2-4-定义数组工具类"><a href="#2-4-定义数组工具类" class="headerlink" title="2.4 定义数组工具类"></a>2.4 定义数组工具类</h3><p>需求：在实际开发中，经常会遇到一些数组使用的工具类。<br>请按照如下要求编写一个数组的工具类：ArrayUtil</p><p>●提供一个工具类方法printArr,用于返回整数数组的内容。<br>    返回的字符串格式如：[10,20,50,34,100]（只考虑整数数组，且只考虑一维数组)</p><p>●提供这样一个工具方法getAerage,用于返回平均分。（只考虑浮点型数组，且只考虑一维数组）</p><p>●定义一个测试类TestDemo,调用该工具类的工具方法，并返回结果。</p><h3 id="2-5-static-的注意事项"><a href="#2-5-static-的注意事项" class="headerlink" title="2.5 static 的注意事项"></a>2.5 static 的注意事项</h3><p>●静态方法只能访问静态变量和静态方法</p><p>●<strong>非静态方法可以访问静态变量或者静态方法，也可以访问非静态的成员变量和非静态的成员方法</strong></p><p>●<strong>静态方法中是没有this关键字</strong></p><p>硬记结论<br>代码方面理解<br>内存方面理解</p><p><img src="/image-20230110215906890.png" alt="image-20230110215906890"></p><h3 id="2-6-重新认识一下main方法"><a href="#2-6-重新认识一下main方法" class="headerlink" title="2.6 重新认识一下main方法"></a>2.6 重新认识一下main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Helloworld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="comment">//[] 数组</span></span><br><span class="line">        <span class="comment">//String :数据类型</span></span><br><span class="line">        <span class="comment">//args ：数组名</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>● public:   权限修饰符 ， 被JVM调用，访问权限足够大.</p><p>● static: 被JVM调用，不用创建对象，直接类名访问。<br>因为main方法是静态的，所以测试类中其他方法也需要是静态的。<br>● void: 被JVM调用，不需要给VM返回值<br>● main: 一个通用的名称，虽然不是关键字，但是被JVM识别<br>● String[] args: 以前用于接收键盘录入数据的，现在没用。</p><p><img src="/image-20230110222109649.png" alt="image-20230110222109649"></p><p>args 在下图存着</p><p><img src="/image-20230110222353708.png" alt="image-20230110222353708"></p><p>空格表示隔开</p><p><img src="/image-20230110222457840.png" alt="image-20230110222457840"></p><p>输入：hello world ！！</p><p><img src="/image-20230110222903650.png" alt="image-20230110222903650"></p><p>输出：</p><p><img src="/image-20230110222937269.png" alt="image-20230110222937269"></p><h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3 继承"></a>3 继承</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><h4 id="3-1-1-引入"><a href="#3-1-1-引入" class="headerlink" title="3.1.1 引入"></a>3.1.1 引入</h4><p>假如我们要定义如下类:<br>学生类,老师类和工人类，分析如下。</p><ol><li><p>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</p></li><li><p>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</p></li><li><p>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</p></li></ol><p>如果我们定义了这三个类去开发一个系统，那么这三个类中就存在大量重复的信息（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了相同代码大量重复，代码显得很臃肿和冗余，那么如何解决呢？</p><p>假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要<strong>继承</strong>那一个类即可。如图所示：<br><img src="/1.jpg"></p><p>其中，多个类可以称为<strong>子类</strong>，单独被继承的那一个类称为<strong>父类</strong>、<strong>超类（superclass）</strong>或者<strong>基类</strong>。</p><h4 id="3-1-2-继承的含义"><a href="#3-1-2-继承的含义" class="headerlink" title="3.1.2 继承的含义"></a>3.1.2 继承的含义</h4><p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><p><strong>继承</strong>：就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</p><h4 id="3-1-3-继承的好处"><a href="#3-1-3-继承的好处" class="headerlink" title="3.1.3 继承的好处"></a>3.1.3 继承的好处</h4><ol><li>提高<strong>代码的复用性</strong>（减少代码冗余，相同代码重复利用）。</li><li>使类与类之间产生了关系。</li></ol><h4 id="3-1-4-诀窍"><a href="#3-1-4-诀窍" class="headerlink" title="3.1.4 诀窍"></a>3.1.4 诀窍</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当类与类之间，存在相同（共性）的内容，并满足子类是父类的一种，就可以考虑使用继承，来优化代码。</span><br></pre></td></tr></table></figure><p><img src="/image-20230111212826332.png" alt="错误的继承，子类不是父类的一种"></p><h3 id="3-2-继承的格式"><a href="#3-2-继承的格式" class="headerlink" title="3.2 继承的格式"></a>3.2 继承的格式</h3><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">.../一般都补全写构造方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。</strong></p><h3 id="3-3-继承的特点"><a href="#3-3-继承的特点" class="headerlink" title="3.3 继承的特点"></a>3.3 继承的特点</h3><p>🧨java只支持单继承，不支持多继承，但支持多层继承。</p><p>✨java中所有类都直接或者间接继承于Object类</p><p>单继承：一个子类只能继承一个父类，</p><p><img src="/image-20230111213439483.png" alt="image-20230111213439483">不支持多继承：子类不能同时继承多个父类</p><p><img src="/image-20230111213654684.png" alt="image-20230111213654684"></p><p><strong>==java中规定，Object是所有类的祖宗，JVM虚拟机，在运行时候，会判别是否有继承父类，如果没有，就默认是继承了Object类==</strong></p><p><img src="/image-20230111213759863.png" alt="image-20230111213759863"></p><p>当类足够多，会形成继承体系</p><p><img src="/image-20230111214035105.png" alt="image-20230111214035105"></p><p>爷爷默认继承Object类</p><p>父亲继承爷爷</p><h3 id="3-3-继承案例"><a href="#3-3-继承案例" class="headerlink" title="3.3 继承案例"></a>3.3 继承案例</h3><p> <strong>案例</strong></p><p>请使用继承定义以下类:</p><ol><li>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</li><li>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</li><li>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</li></ol><p><strong>案例图解分析</strong></p><p>老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。</p><p>如下图所示。</p><p><img src="/360%E6%88%AA%E5%9B%BE20181202211331250.jpg"></p><p>3.3.3 案例代码实现</p><p><strong>1.父类Human类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">   <span class="comment">// 合理隐藏</span></span><br><span class="line">   <span class="keyword">private</span> String name ;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 合理暴露</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.子类Teacher类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师在认真教技术！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.子类Student类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.子类BanZhuren类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班主任强调纪律问题！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.测试类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">dlei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        dlei.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        dlei.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        dlei.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(dlei.getName());</span><br><span class="line">        System.out.println(dlei.getAge());</span><br><span class="line">        System.out.println(dlei.getSalary());</span><br><span class="line">        dlei.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="type">BanZhuRen</span> <span class="variable">linTao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BanZhuRen</span>();</span><br><span class="line">        linTao.setName(<span class="string">&quot;灵涛&quot;</span>);</span><br><span class="line">        linTao.setAge(<span class="string">&quot;28&quot;</span>);</span><br><span class="line">        linTao.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(linTao.getName());</span><br><span class="line">        System.out.println(linTao.getAge());</span><br><span class="line">        System.out.println(linTao.getSalary());</span><br><span class="line">        linTao.admin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xugan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        xugan.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        xugan.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        <span class="comment">//xugan.setSalary(1000.99); // xugan没有薪水属性，报错！</span></span><br><span class="line">        System.out.println(xugan.getName());</span><br><span class="line">        System.out.println(xugan.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-小结"><a href="#3-3-4-小结" class="headerlink" title="3.3.4 小结"></a>3.3.4 小结</h3><p>1.继承实际上是子类相同的属性和行为可以定义在父类中，子类特有的属性和行为由自己定义，这样就实现了相同属性和行为的重复利用，从而提高了代码复用。</p><p>2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？请看下节！</p><h3 id="3-4-子类到底能继承父类中的哪些内容"><a href="#3-4-子类到底能继承父类中的哪些内容" class="headerlink" title="3.4  子类到底能继承父类中的哪些内容"></a>3.4  子类到底能继承父类中的哪些内容</h3><h4 id="🎗内存图"><a href="#🎗内存图" class="headerlink" title="🎗内存图"></a>🎗内存图</h4><p>父类中的类的成员为：</p><table><thead><tr><th>子类是否能继承</th><th>非私有</th><th>private</th></tr></thead><tbody><tr><td>构造方法</td><td>不能</td><td>不能</td></tr><tr><td>成员变量</td><td>能</td><td>能，但不能直接用</td></tr><tr><td>成员方法</td><td>能</td><td>不能</td></tr></tbody></table><p><strong>构造方法</strong>：非私有，和私有都不能继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">zi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        如图所示，有参构造会报错，空参未报错，是因为如果一个类中没有构造方法，JVM默认添加一个空参构造。</p><p><img src="/image-20230112165951140.png" alt="image-20230112165951140"></p><p>idea中解决办法：点击有参创建，Alt + 回车，会自动构建有参构造</p><p><strong>成员变量</strong></p><p>非私有和 私有都能继承，私有不能直接使用。</p><h4 id="继承的内存图"><a href="#继承的内存图" class="headerlink" title="继承的内存图"></a>继承的内存图</h4><p>非私有</p><p><img src="/image-20230112213712430.png" alt="image-20230112213712430"></p><p>JVM中有垃圾回收机制</p><p>私有</p><p><img src="/image-20230112214308036.png" alt="image-20230112214308036"></p><p><strong>成员方法</strong>：</p><p>在每个类中都有虚方法表。不用一层一层往上找方法</p><p><img src="/image-20230112214815363.png" alt="image-20230112214815363"></p><p>==只有父类中的虚方法才能被继承。==</p><p>Object中有5个可以成为虚方法的方法</p><p><img src="/image-20230112215457029.png" alt="image-20230112215457029"></p><h2 id="4-继承中成员变量的访问特点"><a href="#4-继承中成员变量的访问特点" class="headerlink" title="4 继承中成员变量的访问特点"></a>4 继承中成员变量的访问特点</h2><h3 id="4-1-就近原则：谁离我近，我就用谁"><a href="#4-1-就近原则：谁离我近，我就用谁" class="headerlink" title="4.1 就近原则：谁离我近，我就用谁"></a>4.1 就近原则：谁离我近，我就用谁</h3><p>先在局部位置找，本类成员位置找，父类成员位置找，逐级往上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Fu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zi&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zishow&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出Zishow</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Fu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zi&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出Zi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Fu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出Fu</span></span><br></pre></td></tr></table></figure><h3 id="4-2-super-避免就近原则"><a href="#4-2-super-避免就近原则" class="headerlink" title="4.2 super 避免就近原则"></a>4.2 super 避免就近原则</h3><p>this 关键字：理解为一个变量，表示当前调用方法者的地址值。在虚拟机中认为就是局部变量，</p><p>super关键字:代表父类存储空间表示子类的直接父类的意思，只能跨过一代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Fu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zi&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zishow&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><table><thead><tr><th>关键字</th><th>访问成员变量</th><th>访问成员方法</th><th>访问构造方法</th></tr></thead><tbody><tr><td>this</td><td>this.成员变量，访问本类成员变量</td><td>this.成员方法（…）访问本类成员方法。</td><td>==this(…),访问本类构造方法==</td></tr><tr><td>super</td><td>super.成员变量，访问父类成员变量</td><td>super.成员方法，访问父类成员的方法。</td><td>super(…)，访问父类构造方法。</td></tr></tbody></table><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this()的应用场景</span></span><br><span class="line"><span class="comment">//需求：默认某变量的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-成员方法的访问特点"><a href="#5-成员方法的访问特点" class="headerlink" title="5 成员方法的访问特点"></a>5 成员方法的访问特点</h2><h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><p>先在本类中查看 eat和drink方法，就会调用子类的，如果没有，就会调用父类中继承下来的eat和drink方法</p><p>this.eat（）;</p><p>直接调用父类中的方法</p><p>super.eat();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*****&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;   </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-方法的重写"><a href="#5-2-方法的重写" class="headerlink" title="5.2 方法的重写"></a>5.2 方法的重写</h3><p>当父类中的方法不能满足子类现在的需求时，需要进行方法的重写。</p><p><strong>书写格式</strong></p><p>在继承体系中，子类出现了和父类一摸一样的方法声明，我们就称子类的这个方法是重写的方法</p><h4 id="Override-重写注释"><a href="#Override-重写注释" class="headerlink" title="@Override 重写注释"></a><strong>@Override 重写注释</strong></h4><p>1.@Override是放在重写后的方法上，校验子类重写时语法是否正确</p><p>2.加上注解后如果有红色波浪线，表示语法错误</p><p>==3.建议重写方法都加@override注解，代码安全，优雅！！！==</p><h3 id="5-3-方法重写的本质"><a href="#5-3-方法重写的本质" class="headerlink" title="5.3 方法重写的本质"></a>5.3 方法重写的本质</h3><p><img src="/image-20230113212113453.png" alt="image-20230113212113453"></p><p>变为A类的</p><h3 id="5-4-注意事项和要求"><a href="#5-4-注意事项和要求" class="headerlink" title="5.4 注意事项和要求"></a>5.4 注意事项和要求</h3><p>1.重写方法的<strong>名称</strong>，<strong>形参列表</strong>必须要与<strong>父类</strong>中的一致</p><p>2.子类重写父方法时，访问权限子类必须大于等于父类</p><p>3.子类重写方法时，返回值类型子类必须小于等于父类。（<u>父类类名大于子类</u>）</p><p>4==.建议：重写的方法尽量与父类保持一致==</p><p>5==.只有被添加到虚方法表中的方法才能被重写。==</p><p>2，3不要求记住，了解即可。</p><h2 id="6-继承中构造方法的访问特点"><a href="#6-继承中构造方法的访问特点" class="headerlink" title="6 继承中构造方法的访问特点"></a>6 继承中构造方法的访问特点</h2><p>🥼父类中的构造方法不会被子类继承。</p><p>🦺子类的所有构造方法默认先访问父类中的无参构造，再执行自己。</p><p>原因：</p><p>🎭子类在初始化 的时候 ，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。</p><p>🎢<strong>子类在初始化之前，一定要调用父类的构造方法先完成父类数据空间的初始化</strong></p><h3 id="6-1-怎么调用父类构造方法的？"><a href="#6-1-怎么调用父类构造方法的？" class="headerlink" title="6.1 怎么调用父类构造方法的？"></a>6.1 怎么调用父类构造方法的？</h3><p><strong>子类构造方法的第一行语句默认都是super（）</strong>（无参构造），不写也行，且必须在第一行。</p><p>如果想调用父类有参构造，必须手动写susper进行调用。</p><h3 id="6-2-代码"><a href="#6-2-代码" class="headerlink" title="6.2 代码"></a>6.2 代码</h3><p>第一种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//子类构造方法中隐藏的super（）去访问父类的无参构造。</span></span><br><span class="line">        <span class="comment">//super();  可以省略</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果</span></span><br><span class="line"><span class="comment">父类的无参构造</span></span><br><span class="line"><span class="comment">子类的无参构造</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//子类构造方法中隐藏的super（）去访问父类的无参构造。</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;子类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类的有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhansan&quot;</span>,<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果</span></span><br><span class="line"><span class="comment">父类的有参构造</span></span><br><span class="line"><span class="comment">子类的有参构造</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="所有对象要求占8的整数倍个字节，否则自动补全。"><a href="#所有对象要求占8的整数倍个字节，否则自动补全。" class="headerlink" title="所有对象要求占8的整数倍个字节，否则自动补全。"></a>所有对象要求占8的整数倍个字节，否则自动补全。</h3><h2 id="7-多态"><a href="#7-多态" class="headerlink" title="7  多态"></a>7  多态</h2><h3 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h3><p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p><p><strong>多态是出现在继承或者实现关系中的</strong>。</p><p><strong>多态体现的格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p><strong>多态的前提</strong>：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。</p><h3 id="7-2-多态的使用场景"><a href="#7-2-多态的使用场景" class="headerlink" title="7.2 多态的使用场景"></a>7.2 多态的使用场景</h3><p>如果没有多态，在下图中register方法只能传递学生对象，其他的Teacher和administrator对象是无法传递给register方法方法的，在这种情况下，只能定义三个不同的register方法分别接收学生，老师和管理员。</p><p><img src="/%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF1.png" alt="多态的应用场景"></p><p><strong>有了多态之后，方法的形参就可以定义为共同的父类Person。</strong></p><p><strong>要注意的是：</strong></p><ul><li>当一个方法的形参是一个类，我们可以传递这个类所有的子类对象。</li><li>当一个方法的形参是一个接口，我们可以传递这个接口所有的实现类对象（后面会学）。</li><li>而且多态还可以根据传递的不同对象来调用不同类中的方法。</li></ul><p><img src="/%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF2.png" alt="多态的应用场景"></p><p><img src="/image-20230113202840687.png" alt="image-20230113202840687"></p><p><img src="/image-20230113202945390.png" alt="image-20230113202945390"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">父类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    空参构造</span><br><span class="line">    带全部参数的构造</span><br><span class="line">    get和set方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">1</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Administrator</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">2</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">3</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建三个对象，并调用register方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;王建国&quot;</span>);</span><br><span class="line">        t.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Administrator</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Administrator</span>();</span><br><span class="line">        admin.setName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        admin.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(admin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法既能接收老师，又能接收学生，还能接收管理员</span></span><br><span class="line">    <span class="comment">//只能把参数写成这三个类型的父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-多态的定义和前提"><a href="#7-3-多态的定义和前提" class="headerlink" title="7.3 多态的定义和前提"></a>7.3 多态的定义和前提</h3><p><strong>多态</strong>： 是指同一行为，具有多个不同表现形式。同类型的对象，表现出的不同的形态。</p><p>从上面案例可以看出，Cat和Dog都是动物，都是吃这一行为，但是出现的效果（表现形式）是不一样的。</p><p> <strong>前提【重点】</strong></p><ol><li><p>有继承或者实现关系</p></li><li><p>方法的重写【意义体现：不重写，无意义】</p></li><li><p>父类引用指向子类对象【格式体现】</p><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p></blockquote></li></ol><p><strong>表现形式</strong></p><p>父类类型 对象名称 = 子类对象。</p><h3 id="7-4-多态的运行特点"><a href="#7-4-多态的运行特点" class="headerlink" title="7.4 多态的运行特点"></a>7.4 多态的运行特点</h3><p>调用成员变量时：编译看左边，运行看左边</p><p>调用成员方法时：编译看左边，运行看右边</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>()；</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有name这个属性，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，把父类name属性的值打印出来</span></span><br><span class="line">System.out.println(f.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译看左边的父类中有没有show这个方法，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，运行的是子类中的show方法</span></span><br><span class="line">f.show();</span><br></pre></td></tr></table></figure><p>调用成员变量：编译看左边，运行也看左边<br>        编译看左边：javac编译代码的时候，会看左边的父类中有没有这个变量，如果有，编译成功，如果没有，编译失败。<br>        运行也看左边：java运行代码的时候，实际获取的就是左边父类中成员变量的值</p><p>调用成员方法：编译看左边，运行看右边<br>        编译看左边：javac编译代码的时候，会看左边的父类中有没有这个方法，如果有，编译成功，如果没有编译失败。<br>        运行看右边：java运行代码的时候，实际上运行的是子类中的方法。</p><p>成员方法：如果子类对方法进行了重写，那么在虚方法表中是会把父类的方法进行覆盖的。</p><h3 id="7-5-多态的优势和弊端"><a href="#7-5-多态的优势和弊端" class="headerlink" title="7.5 多态的优势和弊端"></a>7.5 多态的优势和弊端</h3><p><strong>优势</strong>：在多态形势下，右边的对象可以实现解耦合，便于扩展和维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span> ();</span><br><span class="line">p.work();<span class="comment">//业务逻辑发生改变时，后续代码无需修改。</span></span><br></pre></td></tr></table></figure><p>定义方法时，使用父类型作为参数，可以接受所有的子类对象，体现多态的扩展与便利。</p><p><strong>弊端</strong> <strong>：</strong></p><p>我们已经知道多态编译阶段是看左边父类类型的，如果子类有些独有的功能，此时<strong>多态的写法就无法访问子类独有功能了</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.catchMouse();<span class="comment">//编译报错，编译看左边，Animal没有这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：变回子类类型就行了</p><p>上面的案例解决方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">d</span> <span class="operator">=</span> (Cat)a;</span><br><span class="line">d.catchMouse();</span><br></pre></td></tr></table></figure><p>细节：==转换的时候不能瞎转，如果转成其他类的类型，就会报错==</p><p>如果有</p><h3 id="7-6-引用类型转换"><a href="#7-6-引用类型转换" class="headerlink" title="7.6 引用类型转换"></a>7.6 引用类型转换</h3><h4 id="7-6-1-为什么要转型"><a href="#7-6-1-为什么要转型" class="headerlink" title="7.6.1 为什么要转型"></a>7.6.1 为什么要转型</h4><p><strong>多态的写法就无法访问子类独有功能了。</strong></p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>回顾基本数据类型转换</p><ul><li>自动转换: 范围小的赋值给范围大的.自动完成:double d = 5; </li><li>强制转换: 范围大的赋值给范围小的,强制转换:int i = (int)3.14 </li></ul><p>​     多态的转型分为向上转型（自动转换）与向下转型（强制转换）两种。</p><h4 id="7-6-2-向上转型（自动转换）"><a href="#7-6-2-向上转型（自动转换）" class="headerlink" title="7.6.2 向上转型（自动转换）"></a>7.6.2 向上转型（自动转换）</h4><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。<br>当父类引用指向一个子类对象时，便是向上转型。<br>使用格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p><strong>原因是：父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。</strong>所以子类范围小可以直接自动转型给父类类型的变量。</p><h4 id="7-6-3-向下转型（强制转换）"><a href="#7-6-3-向下转型（强制转换）" class="headerlink" title="7.6.3 向下转型（强制转换）"></a>7.6.3 向下转型（强制转换）</h4><ul><li><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。<br>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</li></ul><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure><h4 id="7-6-4-案例演示"><a href="#7-6-4-案例演示" class="headerlink" title="7.6.4 案例演示"></a>7.6.4 案例演示</h4><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>转型演示，代码如下：</p><p>定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-5-转型的异常"><a href="#7-6-5-转型的异常" class="headerlink" title="7.6.5 转型的异常"></a>7.6.5 转型的异常</h4><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">        d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以通过编译，但是运行时，却报出了 <code>ClassCastException</code> ，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。</p><h4 id="7-6-6-instanceof关键字"><a href="#7-6-6-instanceof关键字" class="headerlink" title="7.6.6 instanceof关键字"></a>7.6.6 instanceof关键字</h4><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型 </span><br><span class="line">如果变量属于该数据类型或者其子类类型，返回<span class="literal">true</span>。</span><br><span class="line">如果变量不属于该数据类型或者其子类类型，返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">            c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">            d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-7-instanceof-新特性"><a href="#7-6-7-instanceof-新特性" class="headerlink" title="7.6.7 instanceof 新特性"></a>7.6.7 instanceof 新特性</h4><p><strong>JDK14</strong>的时候提出了新特性，把判断和强转合并成了一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新特性</span></span><br><span class="line"><span class="comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span></span><br><span class="line"><span class="comment">//如果不是，则不强转，结果直接是false</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">    c.catchMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7-综合练习"><a href="#7-7-综合练习" class="headerlink" title="7.7 综合练习"></a>7.7 综合练习</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">需求：根据需求完成代码:</span><br><span class="line"><span class="number">1.</span>定义狗类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)(something表示吃的东西)</span><br><span class="line">看家lookHome方法(无参数)</span><br><span class="line"><span class="number">2.</span>定义猫类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)方法(something表示吃的东西)</span><br><span class="line">逮老鼠catchMouse方法(无参数)</span><br><span class="line"><span class="number">3.</span>定义Person类<span class="comment">//饲养员</span></span><br><span class="line">属性：</span><br><span class="line">姓名，年龄</span><br><span class="line">行为：</span><br><span class="line">keepPet(Dog dog,String something)方法</span><br><span class="line">功能：喂养宠物狗，something表示喂养的东西</span><br><span class="line">行为：</span><br><span class="line">keepPet(Cat cat,String something)方法</span><br><span class="line">功能：喂养宠物猫，something表示喂养的东西</span><br><span class="line">生成空参有参构造，set和get方法  </span><br><span class="line"><span class="number">4.</span>定义测试类(完成以下打印效果):</span><br><span class="line">keepPet(Dog dog,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">30</span>岁的老王养了一只黑颜色的<span class="number">2</span>岁的狗</span><br><span class="line"><span class="number">2</span>岁的黑颜色的狗两只前腿死死的抱住骨头猛吃</span><br><span class="line">keepPet(Cat cat,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">25</span>岁的老李养了一只灰颜色的<span class="number">3</span>岁的猫</span><br><span class="line"><span class="number">3</span>岁的灰颜色的猫眯着眼睛侧着头吃鱼</span><br><span class="line"><span class="number">5.</span>思考：</span><br><span class="line"><span class="number">1.</span>Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？</span><br><span class="line"><span class="number">2.</span>Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？</span><br></pre></td></tr></table></figure><p>画图分析：</p><p><img src="/%E5%A4%9A%E6%80%81%E7%BB%83%E4%B9%A0%E7%9A%84%E5%88%86%E6%9E%90.png" alt="多态练习的分析"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物类（父类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猫类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的猫眯着眼睛侧着头吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="comment">//eat(String something)(something表示吃的东西)</span></span><br><span class="line">    <span class="comment">//看家lookHome方法(无参数)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的狗两只前腿死死的抱住&quot;</span> + something + <span class="string">&quot;猛吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookHome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//饲养员类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//饲养狗</span></span><br><span class="line">   <span class="comment">/* public void keepPet(Dog dog, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + dog.getColor() + &quot;颜色的&quot; + dog.getAge() + &quot;岁的狗&quot;);</span></span><br><span class="line"><span class="comment">        dog.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //饲养猫</span></span><br><span class="line"><span class="comment">    public void keepPet(Cat cat, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + cat.getColor() + &quot;颜色的&quot; + cat.getAge() + &quot;岁的猫&quot;);</span></span><br><span class="line"><span class="comment">        cat.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//想要一个方法，能接收所有的动物，包括猫，包括狗</span></span><br><span class="line">    <span class="comment">//方法的形参：可以写这些类的父类 Animal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(Animal a, String something)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + a.getColor() + <span class="string">&quot;颜色的&quot;</span> + a.getAge() + <span class="string">&quot;岁的狗&quot;</span>);</span><br><span class="line">            d.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + c.getColor() + <span class="string">&quot;颜色的&quot;</span> + c.getAge() + <span class="string">&quot;岁的猫&quot;</span>);</span><br><span class="line">            c.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这种动物&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象并调用方法</span></span><br><span class="line">       <span class="comment">/* Person p1 = new Person(&quot;老王&quot;,30);</span></span><br><span class="line"><span class="comment">        Dog d = new Dog(2,&quot;黑&quot;);</span></span><br><span class="line"><span class="comment">        p1.keepPet(d,&quot;骨头&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Person p2 = new Person(&quot;老李&quot;,25);</span></span><br><span class="line"><span class="comment">        Cat c = new Cat(3,&quot;灰&quot;);</span></span><br><span class="line"><span class="comment">        p2.keepPet(c,&quot;鱼&quot;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建饲养员的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;老王&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">2</span>,<span class="string">&quot;黑&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="number">3</span>,<span class="string">&quot;灰&quot;</span>);</span><br><span class="line">        p.keepPet(d,<span class="string">&quot;骨头&quot;</span>);</span><br><span class="line">        p.keepPet(c,<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-包"><a href="#8-包" class="headerlink" title="8 包"></a>8 包</h2><h3 id="8-1-什么是包"><a href="#8-1-什么是包" class="headerlink" title="8.1 什么是包"></a>8.1 什么是包</h3><p>包就是文件夹。就是用来管理不同功能的java类，方便 后期代码维护</p><ul><li>包名的规则：公司域名的反写+包的作用，需要全部英文为小写，见名知意。com.itheima.domain</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">路径名.路径名.xxx.xxx</span><br><span class="line">// 例如：com.itheima.oa</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">私有化成员变量</span><br><span class="line">构造方法</span><br><span class="line">成员方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个类的时候，是要带包名的：com.itheima.domain.Student<br>包名加类名，称之为全类名</p><p>在IDEA项目中，建包的操作如下：</p><p><img src="/2023/01/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E4%B8%8A/aaa.jpg"></p><h3 id="8-2-导包"><a href="#8-2-导包" class="headerlink" title="8.2 导包"></a>8.2 导包</h3><p>什么时候需要导包？</p><p>​    情况一：在使用Java中提供的非核心包中的类时</p><p>​    情况二：使用自己写的其他包中的类时</p><p>什么时候不需要导包？</p><p>​    情况一：在使用Java核心包（java.lang）中的类时</p><p>​    情况二：在使用自己写的同一个包中的类时</p><h3 id="8-3-使用其他类的规则"><a href="#8-3-使用其他类的规则" class="headerlink" title="8.3 使用其他类的规则"></a>8.3 使用其他类的规则</h3><ul><li>==使用同一个包中的类是，不需要导包==</li><li>使用java.alang包中的类时不需要导包</li><li>其他情况都需要导包</li><li>如果同时使用两个包中的同名类，需要用全类名</li></ul><p>​    假设demo1和demo2中都有一个Student该如何使用？</p><p>​    代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用全类名的形式即可。</span></span><br><span class="line"><span class="comment">//全类名：包名 + 类名</span></span><br><span class="line"><span class="comment">//拷贝全类名的快捷键：选中类名crtl + shift + alt + c 或者用鼠标点copy，再点击copy Reference</span></span><br><span class="line">com.itheima.homework.demo1.<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo1.Student();</span><br><span class="line">com.itheima.homework.demo2.<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo2.Student();</span><br></pre></td></tr></table></figure><p>使用其他类时，需要使用全类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">com.itheima.domain.Student s <span class="keyword">new</span> <span class="title class_">com</span>.itheima.domain.Student();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常麻烦，所以就出现了import ，导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.domain.Student</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">Student s <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动漫</title>
      <link href="/2023/01/07/%E5%8A%A8%E6%BC%AB/"/>
      <url>/2023/01/07/%E5%8A%A8%E6%BC%AB/</url>
      
        <content type="html"><![CDATA[<p>2023.1.7</p><h1 id="银砂糖师与黑妖精"><a href="#银砂糖师与黑妖精" class="headerlink" title="银砂糖师与黑妖精"></a>银砂糖师与黑妖精</h1><h1 id="GAMERS电玩咖！"><a href="#GAMERS电玩咖！" class="headerlink" title="GAMERS电玩咖！"></a>GAMERS电玩咖！</h1><p>​    一部误解向的动漫，恋爱喜剧，</p><p>上原妙计安天下，赔了夫人又折妻</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109192907550.png" alt="image-20230109192907550"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109193317024.png" alt="image-20230109193317024"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109193352474.png" alt="image-20230109193352474"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109193409423.png" alt="image-20230109193409423"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109193429584.png" alt="image-20230109193429584"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109193511545.png" alt="image-20230109193511545"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109193749564.png" alt="image-20230109193749564"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109194534565.png" alt="image-20230109194534565"></p><p>电学</p><p>天桥攻略事件</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109195019309.png" alt="image-20230109195019309"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109195145632.png" alt="image-20230109195145632"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109195322781.png" alt="image-20230109195322781"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109195348152.png" alt="image-20230109195348152"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109195443381.png" alt="image-20230109195443381"></p><p>电路图正在清晰</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109200239782.png" alt="image-20230109200239782"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109200310324.png" alt="天道花怜"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109200349933.png" alt="image-20230109200349933"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109200540806.png" alt="image-20230109200540806"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109200945607.png" alt="image-20230109200945607"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109201219967.png" alt="电学开始"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109201304826.png" alt="image-20230109201304826"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109202306289.png" alt="image-20230109202306289"></p><p>第五话 15：32 恋爱不是談出来的，而是陷进去的</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109210807263.png" alt="image-20230109210807263"></p><p>第六话 5：40 重要的感情总是非常单纯，自然脱回而出的</p><p>第六话 11：45 不论何时都不能敷衍对自己好的人</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212304273.png" alt="image-20230109212304273"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212418387.png" alt="image-20230109212418387"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212523642.png" alt="image-20230109212523642"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212716206.png" alt="image-20230109212716206"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212733309.png" alt="image-20230109212733309"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212758721.png" alt="image-20230109212758721"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212824886.png" alt="image-20230109212824886"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212842239.png" alt="image-20230109212842239"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109212948965.png" alt="image-20230109212948965"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109213008052.png" alt="电学当立"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109213046483.png" alt="image-20230109213046483"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109213114289.png" alt="image-20230109213114289"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109214709139.png" alt="image-20230109214709139"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109214746128.png" alt="image-20230109214746128"></p><p>小生不才今后还请你多关照了<img src="/image-20230109215129639.png" alt="image-20230109215129639"></p><p>于是，这场由于误解而生发的恋爱，却意外的维持了下去</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109215248752.png" alt="image-20230109215248752"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109215313267.png" alt="image-20230109215313267"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109215338506.png" alt="image-20230109215338506"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109215554261.png" alt="image-20230109215554261"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109215623340.png" alt="image-20230109215623340"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230109215658493.png" alt="image-20230109215658493"></p><h1 id="久保同学不放过我"><a href="#久保同学不放过我" class="headerlink" title="久保同学不放过我"></a>久保同学不放过我</h1><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151454983.png" alt="image-20230111151454983"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151517116.png" alt="image-20230111151517116"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151531114.png" alt="image-20230111151531114"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151547729.png" alt="image-20230111151547729"></p><p>第一集</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151744749.png" alt="image-20230111151744749"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151807112.png" alt="image-20230111151807112"></p><p><img src="/image-20230111151904656.png" alt="image-20230111151904656"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111151933116.png" alt="image-20230111151933116"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152054038.png" alt="image-20230111152054038"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152119115.png" alt="image-20230111152119115"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152135060.png" alt="image-20230111152135060"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152525750.png" alt="image-20230111152525750"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152543724.png" alt="image-20230111152543724"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152557034.png" alt="image-20230111152557034"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152621391.png" alt="image-20230111152621391"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152639205.png" alt="image-20230111152639205"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152655295.png" alt="image-20230111152655295"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152707258.png" alt="image-20230111152707258"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152805867.png" alt="image-20230111152805867"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152852815.png" alt="image-20230111152852815"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111152945895.png" alt="image-20230111152945895"></p><p>情头</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111153032381.png" alt="image-20230111153032381"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111153105294.png" alt="image-20230111153105294"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111153335165.png" alt="image-20230111153335165"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111153446981.png" alt="image-20230111153446981"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111153833184.png" alt="image-20230111153833184"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111153941835.png" alt="image-20230111153941835"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230111154216721.png" alt="image-20230111154216721"></p><h1 id="不相信人类的冒险者们好像要去拯救世界"><a href="#不相信人类的冒险者们好像要去拯救世界" class="headerlink" title="不相信人类的冒险者们好像要去拯救世界"></a>不相信人类的冒险者们好像要去拯救世界</h1><p>高木同学</p><p>剧场版</p><p>我太太美炸了</p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230113131126620.png" alt="image-20230113131126620"></p><p><img src="/2023/01/07/%E5%8A%A8%E6%BC%AB/image-20230113131338281.png" alt="image-20230113131338281"></p><h1 id="堀与宫村"><a href="#堀与宫村" class="headerlink" title="堀与宫村"></a><a href="https://www.bilibili.com/bangumi/media/md28231840/">堀与宫村</a></h1><p>13集：18：45 ikun</p><p><img src="/%E5%8A%A8%E6%BC%AB/image-20230115193706589.png" alt="image-20230115193706589"></p><h1 id="宇崎酱想要玩耍！-第二季"><a href="#宇崎酱想要玩耍！-第二季" class="headerlink" title="宇崎酱想要玩耍！ 第二季"></a>宇崎酱想要玩耍！ 第二季</h1><h1 id="半田君传说"><a href="#半田君传说" class="headerlink" title="半田君传说"></a>半田君传说</h1>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学生管理系统</title>
      <link href="/2023/01/06/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/01/06/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>​    采取控制台的方式去书写学生管理系统。</p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><h4 id="初始菜单："><a href="#初始菜单：" class="headerlink" title="初始菜单："></a>初始菜单：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;-------------欢迎来到黑马学生管理系统----------------&quot;</span></span><br><span class="line"><span class="string">&quot;1：添加学生&quot;</span></span><br><span class="line"><span class="string">&quot;2：删除学生&quot;</span></span><br><span class="line"><span class="string">&quot;3：修改学生&quot;</span></span><br><span class="line"><span class="string">&quot;4：查询学生&quot;</span></span><br><span class="line"><span class="string">&quot;5：退出&quot;</span></span><br><span class="line"><span class="string">&quot;请输入您的选择:&quot;</span></span><br></pre></td></tr></table></figure><h4 id="学生类："><a href="#学生类：" class="headerlink" title="学生类："></a>学生类：</h4><p>​    属性：id、姓名、年龄、家庭住址</p><h4 id="添加功能："><a href="#添加功能：" class="headerlink" title="添加功能："></a>添加功能：</h4><p>​    键盘录入每一个学生信息并添加，需要满足以下要求：</p><ul><li>id唯一</li></ul><h4 id="删除功能："><a href="#删除功能：" class="headerlink" title="删除功能："></a>删除功能：</h4><p>​    键盘录入要删除的学生id，需要满足以下要求：</p><ul><li>id存在删除</li><li>id不存在，需要提示不存在，并回到初始菜单</li></ul><h4 id="修改功能："><a href="#修改功能：" class="headerlink" title="修改功能："></a>修改功能：</h4><p>​    键盘录入要修改的学生id，需要满足以下要求</p><ul><li>id存在，继续录入其他信息</li><li>id不存在，需要提示不存在，并回到初始菜单</li></ul><h4 id="查询功能："><a href="#查询功能：" class="headerlink" title="查询功能："></a>查询功能：</h4><p>​    打印所有的学生信息，需要满足以下要求</p><ul><li>如果没有学生信息，提示：当前无学生信息，请添加后再查询</li><li>如果有学生信息，需要按照以下格式输出。（不用过于纠结对齐的问题）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id姓名年龄家庭住址</span><br><span class="line">heima001张三<span class="number">23</span> 南京</span><br><span class="line">heima002李四<span class="number">24</span> 北京</span><br><span class="line">heima003王五<span class="number">25</span> 广州</span><br><span class="line">heima004赵六 <span class="number">26</span> 深圳</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.Demo6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name, <span class="type">int</span> age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;id = &quot;</span> + id + <span class="string">&quot;, name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, address = &quot;</span> + address + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2023/01/04/%E9%9B%86%E5%90%88/"/>
      <url>/2023/01/04/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-集合（ArrayList）"><a href="#1-集合（ArrayList）" class="headerlink" title="1. 集合（ArrayList）"></a>1. 集合（ArrayList）</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul><li><p>什么是集合</p><p>​    提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p></li><li><p>ArrayList集合的特点</p><p>​    长度可以变化，只能存储引用数据类型。</p></li><li><p>泛型的使用（在ArrayList中是   这个    &lt;数据类型&gt;  ）</p><p>​    <strong>用于约束集合中存储元素的数据类型</strong></p></li></ul><h3 id="集合和数组的优势对比："><a href="#集合和数组的优势对比：" class="headerlink" title="集合和数组的优势对比："></a>集合和数组的优势对比：</h3><ol><li><p>长度可变，删除元素集合自动减。</p></li><li><p>添加数据的时候不需要考虑索引，默认将数据添加到末尾</p></li><li><p>存储类型</p><table><thead><tr><th>数组</th><th>可以存基本数据类型和引用数据类型</th></tr></thead><tbody><tr><td>集合</td><td>可以存引用数据类型，基本数据类型需要变换成包装类</td></tr></tbody></table></li></ol><h3 id="1-2-ArrayList类常用方法"><a href="#1-2-ArrayList类常用方法" class="headerlink" title="1.2 ArrayList类常用方法"></a>1.2 ArrayList类常用方法</h3><h4 id="1-2-1-构造方法"><a href="#1-2-1-构造方法" class="headerlink" title="1.2.1 构造方法"></a>1.2.1 构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK7之前</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt; ();</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK7及之后 等号之后的数据类型可以不写，但必须留着。</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span> &lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="1-2-2-成员方法"><a href="#1-2-2-成员方法" class="headerlink" title="1.2.2 成员方法"></a>1.2.2 成员方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(要添加的元素)增</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public boolean remove(要删除的元素)删</td><td>删除指定元素,返回值表示是否删除成功</td></tr><tr><td>public E  remove(int   index)删</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E   set(int index,E   element)改</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E   get(int   index)查</td><td>返回指定索引处的元素</td></tr><tr><td>public int   size()</td><td>返回集合中的元素的个数</td></tr></tbody></table><h4 id="1-2-3-示例代码"><a href="#1-2-3-示例代码" class="headerlink" title="1.2.3 示例代码"></a>1.2.3 示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//此时输出 []</span></span><br><span class="line">        <span class="comment">///此时我们创建的是ArrayList的对象，而ArrayList是java已经写好的一个类</span></span><br><span class="line">        <span class="comment">//这个类在底层做了一些处理</span></span><br><span class="line">        <span class="comment">//打印对象不是地址值，而是集合中存储数据内容</span></span><br><span class="line">        <span class="comment">//在展示的时候会拿[]把所有的数据进行包裹</span></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(&quot;world&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(3));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.set(1,&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.set(3,&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E get(int index)：返回指定索引处的元素</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.get(0));</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.get(1));</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.get(2));</span></span><br><span class="line">        <span class="comment">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size()：返回集合中的元素的个数</span></span><br><span class="line">        System.out.println(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;array:&quot;</span> + array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-基本数据类型的对应包装类"><a href="#1-3-基本数据类型的对应包装类" class="headerlink" title="1.3 基本数据类型的对应包装类"></a>1.3 基本数据类型的对应包装类</h3><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td><strong>==char==</strong></td><td>==<strong>Character</strong>==</td></tr><tr><td>==<strong>int</strong>== jdk5 之后int 与Integer 可以相互转化</td><td>==<strong>Integer</strong>==</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;integer&gt;list <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">/jdk5以后<span class="type">int</span> Integer之间是可以互相转化的</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">list.add(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3-ArrayList存储字符串并遍历"><a href="#1-3-ArrayList存储字符串并遍历" class="headerlink" title="1.3 ArrayList存储字符串并遍历"></a>1.3 ArrayList存储字符串并遍历</h3><h4 id="1-3-1-案例需求"><a href="#1-3-1-案例需求" class="headerlink" title="1.3.1 案例需求"></a>1.3.1 案例需求</h4><p>​    创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p><h4 id="1-3-2-代码实现"><a href="#1-3-2-代码实现" class="headerlink" title="1.3.2 代码实现"></a>1.3.2 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//快捷键: list.fori 正向遍历</span></span><br><span class="line">        <span class="comment">//list.forr 倒着遍历</span></span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示集合里面的每一个索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//最大索引</span></span><br><span class="line">                System.out.print(list.get(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非最大索引</span></span><br><span class="line">                System.out.print(list.get(i) + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-ArrayList存储学生对象并遍历"><a href="#1-4-ArrayList存储学生对象并遍历" class="headerlink" title="1.4 ArrayList存储学生对象并遍历"></a>1.4 ArrayList存储学生对象并遍历</h3><h4 id="1-4-1-案例需求"><a href="#1-4-1-案例需求" class="headerlink" title="1.4.1 案例需求"></a>1.4.1 案例需求</h4><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><h4 id="1-4-2-代码实现"><a href="#1-4-2-代码实现" class="headerlink" title="1.4.2 代码实现"></a>1.4.2 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建集合对象，用来存储数据</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把学生对象添加到集合中</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示集合中的每一个索引</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(stu.getName() + <span class="string">&quot;, &quot;</span> + stu.getAge());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">            Student stu = list.get(i);</span></span><br><span class="line"><span class="comment">            System.out.println(stu);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        输出结果为：</span></span><br><span class="line"><span class="comment">        Student&#123;name = zhangsan, age = 23&#125;</span></span><br><span class="line"><span class="comment">Student&#123;name = lisi, age = 24&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-查找用户的索引"><a href="#1-5-查找用户的索引" class="headerlink" title="1.5 查找用户的索引"></a>1.5 查找用户的索引</h3><p>需求： </p><p>1，main方法中定义一个集合，存入三个用户对象。 </p><p>   用户属性为：id，username，password    </p><p>2，要求：定义一个方法，根据id查找对应的学生信息。</p><p>   如果存在，返回索引</p><p>   如果不存在，返回-1</p><p><strong>注意</strong><br>        ==如果我们要返回多个数据，可以把这些数据先放到一个容器当中，再把容器返回==<br>==集合数组。==</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*需求：</span></span><br><span class="line"><span class="comment">        1，main方法中定义一个集合，存入三个用户对象。</span></span><br><span class="line"><span class="comment">        用户属性为：id，username，password</span></span><br><span class="line"><span class="comment">        2，要求：定义一个方法，根据id查找对应的学生信息。</span></span><br><span class="line"><span class="comment">        如果存在，返回索引</span></span><br><span class="line"><span class="comment">        如果不存在，返回-1*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建用户对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima001&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima002&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima003&quot;</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把用户对象添加到集合当中</span></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用方法，通过id获取对应的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(list, <span class="string">&quot;heima001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.我要干嘛？  根据id查找对应的学生信息</span></span><br><span class="line">    <span class="comment">//2.我干这件事情需要什么才能完成？   集合 id</span></span><br><span class="line">    <span class="comment">//3.方法的调用处是否需要继续使用方法的结果？</span></span><br><span class="line">    <span class="comment">//要用必须返回，不要用可以返回也可以不返回</span></span><br><span class="line">    <span class="comment">//明确说明需要有返回值 int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历集合得到每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> u.getId();</span><br><span class="line">            <span class="keyword">if</span>(uid.equals(id))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为只有当集合里面所有的元素都比较完了，才能断定id是不存在的。</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-6-判断用户的是否存在"><a href="#1-6-判断用户的是否存在" class="headerlink" title="1.6 判断用户的是否存在"></a>1.6 判断用户的是否存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">        1，main方法中定义一个集合，存入三个用户对象。</span></span><br><span class="line"><span class="comment">        用户属性为：id，username，password</span></span><br><span class="line"><span class="comment">        2，要求：定义一个方法，根据id查找对应的学生信息。</span></span><br><span class="line"><span class="comment">        如果存在，返回true</span></span><br><span class="line"><span class="comment">        如果不存在，返回false*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义集合</span></span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima001&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima002&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima003&quot;</span>,<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把用户对象添加到集合当中</span></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用方法，查询id是否存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> contains(list, <span class="string">&quot;heima001&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义在测试类中的方法需要加static</span></span><br><span class="line">    <span class="comment">//1.我要干嘛？ 我要根据id查询学生是否存在</span></span><br><span class="line">    <span class="comment">//2.我干这件事情，需要什么才能完成？ 集合 id</span></span><br><span class="line">    <span class="comment">//3.方法的调用处是否需要使用方法的结果？</span></span><br><span class="line">    <span class="comment">//如果要用，必须返回，如果不用，可以返回也可以不返回</span></span><br><span class="line">    <span class="comment">//但是本题明确说明需要返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span>&#123;</span><br><span class="line">        <span class="comment">//循环遍历集合，得到集合里面的每一个元素</span></span><br><span class="line">        <span class="comment">//再进行判断</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 索引  list.get(i); 元素</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="comment">//判断id是否存在，我是拿着谁跟谁比较</span></span><br><span class="line">            <span class="comment">//需要把用户对象里面的id拿出来再进行比较。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> u.getId();</span><br><span class="line">            <span class="keyword">if</span>(id.equals(uid))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//return 关键字：作用就是结束方法。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有当集合里面所有的元素全部比较完毕才能认为是不存在的。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line"><span class="comment">//1.创建集合</span></span><br><span class="line">ArrayList&lt;Student&gt;list <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//长度为0</span></span><br><span class="line"><span class="comment">//2.键盘录入学生的信息并添加到集合当中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;看看我执行了吗？&quot;</span>)；</span><br><span class="line">Student s <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">list.add(s);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//集合里面是否有学生对象</span></span><br><span class="line"><span class="comment">//f</span></span><br><span class="line">System.out.println(list.size());<span class="comment">//0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>综合练习</title>
      <link href="/2023/01/03/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/01/03/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1API概述"><a href="#1-1API概述" class="headerlink" title="1.1API概述"></a>1.1API概述</h3><ul><li><p>什么是API</p><p>​    API (Application Programming Interface) ：应用程序编程接口</p></li><li><p>java中的API</p><p>​    指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p></li></ul><h3 id="1-2如何使用API帮助文档"><a href="#1-2如何使用API帮助文档" class="headerlink" title="1.2如何使用API帮助文档"></a>1.2如何使用API帮助文档</h3><ul><li>打开帮助文档</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/01.png" alt="01"></p><ul><li>找到索引选项卡中的输入框</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/02.png" alt="02"></p><ul><li>在输入框中输入Random</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/03.png" alt="03"></p><ul><li>看类在哪个包下</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/04.png" alt="04"></p><ul><li>看类的描述</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/05.png" alt="05"></p><ul><li>看构造方法</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/06.png" alt="06"></p><ul><li>看成员方法</li></ul><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/07.png" alt="07"></p><h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2  String类"></a>2  String类</h2><h3 id="2-1-String类概述"><a href="#2-1-String类概述" class="headerlink" title="2.1 String类概述"></a>2.1 String类概述</h3><p>​    String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，<strong>Java 程序中所有的双引号字符串，都是 String 类的对象</strong>。String 类在 java.lang 包下，所以使用的时候不需要导包！</p><h3 id="2-2-String类的特点"><a href="#2-2-String类的特点" class="headerlink" title="2.2 String类的特点"></a>2.2 String类的特点</h3><ul><li><p><strong>字符串不可变，它们的值（字符串）在创建后不能被更改</strong>，但是可以赋值新的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String name=<span class="string">&quot;尼古拉斯，阿玮&quot;</span>;</span><br><span class="line">String schoolName=<span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">System.out.println(name schoolName);</span><br><span class="line"><span class="comment">//产生了三个字符串  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String name=<span class="string">&quot;尼古拉斯，阿玮&quot;</span>;</span><br><span class="line">name=<span class="string">&quot;三连加投币，阿玮&quot;</span>;</span><br><span class="line"><span class="comment">//两个</span></span><br><span class="line"><span class="comment">//此处并没有改变原本字符串值，而是将这个String类名指代了一个新的字符串</span></span><br></pre></td></tr></table></figure></li><li><p><strong>虽然 String 的值是不可变的，但是它们可以被共享</strong></p></li><li><p><strong>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</strong></p></li></ul><h3 id="2-3-创建String类对象的两种方式"><a href="#2-3-创建String类对象的两种方式" class="headerlink" title="2.3 创建String类对象的两种方式"></a>2.3 创建String类对象的两种方式</h3><h4 id="1-直接赋值-开发中常使用"><a href="#1-直接赋值-开发中常使用" class="headerlink" title="1.直接赋值(开发中常使用)"></a>1.直接赋值(开发中常使用)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;尼古拉斯~为&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-new"><a href="#2-new" class="headerlink" title="2.new"></a>2.new</h4><p>2.1  空参构造：可以获取一空白的字符串对象</p><p>2.2 传递一个字符串，根据传递的字符串内容在创建一个新的字符串对象</p><p>需求：修改字符串内容，abc  –&gt; “Qbc”;<br>abc –&gt;  {‘a’,’b’,’c’}  –&gt;  {‘Q’,’b’,’c’} –&gt; “Qbc”</p><p>2.3 传递一个字节数组，根据字节数组的内容再创建一个新的字符串对象<br>应用场景：以后网络中传输的数据 其实都是字节信息，<br>我们一般要把字节信息进行转换，转成字符串，</p><ul><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.使用直接赋值的方法获取一个字符串对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span>  <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用new的方式来获取一个字符串对象</span></span><br><span class="line">        <span class="comment">//空参构造：可以获取一盒空白的字符串对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递一个字符串，根据传递的字符串内容在创建一个新的字符串对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span> (<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递一个字符数组，根据字符数组的内容创建一个新的字符串对象</span></span><br><span class="line">        <span class="comment">//需求：修改字符串内容，abc  --&gt; &quot;Qbc&quot;;</span></span><br><span class="line">        <span class="comment">//abc --&gt;  &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;  --&gt;  &#123;&#x27;Q&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125; --&gt; &quot;Qbc&quot;</span></span><br><span class="line">        <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        System.out.println(s4+<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递一个字节数组，根据字节数组的内容再创建一个新的字符串对象</span></span><br><span class="line">        <span class="comment">//应用场景：以后网络中传输的数据 其实都是字节信息，</span></span><br><span class="line">        <span class="comment">//我们一般要把字节信息进行转换，转成字符串，</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        System.out.println(s5);<span class="comment">//abcd</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public   String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public   String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s =   “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table><h3 id="2-4-创建字符串对象两种方式的区别"><a href="#2-4-创建字符串对象两种方式的区别" class="headerlink" title="2.4 创建字符串对象两种方式的区别"></a>2.4 创建字符串对象两种方式的区别</h3><ul><li><p>通过构造方法创建</p><p>​    通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p>直接赋值方式创建</p><p>​    以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p></li></ul><p>java内存模型</p><p>StringTable(串池)   在JDK7开始，从方法去挪到了堆内存</p><p>方法区：字节码文件临时存储（.class)</p><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230104160627199.png" alt="image-20230104160627199"></p><p><strong>当使用双引号直接赋值时，系统会检查该字符串在串池中是否存在。</strong><br><strong>不存在：创建新的</strong><br><strong>存在：复用</strong></p><h3 id="2-5-Java的常用方法（比较）"><a href="#2-5-Java的常用方法（比较）" class="headerlink" title="2.5 Java的常用方法（比较）"></a>2.5 Java的常用方法（比较）</h3><h4 id="2-5-1-比的究竟是什么"><a href="#2-5-1-比的究竟是什么" class="headerlink" title="2.5.1 ==比的究竟是什么"></a>2.5.1 ==比的究竟是什么</h4><p><strong>基本数据类型比较的是数据值</strong></p><p>==<strong>引用数据类型比较的是地址值</strong>==</p><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230104162009184.png" alt="image-20230104162009184"></p><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230104162022380.png" alt="image-20230104162022380"></p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s1 =s2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 =s2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//记录堆里面的地址值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span><span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池中的地址值</span></span><br><span class="line">System.out.println(s1 =s2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-字符串比较"><a href="#2-5-2-字符串比较" class="headerlink" title="2.5.2 字符串比较"></a>2.5.2 字符串比较</h4><p>​    1.boolean equals方法（要比较的字符串）</p><p>​    2.boolean equalsIgnoreCase（要比较的字符串）忽视大小写的比较 <strong>（只能是英文状态下 a A)</strong></p><p>拓展：</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line"><span class="comment">//1.假设我现在键盘录入一个abc</span></span><br><span class="line">Scanner sc <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>)；</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.next();<span class="comment">//abc</span></span><br><span class="line">/<span class="number">2.</span>代码中再定义一个字符中abc</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span><span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">//3.用==比较，这两者能一样吗？</span></span><br><span class="line">System.out.println(str1 ==str2);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是sc.next（） 是new出来的</p><p><strong>以后只要想比较字符串的内容，就必须要用String里面的方法</strong></p><h3 id="2-6-练习题"><a href="#2-6-练习题" class="headerlink" title="2.6 练习题"></a>2.6 练习题</h3><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><p>需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span>:根据索引返回字符</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>:返回此字符串的长度</span><br><span class="line">数组的长度：数组名.length</span><br><span class="line">字符串的长度：字符串对象.length()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;  str.length(); i++)  &#123;</span><br><span class="line">            System.out.println(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="金额转换"><a href="#金额转换" class="headerlink" title="金额转换"></a>金额转换</h4><p> 案例需求</p><p>​    把2135变成：零佰零拾零万贰仟壹佰叁拾伍元 </p><p>​    把789变成：零佰零拾零万零仟柒佰捌拾玖元</p><p><strong>需要注意的是</strong></p><blockquote><p>moneyStr = capitalNumber + moneyStr;<br>            //第一次循环 ： “伍” + “” = “伍”<br>            //第二次循环 ： “叁” + “伍” = “叁伍”</p><p>moneyStr =  moneyStr  + capitalNumber;</p><p>会增加步骤，得到的字符串需再反转一次</p></blockquote><p> 代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入一个金额</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> money;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入一个金额&quot;</span>);</span><br><span class="line">            money = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (money &gt;= <span class="number">0</span> &amp;&amp; money &lt;= <span class="number">9999999</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;金额无效&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来表示钱的大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">moneyStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.得到money里面的每一位数字,再转成中文</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;<span class="comment">//2135</span></span><br><span class="line">            <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> money % <span class="number">10</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">capitalNumber</span> <span class="operator">=</span> getCapitalNumber(ge);</span><br><span class="line">            <span class="comment">//把转换之后的大写拼接到moneyStr当中</span></span><br><span class="line">            moneyStr = capitalNumber + moneyStr;</span><br><span class="line">            <span class="comment">//第一次循环 ： &quot;伍&quot; + &quot;&quot; = &quot;伍&quot;</span></span><br><span class="line">            <span class="comment">//第二次循环 ： &quot;叁&quot; + &quot;伍&quot; = &quot;叁伍&quot;</span></span><br><span class="line">            <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">            money = money / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">            <span class="keyword">if</span> (money == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.在前面补0，补齐7位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">7</span> - moneyStr.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            moneyStr = <span class="string">&quot;零&quot;</span> + moneyStr;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(moneyStr);<span class="comment">//零零零贰壹叁伍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.插入单位</span></span><br><span class="line">        <span class="comment">//定义一个数组表示单位</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//               零    零   零   贰   壹   叁   伍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历moneyStr，依次得到 零    零   零   贰   壹   叁   伍</span></span><br><span class="line">        <span class="comment">//然后把arr的单位插入进去</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moneyStr.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> moneyStr.charAt(i);</span><br><span class="line">            <span class="comment">//把大写数字和单位拼接到result当中</span></span><br><span class="line">            result = result + c + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.打印最终结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法把数字变成大写的中文</span></span><br><span class="line">    <span class="comment">//1 -- 壹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//定义数组，让数字跟大写的中文产生一个对应关系</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> arr[number];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="手机号屏蔽"><a href="#手机号屏蔽" class="headerlink" title="手机号屏蔽"></a>手机号屏蔽</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex,<span class="type">int</span> endIndex)</span>  <span class="comment">//截取</span></span><br><span class="line"><span class="comment">//注意点：</span></span><br><span class="line"><span class="comment">//  1.包头不包尾，包左不包右 [ )</span></span><br><span class="line"><span class="comment">//  2.只有返回值才是截取的小串</span></span><br></pre></td></tr></table></figure><h2 id="3-StringBuilder"><a href="#3-StringBuilder" class="headerlink" title="3 StringBuilder"></a>3 StringBuilder</h2><p>可以看作一个容器，创建之后，<strong>里面的内容是可变的</strong>。</p><p>作用：提高字符串的操作效率</p><h3 id="3-1-构造方法"><a href="#3-1-构造方法" class="headerlink" title="3.1 构造方法"></a>3.1 构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuilder</span><span class="params">()</span> <span class="comment">//创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuilder</span><span class="params">(String str)</span> <span class="comment">//根据字符串的内容，来创建可变字符串对象</span></span><br></pre></td></tr></table></figure><h3 id="3-2-常用方法"><a href="#3-2-常用方法" class="headerlink" title="3.2 常用方法"></a>3.2 常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(任意类型)</span> <span class="comment">//添加数据，并返回对象本身</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">reverse</span><span class="params">()</span> <span class="comment">//反转容器中的内容，改变自身</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> <span class="comment">//返回长度（字符出现的个数）</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span><span class="comment">//通过toString()就可以实现把String Builder转换为String</span></span><br></pre></td></tr></table></figure><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>​       1.因为StringBuilder是java已经写好的类，java在底层对他做了一些特殊处理。打印对象不是地址值而是属性值</p><p>​       2.用new StringBuilder （）构造输出为空，说明这个是空的。</p><p>​       3.new StringBuilder （“abc”）输出，会输出abc。</p><h3 id="3-4-链式编程"><a href="#3-4-链式编程" class="headerlink" title="3.4 链式编程"></a>3.4 链式编程</h3><h4 id="3-4-1-概念"><a href="#3-4-1-概念" class="headerlink" title="3.4.1 概念"></a>3.4.1 概念</h4><p>​        <strong>当我们在调用一个方法的时候，不需要用变量接收他的结果，可以继续调用其他方法。</strong></p><h4 id="3-4-2"><a href="#3-4-2" class="headerlink" title="3.4.2"></a>3.4.2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加字符串</span></span><br><span class="line">        sb.append(<span class="string">&quot;aaa&quot;</span>).append(<span class="string">&quot;bbb&quot;</span>).append(<span class="string">&quot;ccc&quot;</span>).append(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);<span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.再把StringBuilder变回字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(str);<span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-StringJoiner"><a href="#4-StringJoiner" class="headerlink" title="4 StringJoiner"></a>4 StringJoiner</h2><h3 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h3><p>​    ●StringJoiner跟StringBuilder-一样，也可以看成是一个容器，创建之后里面的内容是可变的。<br>​    ●作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。<br>​    ●JDK8出现的</p><h3 id="4-2-构造方法"><a href="#4-2-构造方法" class="headerlink" title="4.2 构造方法"></a>4.2 构造方法</h3><pre><code>public StringJoiner(间隔符号)//创建一个StringJoiner对象，指定拼接时的间隔符号public StringJoiner(间隔符号，开始符号，结束符号)创建一个StringJoiner对像，指定拼接时的间隔符号、开始符号、结束符号</code></pre><h3 id="4-3-基本方法"><a href="#4-3-基本方法" class="headerlink" title="4.3 基本方法"></a>4.3 基本方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringJoiner <span class="title function_">add</span><span class="params">(添加的内容)</span>   <span class="comment">//添加数据，并返回对象本身</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>   <span class="comment">//返回长度（字符出现的个数）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="comment">//返回一个字符串（该字符串就是拼接之后的结果）</span></span><br></pre></td></tr></table></figure><h2 id="5-字符串原理"><a href="#5-字符串原理" class="headerlink" title="5 字符串原理"></a>5 字符串原理</h2><p><strong>扩展底层原理</strong>1：</p><p>​    字符串存储的内存原理<br>​        ●直接赋值会复用字符串常量池中的<br>​        ●new出来不会复用，而是开辟一个新的空间</p><p><strong>扩展底层原理</strong>2<strong>：</strong></p><p> ==号比较的到底是什么？<br>      ●基本数据类型比较数据值<br>      ●引用数据类型比较地址值</p><p><strong>扩展底层原理3：</strong></p><p> 字符串拼接的底层原理</p><p>​       ●等号右边无变量</p><p>​        拼接的时候没有变量，都是字符串。触发字符串的优化机制。在编译的时候就已经是最终的结果了。</p><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230104212133351.png" alt="image-20230104212133351"></p><p>​        ●等号右边有变量</p><p>​         在拼接的时候有变量,JDK8以前底层会使用StringBuilder.</p><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230104212419093.png" alt="image-20230104212419093"></p><p><img src="/2023/01/03/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230104212557286.png" alt="image-20230104212557286"></p><p>JDK8字符串拼接的底层原理。</p><p>先预估最后的字符串长度，</p><p>字符串拼接的时候有变量参与：<br>在内存中创建了很多对象<br>浪费空间，时间也非常慢</p><p>结论：<br>如果很多字符串变量拼接，不要直接+。在底层会创建多个对象，浪费时间，浪费性能。</p><p>用StringBuilder</p><p><strong>扩展底层原理4：</strong></p><p>StringBuilder提高效率原理图</p><p><strong>所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</strong></p><p>1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">String s1=<span class="string">&quot;abc&quot;</span>,<span class="comment">//记录串池中的地址值</span></span><br><span class="line">String s2 <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">String s3 s2 +<span class="string">&quot;c&quot;</span>;</span><br><span class="line">System.out.println(s1 =s3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br></pre></td></tr></table></figure><p><strong>字符串拼接的时候，如果有变量：</strong><br><strong>JDK8以前：系统底层会自动创建一个StringBuilderx对象，然后再调用其append方法完成拼接。</strong><br><strong>拼接后，再调用其toString.方法转换为String:类型，而toString方法的底层是直接new了一个字符串对象。</strong><br><strong>JDK8版本：系统会预估要字符串拼接之后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串。</strong></p><p>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//·问题：下列代码的运行结果是？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span> &#123;</span><br><span class="line">String s:<span class="number">1</span>=<span class="string">&quot;abc&quot;</span>;    <span class="comment">//记录串池中的地址值</span></span><br><span class="line">String s2=<span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>+<span class="string">&quot;c&quot;</span>;<span class="comment">//复用串池中的字符串</span></span><br><span class="line">System.out.printin(s1-=s2)<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//在编译的时候，就会将&quot;a&quot;+&quot;b&quot;+&quot;c&quot;拼接为&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p><strong>扩展底层原理5：StringBuilder源码分析</strong></p><p>默认容量为16</p><p>长度：实际装了多少。</p><p>容量：做多能装多少。</p><p>自动扩容：扩容：老容量*2+2=34</p><p>扩容：如果超出*2+2的容量则以实际容量为准，即如果超了容量，就按实际长度为容量，例：如果为36，超了34所以就按容量为36扩容。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>扩展底层原理1：字符串存储的内存原理<br>    ●直接赋值会复用字符串常量池中的<br>    ●new出来不会复用，而是开辟一个新的空间</p><p>扩展底层原理2：==号比较的到底是什么？<br>    ●基本数据类型比较数据值<br>    ●引用数据类型比较地址值</p><p>扩展底层原理3：字符串拼接的底层原理<br>    ●如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串。<br>    ●如果有变量参与，会创建新的字符串，浪费内存。</p><p>扩展底层原理4：StringBuilder提高效率原理图<br>    ●所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</p><p>扩展底层原理5：StringBuilder源码分析<br>    ●默认创建一个长度为16的字节数组。<br>    ●添加的内容长度小于16，直接存。<br>    ●添加的内容大于16会扩容（原来的容量*2+2)。<br>    ● 如果扩容之后还不够，以实际长度为准。</p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1.面向对象"></a>1.面向对象</h2><h3 id="1-1-类和对象概念"><a href="#1-1-类和对象概念" class="headerlink" title="1.1 类和对象概念"></a>1.1 类和对象概念</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p><ul><li>类<ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li><li>简单理解：类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li><strong>属性</strong>：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li><strong>行为</strong>：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li>类和对象的关系<ul><li><strong>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</strong></li><li><strong>对象：是能够看得到摸的着的真实存在的实体</strong></li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h3 id="1-2-类的定义"><a href="#1-2-类的定义" class="headerlink" title="1.2 类的定义"></a>1.2 类的定义</h3><p>类的组成是由属性和行为两部分组成</p><ul><li><strong>属性</strong>：在类中<strong>通过成员变量来体现</strong>（类中方法外的变量）</li><li><strong>行为</strong>：在类中通过成员方法来体现（<strong>和前面的方法相比去掉static关键字即可</strong>）</li></ul><p>类的定义步骤：</p><p>①定义类</p><p>②编写类的成员变量</p><p>③编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>；</span><br><span class="line">变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">…</span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">方法<span class="number">1</span>;</span><br><span class="line">方法<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> () &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class 类名 &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为public 修饰的类名要与文件名b</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手机类：</span></span><br><span class="line"><span class="comment">        类名：</span></span><br><span class="line"><span class="comment">        手机(Phone)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员变量：</span></span><br><span class="line"><span class="comment">        品牌(brand)</span></span><br><span class="line"><span class="comment">        价格(price)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员方法：</span></span><br><span class="line"><span class="comment">        打电话(call)</span></span><br><span class="line"><span class="comment">        发短信(sendMessage)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定义类的补充注意事项"><a href="#定义类的补充注意事项" class="headerlink" title="定义类的补充注意事项"></a>定义类的补充注意事项</h4><p>​       1.<strong>用来描述一类事物的类，专业叫做：JavaBean类。</strong>  </p><p><strong>在Javabean类中，是不写main方法的。</strong><br>​        2.在以前，<strong>编写main方法的类，叫做测试类。</strong></p><p>​        3.类名首字母建议大写，需要见名知意，驼峰模式。</p><p>​        4.一个Java文件中可以定义多个class类，<strong>且只能一个类是public修饰</strong>，而且<strong>publicf修饰的类名必须成为代码文件名</strong>。<br>​        5.实际开发中建议还是一个文件定义一个class类。<br>​        6.成员变量的完整定义格式是：==修饰符  教据类型 变量名 = 初始化值==；一般无需指定初始化值，存在默认值。</p><h3 id="1-3-对象的使用"><a href="#1-3-对象的使用" class="headerlink" title="1.3 对象的使用"></a>1.3 对象的使用</h3><ul><li><strong>创建对象的格式</strong>：<ul><li>类名 对象名 = new 类名();</li></ul></li><li><strong>调用成员的格式</strong>：<ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象</span></span><br><span class="line"><span class="comment">        格式：类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">        范例：Phone p = new Phone();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用对象</span></span><br><span class="line"><span class="comment">        1：使用成员变量</span></span><br><span class="line"><span class="comment">            格式：对象名.变量名</span></span><br><span class="line"><span class="comment">            范例：p.brand</span></span><br><span class="line"><span class="comment">        2：使用成员方法</span></span><br><span class="line"><span class="comment">            格式：对象名.方法名()</span></span><br><span class="line"><span class="comment">            范例：p.call()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员变量</span></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员方法</span></span><br><span class="line">        p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-定义类的一些建议"><a href="#1-4-定义类的一些建议" class="headerlink" title="1.4 定义类的一些建议"></a>1.4 定义类的一些建议</h3><p>​      1，类名首字母建议大写、英文、有意义，满足驼峰模式，不能用关键字，满足标志符规定；<br>​      2，一个代码文件中可以定义多个类，但是只能一个类是pubc修饰的，<br>​      3.public修饰的类名必须是)ava代码的文件名称。</p><h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2.对象内存图"></a>2.对象内存图</h2><p>当运行一个类时</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103215521769.png" alt="image-20230103215521769"></p><h3 id="2-1-单个对象内存图"><a href="#2-1-单个对象内存图" class="headerlink" title="2.1 单个对象内存图"></a>2.1 单个对象内存图</h3><p>1.加载class文件</p><p>2.申明局部变量</p><p>3.在堆内存中开辟一个空间</p><p>4.默认初始化</p><p>5.显示初始化（如果在类中成员变量直接给值了，默认初始化会改变）</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103220104240.png" alt="image-20230103220104240"></p><p>6.构造方法初始化</p><p>7.将堆内存中的地址赋值给左边的局部变量</p><ul><li><p>成员变量使用过程</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103220340760.png" alt="image-20230103220340760"></p></li></ul><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt="1"></p><ul><li>成员方法调用过程</li></ul><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2.png" alt="2"></p><h3 id="2-2-多个对象内存图"><a href="#2-2-多个对象内存图" class="headerlink" title="2.2 多个对象内存图"></a>2.2 多个对象内存图</h3><ul><li>成员变量使用过程</li></ul><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3.png" alt="3"></p><ul><li>成员方法调用过程</li></ul><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4.png" alt="4"></p><ul><li><p>总结：</p><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p></li></ul><h3 id="2-3-基本数据类型和引用数据类型"><a href="#2-3-基本数据类型和引用数据类型" class="headerlink" title="2.3 基本数据类型和引用数据类型"></a>2.3 基本数据类型和引用数据类型</h3><h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><p>成员变量：类中方法外的变量</p><p>局部变量：方法中的变量</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103221747434.png" alt="image-20230103221747434"></p><h3 id="3-1-成员变量和局部变量的区别"><a href="#3-1-成员变量和局部变量的区别" class="headerlink" title="3.1 成员变量和局部变量的区别"></a>3.1 成员变量和局部变量的区别</h3><ul><li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：<strong>成员变量（堆内存）局部变量（栈内存</strong>）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）<strong>局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</strong></li><li>初始化值不同：<strong>成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</strong></li></ul><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-封装思想"><a href="#4-1-封装思想" class="headerlink" title="4.1 封装思想"></a>4.1 封装思想</h3><ol><li><p>封装概述<br>是面向对象三大特征之一（封装，继承，多态）</p><p><strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong> </p></li><li><p>封装代码实现<br>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private，提供对应的getXxx()/setXxx()方法</p></li></ol><h3 id="4-2-private关键字"><a href="#4-2-private关键字" class="headerlink" title="4.2 private关键字"></a>4.2 private关键字</h3><p>private是一个权限修饰符，可以用来修饰成员（成员变量，成员方法）</p><ul><li><p>被private修饰的成员<strong>，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</strong>。</p><p>对每个私有化的变量：</p><ul><li>提供“get变量名()”方法，用于<strong>获取成员变量的值</strong>，方法用public修饰</li><li>提供“set变量名(参数)”方法，用于<strong>设置成员变量的值</strong>，方法用public修饰</li></ul></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get/set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//调用show方法</span></span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-private的使用"><a href="#4-3-private的使用" class="headerlink" title="4.3 private的使用"></a>4.3 private的使用</h3><ul><li><p>需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出  林青霞，30 </p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用set方法给成员变量赋值</span></span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用get方法获取成员变量的值</span></span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;---&quot;</span> + s.getAge());</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-this关键字"><a href="#4-4-this关键字" class="headerlink" title="4.4 this关键字"></a>4.4 this关键字</h3><ul><li>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）<ul><li>方法的形参如果与成员变量同名，<strong>不带this修饰的变量指的是形参</strong>，而不是成员变量</li><li>方法的形参没有与成员变量同名，<strong>不带this修饰的变量指的是成员变量</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-this内存原理"><a href="#4-5-this内存原理" class="headerlink" title="4.5 this内存原理"></a>4.5 this内存原理</h3><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103221414621.png" alt="image-20230103221414621"></p><h3 id="4-6-就近原则"><a href="#4-6-就近原则" class="headerlink" title="4.6  就近原则"></a>4.6  就近原则</h3><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230102220811866.png" alt="image-20230102220811866"></p><h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法概述"><a href="#5-1-构造方法概述" class="headerlink" title="5.1 构造方法概述"></a>5.1 构造方法概述</h3><p>构造方法是一种特殊的方法</p><ul><li><p>作用：创建对象   Student stu = <strong>new Student();</strong></p></li><li><p>格式：</p><p>public class 类名{</p><p>​        修饰符 类名( 参数 ) {</p><p>​        }</p><p>}</p></li><li><p>功能：主要是完成对象数据的初始化</p></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-构造方法的特点"><a href="#5-2-构造方法的特点" class="headerlink" title="5.2 构造方法的特点"></a>5.2 构造方法的特点</h3><p>​    1.方法名与类名相同，大小写也要一致</p><p>​    2.没有返回值类型，连void都没有</p><p>​    3.没有具体的返回值不能由return带回结果数据</p><p>​    4.</p><h3 id="5-4-构造方法的执行时机"><a href="#5-4-构造方法的执行时机" class="headerlink" title="5.4 构造方法的执行时机"></a>5.4 构造方法的执行时机</h3><p>1.<strong>创建对象的时候由虚拟机调用，不能手动调用构建方法。</strong></p><p>2.每<strong>创建</strong>一次对象，就会调用一次构造方法。</p><h3 id="5-5-构造方法的注意事项"><a href="#5-5-构造方法的注意事项" class="headerlink" title="5.5 构造方法的注意事项"></a>5.5 构造方法的注意事项</h3><ul><li>构造方法的创建</li></ul><p><strong>如果没有定义构造方法，系统将给出一个默认的无参数构造方法</strong>，格式为；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pubilc 类名 () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果定义了构造方法，系统将不再提供默认的构造方法</p><ul><li>构造方法的重载</li></ul><p><strong>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</strong>（成员变量使用默认值）</p><ul><li><strong>推荐的使用方式</strong></li></ul><p><strong>无论是否使用，都手工书写无参数构造方法</strong></p><ul><li>重要功能！</li></ul><p>可以使用带参构造，为成员变量进行初始化</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(int age)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">30</span>);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name,int age)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-构造方法扫盲"><a href="#5-6-构造方法扫盲" class="headerlink" title="5.6 构造方法扫盲"></a>5.6 构造方法扫盲</h3><p>​      构造方法就是用来创建对象的，这句话是错误的</p><p>​      ==构造方法真正的作用：创造对象的时候，虚拟机会自动调用构造方法，作用是给成员变量进行初始化的。==</p><h3 id="5-7-标准的javaBean类制作"><a href="#5-7-标准的javaBean类制作" class="headerlink" title="5.7 标准的javaBean类制作"></a>5.7 标准的javaBean类制作</h3><p>① 类名需要见名知意</p><p>② 成员变量使用private修饰</p><p>③ 提供至少两个构造方法 </p><ul><li>无参构造方法</li><li>带全部参数的构造方法</li></ul><p>④ get和set方法 </p><p>​    <strong>提供每一个成员变量对应的setXxx()/getXxx()</strong></p><p>⑤ 如果还有其他行为，也需要写上</p><h3 id="推荐插件-PTG-1秒生成JavaBean"><a href="#推荐插件-PTG-1秒生成JavaBean" class="headerlink" title="推荐插件 PTG 1秒生成JavaBean"></a>推荐插件 PTG 1秒生成JavaBean</h3><p>在idea中插件搜索</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103214719162.png" alt="image-20230103214719162"></p><p>使用：</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230103215018967.png" alt="image-20230103215018967"></p><p>这插件真香！！！</p><p><strong>或者</strong>  ****</p><p>alt + insert </p><p>1.按两下tab，一下回车</p><p>第一下tab是取消默认nameString属性</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230105222516513.png" alt="image-20230105222516513"></p><p>第二下，让select None 背景变蓝</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230105222609257.png" alt="image-20230105222609257"></p><p>添加构造函数</p><p>再按一下 alt + insert </p><p>然后ctrl + A全选 再按回车</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230105222726607.png" alt="image-20230105222726607"></p><p>alt + insert</p><p>选择第四个</p><p><img src="/2023/01/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20230105222827679.png" alt="image-20230105222827679"></p><p>然后ctrl+A 全选，回车</p><p>标准的javaBean创建成功</p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>方法</title>
      <link href="/2023/01/01/%E6%96%B9%E6%B3%95/"/>
      <url>/2023/01/01/%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>​    <strong>方法（method）</strong>是程序中<strong>最小的执行单元</strong></p><ul><li><p>注意：</p><ul><li><p>方法必须先创建才可以使用，该过程成为方法定义</p></li><li><p>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</p></li></ul></li></ul><h3 id="1-2-实际开发中，什么时候用到方法？"><a href="#1-2-实际开发中，什么时候用到方法？" class="headerlink" title="1.2. 实际开发中，什么时候用到方法？"></a>1.2. 实际开发中，什么时候用到方法？</h3><p>重复的代码、具有独立功能的代码可以抽取到方法中。</p><h3 id="1-3-实际开发中，方法有什么好处？"><a href="#1-3-实际开发中，方法有什么好处？" class="headerlink" title="1.3. 实际开发中，方法有什么好处？"></a>1.3. 实际开发中，方法有什么好处？</h3><p>●可以提高代码的复用性<br>●可以提高代码的可维护性</p><h3 id="1-4-方法的定义"><a href="#1-4-方法的定义" class="headerlink" title="1.4 方法的定义"></a>1.4 方法的定义</h3><p>通俗来说，就是把一些代码打包起来，</p><p>带返回值方法的定义：</p><h3 id="1-5-方法的调用"><a href="#1-5-方法的调用" class="headerlink" title="1.5 方法的调用"></a>1.5 方法的调用</h3><p>方法定义后并不是直接运行的，而是手动调用才能知执行</p><h3 id="1-6-最简单的方法定义和调用："><a href="#1-6-最简单的方法定义和调用：" class="headerlink" title="1.6 最简单的方法定义和调用："></a>1.6 <strong>最简单的方法定义</strong>和调用：</h3><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 () &#123;</span><br><span class="line">方法体（就是打包起来的代码）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure><h3 id="1-7-带参数的方法定义和调用"><a href="#1-7-带参数的方法定义和调用" class="headerlink" title="1.7 带参数的方法定义和调用"></a>1.7 带参数的方法定义和调用</h3><p>参数：由数据类型和变量名组成 -  数据类型 变量名</p><p>示例：int a</p><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3.</span>..) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错</p><p>方法定义时，多个参数之间使用逗号( ，)分隔</p><p><strong>调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数)；</span><br><span class="line"></span><br><span class="line">方法名(参数1,参数2);</span><br></pre></td></tr></table></figure><h3 id="1-8-形参和实参"><a href="#1-8-形参和实参" class="headerlink" title="1.8 形参和实参"></a>1.8 形参和实参</h3><ol><li>形参：方法定义中的参数</li></ol><p>​          等同于变量定义格式，例如：int number</p><ol start="2"><li>实参：方法调用中的参数</li></ol><p>​          等同于使用变量或常量，例如： 10  number</p><h3 id="1-9-带返回值方法的定义和调用"><a href="#1-9-带返回值方法的定义和调用" class="headerlink" title="1.9 带返回值方法的定义和调用"></a>1.9 带返回值方法的定义和调用</h3><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line"><span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法名 ( 参数 ) ;</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 ) ;</span><br></pre></td></tr></table></figure><h3 id="1-10-注意事项"><a href="#1-10-注意事项" class="headerlink" title="1.10 注意事项"></a>1.10 注意事项</h3><ul><li><p>方法不能嵌套定义</p><ul><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 这里会引发编译错误!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p><ul><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return 100; 编译错误，因为没有具体返回值类型</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//System.out.println(100); return语句后面不能跟数据或代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-11-方法的通用格式"><a href="#1-11-方法的通用格式" class="headerlink" title="1.11 方法的通用格式"></a>1.11 方法的通用格式</h3><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123;</span><br><span class="line">   方法体; </span><br><span class="line">   <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解释：</p><ul><li><p>public static     修饰符，目前先记住这个格式</p><p>返回值类型    方法操作完毕之后返回的数据的数据类型</p><p>​            如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p><p> 方法名        调用方法时候使用的标识</p><p> 参数        由数据类型和变量名组成，多个参数之间用逗号隔开</p><p> 方法体        完成功能的代码块</p><p> return        如果方法操作完毕，有数据返回，用于把数据返回给调用者</p></li></ul></li><li><p>定义方法时，要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意：</p><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><h2 id="2-方法的重载"><a href="#2-方法的重载" class="headerlink" title="2 方法的重载"></a>2 方法的重载</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul><li><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的<strong>参数不相同</strong>，<strong>类型不同</strong>或者<strong>数量不同</strong></li></ul><p><strong>简单记</strong>：<strong>同一个类中，==方法名相同==，==参数不同==的方法。==与返回值==无关。</strong></p><p>参数不同：<strong>个数</strong>，<strong>类型</strong>，<strong>顺序</strong>不同。</p><p>java虚拟机会通过参数的不同来区分同名的方法</p></li><li><p>注意：</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></li><li><p>正确范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">double</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123; <span class="comment">/*错误原因：重载与返回值无关*/</span></span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">double</span> a)</span> &#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span></span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>顺序不同</strong></p><p><img src="/2023/01/01/%E6%96%B9%E6%B3%95/image-20230101225751608.png" alt="顺序不同构成重载"></p><h2 id="3-练习题"><a href="#3-练习题" class="headerlink" title="3. 练习题"></a>3. 练习题</h2><h3 id="3-1-数组遍历"><a href="#3-1-数组遍历" class="headerlink" title="3.1  数组遍历"></a>3.1  数组遍历</h3><ul><li><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] </p></li><li><p>思路：</p><ul><li><p>①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);</p><p>==<strong>System.out.println(“内容”); 输出内容并换行</strong>==</p><p>==<strong>System.out.print(“内容”); 输出内容不换行</strong>==</p><p>System.out.println(); 起到换行的作用</p></li><li><p>②定义一个数组，用静态初始化完成数组元素初始化</p></li><li><p>③定义一个方法，用数组遍历通用格式对数组进行遍历</p></li><li><p>④用新的输出语句修改遍历操作</p></li><li><p>⑤调用遍历方法</p></li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">/*  //先打印数据，再进行换行</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        //只打印不换行</span></span><br><span class="line"><span class="comment">        System.out.print(&quot;bbb&quot;);</span></span><br><span class="line"><span class="comment">        System.out.print(&quot;ddd&quot;);</span></span><br><span class="line"><span class="comment">        //不打印任何内容，只换行</span></span><br><span class="line"><span class="comment">        System.out.println();</span></span><br><span class="line"><span class="comment">        System.out.print(&quot;cc&quot;);*/</span></span><br><span class="line">        <span class="comment">//设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.我要遍历数组</span></span><br><span class="line">    <span class="comment">//2.需要什么？  数组</span></span><br><span class="line">    <span class="comment">//3.调用处是否需要使用方法的结果。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(arr[i] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-方法的基本内存原理"><a href="#4-方法的基本内存原理" class="headerlink" title="4 方法的基本内存原理"></a>4 方法的基本内存原理</h2><h3 id="4-1-方法调用的基本内存原理"><a href="#4-1-方法调用的基本内存原理" class="headerlink" title="4.1  方法调用的基本内存原理"></a>4.1  方法调用的基本内存原理</h3><p><img src="/2023/01/01/%E6%96%B9%E6%B3%95/image-20230102210326646.png" alt="image-20230102210326646"></p><h2 id="5-基本数据类型-和-·引用数据类型"><a href="#5-基本数据类型-和-·引用数据类型" class="headerlink" title="5 基本数据类型 和  ·引用数据类型"></a>5 基本数据类型 和  ·引用数据类型</h2><p><img src="/2023/01/01/%E6%96%B9%E6%B3%95/image-20230102210707122.png" alt="变量中存储的是真实的数据"></p><p><img src="/2023/01/01/%E6%96%B9%E6%B3%95/image-20230102211334884.png" alt="变量中存储的是地址值"></p><h3 id="从内存角度：基本数据类型和引用数据类型区别"><a href="#从内存角度：基本数据类型和引用数据类型区别" class="headerlink" title="从内存角度：基本数据类型和引用数据类型区别"></a>从内存角度：基本数据类型和引用数据类型区别</h3><p><img src="/2023/01/01/%E6%96%B9%E6%B3%95/image-20230102211433583.png" alt="image-20230102211433583"></p><h2 id="6-方法的值的传递"><a href="#6-方法的值的传递" class="headerlink" title="6 方法的值的传递"></a>6 方法的值的传递</h2><h3 id="6-1-方法传递基本数据类型的原理"><a href="#6-1-方法传递基本数据类型的原理" class="headerlink" title="6.1 方法传递基本数据类型的原理"></a>6.1 方法传递基本数据类型的原理</h3><p><img src="/2023/01/01/%E6%96%B9%E6%B3%95/image-20230102212004323.png" alt="image-20230102212004323"></p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java数组</title>
      <link href="/2022/12/30/java%E6%95%B0%E7%BB%84/"/>
      <url>/2022/12/30/java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>​        🧨数组指的是一种容器，用来存储同种数据类型的多个值。（在内存中开辟一个空间）</p><p>​    但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p><p>比如：</p><p>​    定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，</p><p>​    但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。</p><p>建议：</p><p>​    容器的类，和存储的数据类型保持一致。</p><p>举例：</p><p>​    整数1 2 3 4 56 就可以使用int类型的数组来存储。</p><p>​    小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。</p><p>​    字符串”aaa”  “bbb”  “ccc” 就可以使用String类型的数组来存储。</p><h3 id="1-2-数组的定义"><a href="#1-2-数组的定义" class="headerlink" title="1.2 数组的定义"></a>1.2 数组的定义</h3><p>变量的定义：</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230173130357.png" alt="image-20221230173130357"></p><p>数组的定义</p><h4 id="格式一：数据类型-数组名"><a href="#格式一：数据类型-数组名" class="headerlink" title="格式一：数据类型 [] 数组名"></a>格式一：<strong>数据类型 [] 数组名</strong></h4><p>比如：int [] array</p><h4 id="格式二：数据类型-数组名"><a href="#格式二：数据类型-数组名" class="headerlink" title="格式二：数据类型  数组名 []"></a>格式二：<strong>数据类型  数组名 []</strong></h4><p>比如： int array []</p><p><strong>详解</strong>：</p><p>数据类型：限定了数组以后能存什么类型的数据。</p><p>方括号：表示现在定义的是一个数组。</p><p>数组名：就是一个名字而已，方便以后使用。</p><p><strong>注意点</strong>：</p><p>​    <strong>方法括号跟数组名，谁写在前面，谁写在后面都是一样的。</strong></p><p>​    <strong>平时习惯性使用第一种方式。</strong></p><p><strong>格式三</strong> 二维数组</p><p>int [][] arrayp; </p><h3 id="1-3-数组的静态初始化"><a href="#1-3-数组的静态初始化" class="headerlink" title="1.3.数组的静态初始化"></a>1.3.数组的静态初始化</h3><p>​    初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程.</p><h4 id="完整格式：数据类型-数组名-new-数据类型-元素1，元素2，元素3，元素4…"><a href="#完整格式：数据类型-数组名-new-数据类型-元素1，元素2，元素3，元素4…" class="headerlink" title="完整格式：数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4…};"></a>完整格式：数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4…};</h4><p>比如：</p><p>​    int[] arr = new int[]{11,22,33};</p><p>​    double[] arr = new double[]{1.1,1.2,1.3};</p><p><strong>格式详解</strong>：</p><p>​    数据类型：限定了数组以后能存什么类型的数据。</p><p>​    方括号：表示现在定义的是一个数组。</p><p>​    数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。</p><p>​            arr   namesArr</p><p>​    new：就是给数组在内存中开辟了一个空间。</p><p>​    数据类型：限定了数组以后能存什么类型的数据。</p><p>​              前面和后面的数据类型一定要保持一致。</p><p>​            int[] arr = new double[]{11,22,33};//错误写法</p><p>​    方括号：表示现在定义的是一个数组。</p><p>​    大括号：表示数组里面的元素。元素也就是存入到数组中的数据。</p><p>​            多个元素之间，一定要用逗号隔开。</p><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>等号前后的数据类型必须保持一致。</li><li>数组一旦创建之后，长度不能发生变化。</li></ul><h3 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式:"></a>简化格式:</h3><p>​    <strong>数据类型[] 数组名 = {元素1，元素2，元素3，元素4…};</strong></p><p>比如：</p><p>​    int[] array = {1,2,3,4,5};</p><p>​    double[] array = {1.1,1.2,1.3};</p><h3 id="1-4-地址值"><a href="#1-4-地址值" class="headerlink" title="1.4 地址值"></a>1.4 地址值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@6d03e736</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] arr2 = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>&#125;;</span><br><span class="line">System.out.println(arr2);<span class="comment">//[D@568db2f2</span></span><br></pre></td></tr></table></figure><p>打印数组的时候，实际出现的是数组的地址值。</p><p>数组的地址值：就表示数组在内存中的位置。</p><p>以[I@6d03e736为例：</p><p><strong>[</strong> ：表示现在打印的是一个数组。</p><p><strong>I</strong>：表示现在打印的数组是int类型的。</p><p>**@**：仅仅是一个间隔符号而已。</p><p><strong>6d03e736</strong>：就是数组在内存中真正的地址值。（<strong>十六进制的</strong>）</p><p><strong>但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。</strong></p><p>地址值对于我们来京，作用不大，简单了解。</p><h3 id="1-5-元素访问"><a href="#1-5-元素访问" class="headerlink" title="1.5 元素访问"></a>1.5 元素访问</h3><h4 id="1-5-1-格式-数组名-索引"><a href="#1-5-1-格式-数组名-索引" class="headerlink" title="1.5.1 格式    数组名[索引];"></a>1.5.1 格式    数组名[索引];</h4><h4 id="1-5-2-作用："><a href="#1-5-2-作用：" class="headerlink" title="1.5.2 作用："></a>1.5.2 作用：</h4><ul><li><p>获取数组中对应索引上的值</p></li><li><p>修改数组中对应索引上的值</p><p>一旦修改之后，原来的值就会被覆盖了。</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        数组中元素访问的格式：</span></span><br><span class="line"><span class="comment">                数组名[索引];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         作用：</span></span><br><span class="line"><span class="comment">            1.获取指定索引上对应的元素</span></span><br><span class="line"><span class="comment">            2.修改指定索引上对应的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">       <span class="comment">//需求1：获取arr数组中，3索引上的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr[<span class="number">3</span>];</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//需求2：将arr数组中，3索引上的值修改为10</span></span><br><span class="line">            arr[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改之后为:&quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-索引"><a href="#1-6-索引" class="headerlink" title="1.6 索引"></a>1.6 索引</h3><p>​    也叫角标、下标 。</p><p>​    就是数组容器中每一个小格子对应的编号。</p><p><strong>索引的特点</strong>：</p><ul><li>索引一定是从0开始的。</li><li>连续不间断。</li><li>逐个+1增长。</li></ul><h3 id="1-7-数组遍历"><a href="#1-7-数组遍历" class="headerlink" title="1.7 数组遍历"></a>1.7 数组遍历</h3><p>遍历：就是把数组里面所有的内容一个一个全部取出来。</p><p>数组的长度：数组名.length;</p><p>通用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环的过程中，i依次表示数组中的每一个索引</span></span><br><span class="line">    sout(arr[i]);<span class="comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-数组的动态初始化"><a href="#1-8-数组的动态初始化" class="headerlink" title="1.8 数组的动态初始化"></a>1.8 数组的动态初始化</h3><h4 id="1-8-1-格式：数据类型-数组名-new-数据类型-数组的长度"><a href="#1-8-1-格式：数据类型-数组名-new-数据类型-数组的长度" class="headerlink" title="1.8.1 格式：数据类型[] 数组名 = new 数据类型[数组的长度];"></a>1.8.1 格式：数据类型[] 数组名 = new 数据类型[数组的长度];</h4><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义一个数组，存3个人的年龄，年龄未知</span></span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span></span><br><span class="line"><span class="type">int</span>[] scoresArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h4 id="1-8-2-数组的默认初始化值："><a href="#1-8-2-数组的默认初始化值：" class="headerlink" title="1.8.2 数组的默认初始化值："></a>1.8.2 数组的默认初始化值：</h4><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’（空格）</p><p>引用类型：null</p><h3 id="1-9-数组两种初始化"><a href="#1-9-数组两种初始化" class="headerlink" title="1.9 数组两种初始化"></a>1.9 数组两种初始化</h3><h4 id="1-9-1-区别"><a href="#1-9-1-区别" class="headerlink" title="1.9.1 区别"></a>1.9.1 区别</h4><p>静态初始化：int[] arr = {1,2,3,4,5};</p><p>动态初始化：int[] arr = new int[3];</p><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><h4 id="1-9-1使用场景："><a href="#1-9-1使用场景：" class="headerlink" title="1.9.1使用场景："></a>1.9.1使用场景：</h4><p>只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。</p><p>已经明确了要操作的所有数据，推荐使用静态初始化。</p><p>举例：</p><ul><li><p>使用数组来存储键盘录入的5个整数。</p><p>int[] arr = new int[5];</p></li><li><p>将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100</p><p>int[] arr = new int[5];</p><p>arr[0] = 66;</p><p>arr[1] = 77;</p><p>… 虽然可以实现，但是太麻烦了。</p><p>建议使用静态初始化：int[] arr = {66,77,88,99,100};</p></li></ul><h3 id="1-10-数组常见问题"><a href="#1-10-数组常见问题" class="headerlink" title="1.10 数组常见问题"></a>1.10 数组常见问题</h3><p> 当访问了数组中不存在的索引，就会引发索引越界异常。</p><p>避免：</p><p>​    针对于任意一个数组，索引的范围：<br>       最小索引：0<br>       最大索引：数组的长度 - 1<br>​                       数组名.length - 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//用索引来访问数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);<span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-11-数组的内存图"><a href="#1-11-数组的内存图" class="headerlink" title="1.11 数组的内存图"></a>1.11 数组的内存图</h3><h4 id="1-11-1-java内存分配"><a href="#1-11-1-java内存分配" class="headerlink" title="1.11.1 java内存分配"></a>1.11.1 java内存分配</h4><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222019733.png" alt="java内存分配"></p><p>其中JVM 一开始，堆和方法区连在一起，一块的空间</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222120001.png" alt="image-20221230222120001"></p><p>然后JDK8就修改了 ，补充了元空间</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222244253.png" alt="image-20221230222244253"></p><p>●🎈栈：方法运行时使用的内存，比如main方法运行，进入方法栈中执行<br>●🎆堆：存储对象或者数组，<strong>new来创建的，都存储在堆内存</strong>，会有地址值，表示位置<br>●方法区：存储可以运行的class文件<br>●本地方法栈：JVM在使用操作系统功能的时候使用，和我们开发无关<br>●寄存器：给CPU使用，和我们开发无关</p><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230222916977.png" alt="数组内存图"></p><h4 id="两个数组指向同一个空间的内存图"><a href="#两个数组指向同一个空间的内存图" class="headerlink" title="两个数组指向同一个空间的内存图"></a>两个数组指向同一个空间的内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[]arr1=&#123;<span class="number">11</span>,<span class="number">22</span>&#125;;</span><br><span class="line"><span class="type">int</span>[]arr2 arr1;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/30/java%E6%95%B0%E7%BB%84/image-20221230223045791.png" alt="image-20221230223045791"></p><h3 id="1-12-练习题"><a href="#1-12-练习题" class="headerlink" title="1.12 练习题"></a>1.12 练习题</h3><h4 id="练习7：打乱数据"><a href="#练习7：打乱数据" class="headerlink" title="练习7：打乱数据"></a>练习7：打乱数据</h4><p>需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义数组存储1~5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//2.循环遍历数组，从0索引开始打乱数据的顺序</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//生成一个随机索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">    <span class="comment">//拿着随机索引指向的元素 跟 i 指向的元素进行交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，那么数组中所有的数据已经打乱顺序了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java流程控制</title>
      <link href="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-流程控制语句"><a href="#1-流程控制语句" class="headerlink" title="1.流程控制语句"></a>1.流程控制语句</h2><h3 id="1-1-流程控制语句分类"><a href="#1-1-流程控制语句分类" class="headerlink" title="1.1 流程控制语句分类"></a>1.1 流程控制语句分类</h3><p>​    顺序结构</p><p>​    判断和选择结构(if, switch)</p><p>​    循环结构(for, while, do…while)</p><h3 id="1-2-顺序结构"><a href="#1-2-顺序结构" class="headerlink" title="1.2. 顺序结构"></a>1.2. 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p>顺序结构执行流程图：</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545615769372.png" alt="1545615769372"></p><h3 id="1-3-判断语句-：if"><a href="#1-3-判断语句-：if" class="headerlink" title="1.3. 判断语句 ：if"></a>1.3. 判断语句 ：if</h3><h4 id="1-3-1-格式1"><a href="#1-3-1-格式1" class="headerlink" title="1.3.1 格式1"></a>1.3.1 格式1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545616039363.png" alt="1545616039363"></p><h4 id="if的注意点："><a href="#if的注意点：" class="headerlink" title="if的注意点："></a>if的注意点：</h4><p>1,大括号的开头可以另起一行书可，但是建议可在第一行的末尾<br>2,作语句体中，如果只有一句代码，大括号可以省略不写，个人建议，大括号还是不要省略<br>3,如果对一个布尔类的变量进行判断，不要用 ==号，直接把变量写在小括号里即可</p><h4 id="1-3-2-if-语句格式2"><a href="#1-3-2-if-语句格式2" class="headerlink" title="1.3.2 if 语句格式2"></a>1.3.2 if 语句格式2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545616221283-16723858349621.png" alt="1545616221283"></p><h4 id="1-3-3-if语句格式3"><a href="#1-3-3-if语句格式3" class="headerlink" title="1.3.3 if语句格式3"></a>1.3.3 if语句格式3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><p><img src="/2022/12/30/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1545616667104.png" alt="1545616667104"></p><h3 id="1-4-switch-语句"><a href="#1-4-switch-语句" class="headerlink" title="1.4 switch 语句"></a>1.4 switch 语句</h3><h4 id="1-4-1-格式"><a href="#1-4-1-格式" class="headerlink" title="1.4.1 格式"></a>1.4.1 格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-执行流程："><a href="#1-4-2-执行流程：" class="headerlink" title="1.4.2 执行流程："></a>1.4.2 <strong>执行流程：</strong></h4><ul><li>首先计算出表达式的值 </li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 </li></ul><h4 id="1-4-3-格式说明："><a href="#1-4-3-格式说明：" class="headerlink" title="1.4.3 格式说明："></a>1.4.3 格式说明：</h4><p>​    1.表达式：(将要匹配的值)取值为<strong>byte、short、int、char</strong>。<br><strong>JDK5</strong>以后可以是<strong>枚举</strong>，J<strong>DK7</strong>以后可以是<strong>Strin</strong>g。</p><ol start="2"><li>case:后面跟的是要和表达式进行比较的值（被匹配的值）。</li><li>break:表示中断，结束的意思，用来结束switch语句。</li><li>default:表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似。</li><li>case后面的值只能是字面量，不能是变量</li><li>case给出的值不允许重复.</li></ol><h4 id="1-4-3-switch的扩展知识："><a href="#1-4-3-switch的扩展知识：" class="headerlink" title="1.4.3 switch的扩展知识："></a>1.4.3 switch的扩展知识：</h4><ul><li><p>default的位置和省略情况</p><p>default可以放在任意位置，也可以省略</p></li><li><p>case穿透</p><p>不写break会引发case穿透现象</p></li><li><p><strong>switch在JDK12的新特性</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;二&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多个数对应一个执行性语句</span></span><br><span class="line"><span class="comment">int number = 10;</span></span><br><span class="line"><span class="comment">switch (number) &#123;</span></span><br><span class="line"><span class="comment">    case 1:</span></span><br><span class="line"><span class="comment">    case 2:</span></span><br><span class="line"><span class="comment">    case 3: System.out.println(&quot;一&quot;);</span></span><br><span class="line"><span class="comment">    case 5:</span></span><br><span class="line"><span class="comment">    case 7: System.out.println(&quot;二&quot;);</span></span><br><span class="line"><span class="comment">    case 9: System.out.println(&quot;三&quot;);</span></span><br><span class="line"><span class="comment">    default: System.out.println(&quot;其他&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">变成</span></span><br><span class="line"><span class="comment">int number = 10;</span></span><br><span class="line"><span class="comment">switch (number) &#123;</span></span><br><span class="line"><span class="comment">    case 1,2,3 -&gt; System.out.println(&quot;一&quot;);</span></span><br><span class="line"><span class="comment">    case 5,7 -&gt; System.out.println(&quot;二&quot;);</span></span><br><span class="line"><span class="comment">    case 9 -&gt; System.out.println(&quot;三&quot;);</span></span><br><span class="line"><span class="comment">    default -&gt; System.out.println(&quot;其他&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch和if第三种格式各自的使用场景</li></ul><p>当我们需要对一个范围进行判断的时候，用if的第三种格式</p><p>当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句</p><p>比如：</p><p>​    小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。</p><p>​    如果是星期，月份，客服电话中0~9的功能选择就可以用switch</p><h4 id="✨练习：休息日和工作日"><a href="#✨练习：休息日和工作日" class="headerlink" title="✨练习：休息日和工作日"></a>✨练习：休息日和工作日</h4><p>需求：键盘录入星期数，输出工作日、休息日。</p><p>(1-5) 工作日，(6-7)休息日。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入星期数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入星期&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//3</span></span><br><span class="line"><span class="comment">//2.利用switch进行匹配</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line">利用<span class="keyword">case</span>穿透简化代码</span><br><span class="line"><span class="keyword">switch</span> (week)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line">利用JDK12简化代码书写</span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2. 循环结构"></a>2. 循环结构</h2><h3 id="2-1-for-循环结构"><a href="#2-1-for-循环结构" class="headerlink" title="2.1 for 循环结构"></a>2.1 for 循环结构</h3><h4 id="2-1-1-for循环结构"><a href="#2-1-1-for循环结构" class="headerlink" title="2.1.1 for循环结构"></a>2.1.1 for循环结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式解释：</strong></p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul><p><strong>执行流程：</strong></p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p><p><strong>for循环书写技巧：</strong></p><ul><li>确定循环的开始条件</li><li>确定循环的结束条件</li><li>确定循环要重复执行的代码</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.确定循环的开始条件</span></span><br><span class="line"><span class="comment">//2.确定循环的结束条件</span></span><br><span class="line"><span class="comment">//3.确定要重复执行的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：打印5次HelloWorld</span></span><br><span class="line"><span class="comment">//开始条件：1</span></span><br><span class="line"><span class="comment">//结束条件：5</span></span><br><span class="line"><span class="comment">//重复代码：打印语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-求和和统计思想"><a href="#2-1-2-求和和统计思想" class="headerlink" title="2.1.2 求和和统计思想"></a>2.1.2 求和和统计思想</h3><h4 id="for循环练习-求和"><a href="#for循环练习-求和" class="headerlink" title="for循环练习-求和"></a>for循环练习-求和</h4><ul><li>需求：求1-5之间的数据和，并把求和结果在控制台输出  </li><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从1开始到5结束的数据，使用循环结构完成</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="comment">//将反复进行的事情写入循环结构内部</span></span><br><span class="line">             <span class="comment">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span></span><br><span class="line">sum = sum + i;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sum += i;sum = sum + i;</span></span><br><span class="line"><span class="comment">第一次：sum = sum + i = 0 + 1 = 1;</span></span><br><span class="line"><span class="comment">第二次：sum = sum + i = 1 + 2 = 3;</span></span><br><span class="line"><span class="comment">第三次：sum = sum + i = 3 + 3 = 6;</span></span><br><span class="line"><span class="comment">第四次：sum = sum + i = 6 + 4 = 10;</span></span><br><span class="line"><span class="comment">第五次：sum = sum + i = 10 + 5 = 15;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环执行完毕时，将最终数据打印出来</span></span><br><span class="line">System.out.println(<span class="string">&quot;1-5之间的数据和是：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>本题要点：<ul><li>今后遇到的需求中，如果带有求和二字，请立即联想到求和变量</li><li>求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的</li></ul></li></ul><h3 id="2-2-while循环"><a href="#2-2-while循环" class="headerlink" title="2.2 while循环"></a>2.2 while循环</h3><h4 id="2-2-1-格式"><a href="#2-2-1-格式" class="headerlink" title="2.2.1 格式"></a>2.2.1 格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1：打印5次HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><h3 id="2-3-do…while循环"><a href="#2-3-do…while循环" class="headerlink" title="2.3 do…while循环"></a>2.3 do…while循环</h3><h4 id="2-3-1-格式："><a href="#2-3-1-格式：" class="headerlink" title="2.3.1 格式："></a>2.3.1 格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure><h4 id="2-3-2-特点：先执行，再判断。"><a href="#2-3-2-特点：先执行，再判断。" class="headerlink" title="2.3.2 特点：先执行，再判断。"></a>2.3.2 特点：先执行，再判断。</h4><h3 id="2-3-3-三种格式的区别："><a href="#2-3-3-三种格式的区别：" class="headerlink" title="2.3.3 三种格式的区别："></a>2.3.3 三种格式的区别：</h3><p>​    1.for和while循环，是先判断，再执行。</p><p>​    2.do…while是先执行，再判断。</p><p>​    3.当知道循环次数或者循环范围的时候，用for循环。</p><p>​    4.当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。</p><h2 id="3-练习题"><a href="#3-练习题" class="headerlink" title="3. 练习题"></a>3. 练习题</h2><h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><p>需求：给你一个整数X。<br>如果X是一个回文整数，打印true,否则，返回false。<br>解释：回文数是指正序（从左向右）和倒序（从右向左)读都是一样的整数。<br>例如，121是回文，而123不是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span>x;</span><br><span class="line"><span class="keyword">while</span> (x!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x%<span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">num = num*<span class="number">10</span> + y;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num == tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求商和余数"><a href="#求商和余数" class="headerlink" title="求商和余数"></a>求商和余数</h3><p>需求：<br>给定两个整数，被除数和除数都是正数，且不超过int的范围<br>将两数相除，<strong>要求不使用乘法、除法和%运算符</strong>，得到商和余数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求商和余数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int a = 100;</span></span><br><span class="line"><span class="comment">int b = 10;</span></span><br><span class="line"><span class="comment">100 - 10 == 90</span></span><br><span class="line"><span class="comment">90 - 10 == 80</span></span><br><span class="line"><span class="comment">80 - 10 == 70</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">10 - 10 = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//被除数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">dividend</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//除数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">divisor</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(dividend&gt;=divisor) &#123;</span><br><span class="line">dividend -= divisor;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;商为&quot;</span>+count);</span><br><span class="line">System.out.println(<span class="string">&quot;余数为&quot;</span>+dividend);</span><br></pre></td></tr></table></figure><h2 id="4-循环高级综合练习"><a href="#4-循环高级综合练习" class="headerlink" title="4.循环高级综合练习"></a>4.循环高级综合练习</h2><h3 id="4-1-无限循环"><a href="#4-1-无限循环" class="headerlink" title="4.1 无限循环"></a>4.1 无限循环</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>​    又叫死循环。循环一直停不下来。</p><h4 id="for格式："><a href="#for格式：" class="headerlink" title="for格式："></a>for格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>初始化语句可以空着不写，表示循环之前不定义任何的控制变量。</p><p>条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。</p><p>条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。</p><h4 id="while格式："><a href="#while格式：" class="headerlink" title="while格式："></a>while格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>​    小括号里面就不能省略了，true一定要写出来，否则代码会报错。</p><h4 id="do…while格式："><a href="#do…while格式：" class="headerlink" title="do…while格式："></a>do…while格式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>解释：</p><p>​    小括号里面就不能省略了，true一定要写出来，否则代码会报错。</p><h3 id="无限循环的注意事项："><a href="#无限循环的注意事项：" class="headerlink" title="无限循环的注意事项："></a>无限循环的注意事项：</h3><ul><li><strong>最为常用的格式：while</strong></li><li><strong>无限循环下面不能再写其他代码了，因为永远执行不到。</strong></li></ul><h3 id="4-2-条件控制语句"><a href="#4-2-条件控制语句" class="headerlink" title="4.2  条件控制语句"></a>4.2  条件控制语句</h3><ul><li>break</li><li>continue</li></ul><h4 id="1-break"><a href="#1-break" class="headerlink" title="1.break:"></a>1.break:</h4><p>​    <strong>不能单独存在的。可以用在switch和循环中，==表示结束，跳出的意思。==</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    <span class="comment">//2.吃完第三个的时候就不吃了</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//结束整个循环。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-continue"><a href="#2-continue" class="headerlink" title="2.continue:"></a>2.continue:</h4><p>​    <strong>不能单独存在的。只能存在于循环当中。</strong></p><p>​    <strong>表示：==跳过本次循环==，继续执行下次循环。</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//2.第3个包子有虫子就跳过，继续吃下面的包子</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Random"><a href="#3-Random" class="headerlink" title="3. Random"></a>3. Random</h4><p><strong>Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。</strong></p><h5 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h5><ol><li><h6 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h6></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">导包的动作必须出现在类定义的上边。</span><br></pre></td></tr></table></figure><ol start="2"><li><h6 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h6></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span> ();</span><br><span class="line">上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。</span><br></pre></td></tr></table></figure><ol start="3"><li><h6 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h6></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围);</span><br><span class="line">上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。</span><br><span class="line">随机数范围的特点：从<span class="number">0</span>开始，不包含指定值。比如：参数为<span class="number">10</span>，生成的范围[<span class="number">0</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>求【8，10】的随机数</p><p>1.这个范围头尾都减去一个值，让这个范围从零开始。</p><p>2.尾巴加一。</p><p>3.最终结果再加上第一步减去的值。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//3.生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>);<span class="comment">//包左不包右，包头不包尾</span></span><br><span class="line">        <span class="comment">//0 ~ 99</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-猜数字小游戏"><a href="#4-3-猜数字小游戏" class="headerlink" title="4.3 猜数字小游戏"></a>4.3 猜数字小游戏</h3><p>需求：</p><p>​    程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？</p><p>要求：</p><p>​    使用循环猜，一直猜中为止。</p><p>思路分析：</p><ol><li>生成一个1-100之间的随机数</li><li>使用键盘录入去猜出这个数字是多少</li><li>把反复猜的代码写在循环中</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.生成一个1-100之间的随机数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">// 0 ~ 99 + 1 --- 1 ~ 100</span></span><br><span class="line">System.out.println(number);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用键盘录入去猜出这个数字是多少？</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">guessNumber</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">//3.比较</span></span><br><span class="line">    <span class="keyword">if</span>(guessNumber &gt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字大了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字小了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你，猜中了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java运算符</title>
      <link href="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1 算数运算符"></a>1 算数运算符</h2><h3 id="算数运算符类型"><a href="#算数运算符类型" class="headerlink" title="算数运算符类型"></a>算数运算符类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * /  %  <span class="comment">//加减乘除 取模或取余</span></span><br></pre></td></tr></table></figure><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2 + - *"></a>1.2 + - *</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// +</span></span><br><span class="line">System.out.println(<span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -</span></span><br><span class="line">System.out.println(<span class="number">3</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// * (shift + 数字8)</span></span><br><span class="line">System.out.println(<span class="number">3</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// / </span></span><br><span class="line">System.out.println(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果计算时候有小数参与 在代码中，如果有小数参与计算，结果可能不精确的</span></span><br><span class="line"><span class="comment">//具体原因：到了java.SE时候，会详细学习。</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> + <span class="number">1.1</span>); <span class="comment">// 2.2</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> + <span class="number">2</span>);  <span class="comment">// 3.1</span></span><br><span class="line">System.out.println(<span class="number">1.1</span> - <span class="number">1.01</span>);<span class="comment">// 0.09000000000000008</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p><em>==如果计算时候有小数参与 在代码中，如果有小数参与计算，结果可能不精确的.==</em><br>具体原因：到了java.SE时候，会详细学习。</p><h3 id="1-3-除法"><a href="#1-3-除法" class="headerlink" title="1.3 除法"></a>1.3 除法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除法</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">2</span>);<span class="comment">//5</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>); <span class="comment">//3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>整数参与 计算，结果只能是整数</p><p>==小数参与计算，结果可能存在不精确的，如果我们需要精确计算，那么需要用到后面的知识点。==</p><h3 id="1-4-取余-取模"><a href="#1-4-取余-取模" class="headerlink" title="1.4 取余 / 取模"></a>1.4 取余 / 取模</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取余</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>应用场景：</p><p>1.可以用来取模来判断 A是否能被Ｂ整除。</p><p>２.可以判断Ａ是否为偶数。</p><h3 id="练习：数值拆分"><a href="#练习：数值拆分" class="headerlink" title="练习：数值拆分"></a>练习：数值拆分</h3><p>需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.键盘录入一个三位数</span></span><br><span class="line"><span class="comment">//导包 --- 创建对象 --- 接收数据</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个三位数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取这个三位数的个位、十位、百位并打印出来</span></span><br><span class="line"><span class="comment">//公式：</span></span><br><span class="line"><span class="comment">//针对于任意的一个数而言</span></span><br><span class="line"><span class="comment">//个位： 数字 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ones</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//十位： 数字 / 10 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">tens</span> <span class="operator">=</span> number / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//百位： 数字 / 100 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hundreds</span> <span class="operator">=</span> number / <span class="number">100</span>  % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(ones);</span><br><span class="line">System.out.println(tens);</span><br><span class="line">System.out.println(hundreds);</span><br></pre></td></tr></table></figure><p>公式：</p><p>​    获取任意一个数上每一位数。</p><p>个位：数字 % 10</p><p>十位：数字 / 10 % 10</p><p>百位：数字 / 100 % 10</p><p>千位：数字 / 1000 % 10</p><p>。。。以此类推。。。</p><h3 id="１-５-隐式转换（自动类型提升）"><a href="#１-５-隐式转换（自动类型提升）" class="headerlink" title="１.５　隐式转换（自动类型提升）"></a>１.５　隐式转换（自动类型提升）</h3><p>数字进行数据运算时，数据类型不一样的不能运算，需要转换成一样的，才能运算。</p><h4 id="1-5-1-含义"><a href="#1-5-1-含义" class="headerlink" title="1.5.1 含义"></a>1.5.1 含义</h4><p>取值范围小的数值变成取值范围大的数值。</p><p>就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。</p><p>​        <strong>简单记忆：就是小的给大的，可以直接给。</strong></p><h4 id="1-5-2-两种提升规则："><a href="#1-5-2-两种提升规则：" class="headerlink" title="1.5.2 两种提升规则："></a>1.5.2 两种提升规则：</h4><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li><strong>==byte、short、char==三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。</strong></li></ul><h4 id="1-5-3-取值范围从小到大的关系："><a href="#1-5-3-取值范围从小到大的关系：" class="headerlink" title="1.5.3 取值范围从小到大的关系："></a>1.5.3 取值范围从小到大的关系：</h4><p>​    byte short int long float double</p><h4 id="1-5-4-注意点"><a href="#1-5-4-注意点" class="headerlink" title="1.5.4 注意点"></a>1.5.4 注意点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><p>这行代码会报错，等式右边是double型，不会随等号左边的数据类型变换，</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229212622718.png" alt="image-20221229212622718"> </p><h4 id="1-5-5-练习题"><a href="#1-5-5-练习题" class="headerlink" title="1.5.5 练习题"></a>1.5.5 练习题</h4><p>案例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(d);<span class="comment">//10.0</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​    10是整数，整数默认是int类型的。</p><p>​    而在取值范围的顺序中：byte short int long float double</p><p>​    在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。</p><p>案例五：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">result = b1 + b2;<span class="comment">//int</span></span><br><span class="line"><span class="comment">//问变量result是什么类型的？</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​    因为b1和b2都是byte类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。</p><h3 id="１-６-强制转换"><a href="#１-６-强制转换" class="headerlink" title="１.６　强制转换"></a>１.６　强制转换</h3><h4 id="1-6-1-概念"><a href="#1-6-1-概念" class="headerlink" title="1.6.1 概念"></a>1.6.1 概念</h4><p>取值范围大的变成取值范围小的</p><p>​    如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。</p><p>​    如果一定要这么干，就需要加入强制转换。</p><h4 id="1-6-2-书写格式："><a href="#1-6-2-书写格式：" class="headerlink" title="1.6.2 书写格式："></a>1.6.2 书写格式：</h4><p>​    目标数据类型 变量名 = （目标数据类型）被强转的数据；</p><p><strong>注意点：</strong></p><p>​    强制转换有可能会导致数据发生错误。（数据的精度丢失）</p><h3 id="1-7-字符串的-操作"><a href="#1-7-字符串的-操作" class="headerlink" title="1.7 字符串的+操作"></a>1.7 字符串的+操作</h3><h4 id="1-7-1核心操作"><a href="#1-7-1核心操作" class="headerlink" title="1.7.1核心操作"></a>1.7.1核心操作</h4><ul><li>当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。</li><li><strong>当连续进行+操作时，从左到右逐个执行的。</strong></li></ul><h4 id="1-7-2-练习题"><a href="#1-7-2-练习题" class="headerlink" title="1.7.2  练习题"></a>1.7.2  练习题</h4><p>案例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果：“3abc21”</p><p>解释：</p><p>​    第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。</p><p>​    第二步：3 + “abc”。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”3abc”。</p><p>​    第三步：”3abc” + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”3abc2”。</p><p>​    第四步：”3abc2” + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”</p><p>案例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;黑默丁格&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;我的名字是&quot;</span> + name);</span><br></pre></td></tr></table></figure><p>结果： 我的名字是黑默丁格</p><p>解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。</p><p>案例三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span>+<span class="number">2</span>+<span class="string">&quot;age&quot;</span>+<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//输出：“3agetrue”</span></span><br></pre></td></tr></table></figure><h3 id="1-8-字符相加"><a href="#1-8-字符相加" class="headerlink" title="1.8  字符相加"></a>1.8  字符相加</h3><h4 id="✨规则"><a href="#✨规则" class="headerlink" title="✨规则"></a>✨规则</h4><p>​        当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。</p><p><strong>案例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c + <span class="number">0</span>;</span><br><span class="line">System.out.println(result);<span class="comment">//97</span></span><br></pre></td></tr></table></figure><p>ASCII码表中：</p><p>​    ‘a’   —–    97</p><p>​    ‘A’   —–    65</p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">//输出：aage</span></span><br></pre></td></tr></table></figure><h3 id="总结-字符串只能进行加操作"><a href="#总结-字符串只能进行加操作" class="headerlink" title="总结 字符串只能进行加操作"></a>总结 字符串只能进行加操作</h3><h2 id="2-自增自减运算"><a href="#2-自增自减运算" class="headerlink" title="2 自增自减运算"></a>2 自增自减运算</h2><h3 id="2-1-分类："><a href="#2-1-分类：" class="headerlink" title="2.1 分类："></a>2.1 分类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">++  自增运算符</span><br><span class="line">--  自减运算符</span><br></pre></td></tr></table></figure><p>++：就是把变量里面的值+1</p><p>–：就是把变量里面的值-1</p><h3 id="2-2-使用方式："><a href="#2-2-使用方式：" class="headerlink" title="2.2 使用方式："></a>2.2 使用方式：</h3><ul><li>放在变量的前面，我们叫做先++。 比如：++a</li><li>放在变量的后面，我们叫做后++。 比如：a++</li></ul><h3 id="2-3-注意点："><a href="#2-3-注意点：" class="headerlink" title="2.3 注意点："></a>2.3 注意点：</h3><p>​    不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。</p><h3 id="2-4-案例："><a href="#2-4-案例：" class="headerlink" title="2.4 案例："></a>2.4 案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//++</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">a++;<span class="comment">//就是让变量a里面的值 + 1</span></span><br><span class="line">System.out.println(a);<span class="comment">//11</span></span><br><span class="line">++a;<span class="comment">//就是让变量a里面的值 + 1</span></span><br><span class="line">System.out.println(a);<span class="comment">//12</span></span><br></pre></td></tr></table></figure><h3 id="2-5-自增自减运算符的应用场景："><a href="#2-5-自增自减运算符的应用场景：" class="headerlink" title="2.5 自增自减运算符的应用场景："></a>2.5 自增自减运算符的应用场景：</h3><p>某些情况下，变量需要进行加1或者减1的时候使用。</p><p>比如：过生日多一岁，就用到了自增运算符。</p><p>比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。</p><p>比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。</p><h2 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h2><p>最为常用的：    =</p><p>运算过程：就是把等号右边的结果赋值给左边的变量</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.最为简单的赋值运算符用法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//就是把10赋值给变量a</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.如果等号右边需要进行计算。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;<span class="comment">//先计算等号右边的，把计算的结果赋值给左边的变量</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.特殊的用法</span></span><br><span class="line">        a = a + <span class="number">10</span>;<span class="comment">//先计算等号右边的，把计算的结果赋值给左边的变量</span></span><br><span class="line">        System.out.println(a);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展赋值运算符"><a href="#4-扩展赋值运算符" class="headerlink" title="4.扩展赋值运算符"></a>4.扩展赋值运算符</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>​    +=、-=、*=、/=、%=</p><h3 id="运算规则："><a href="#运算规则：" class="headerlink" title="运算规则："></a>运算规则：</h3><p>​    就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//扩展赋值运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        a += b;<span class="comment">//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响</span></span><br><span class="line">        <span class="comment">// 相当于 a = a + b;</span></span><br><span class="line">        System.out.println(a);<span class="comment">//30</span></span><br><span class="line">        System.out.println(b);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点：-扩展的赋值运算符中底层还包含了一个强制转换-。"><a href="#注意点：-扩展的赋值运算符中底层还包含了一个强制转换-。" class="headerlink" title="注意点：**==扩展的赋值运算符中底层还包含了一个强制转换==。**"></a>注意点：**==扩展的赋值运算符中底层还包含了一个强制转换==。**</h3><p>以+=为例。</p><p><strong>a += b ;实际上相当于 a = (byte)(a + b);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//a += b;</span></span><br><span class="line">        a = (<span class="type">byte</span>)(a + b);</span><br><span class="line">        System.out.println(a);<span class="comment">//30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-关系运算符"><a href="#5-关系运算符" class="headerlink" title="5.关系运算符"></a>5.关系运算符</h1><p>又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。</p><h3 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h3><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>==</td><td>就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>!=</td><td>就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;</td><td>就是判断左边是否大于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&gt;=</td><td>就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;</td><td>就是判断左边是否小于右边，如果成立就是true，如果不成立就是false</td></tr><tr><td>&lt;=</td><td>就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false</td></tr></tbody></table><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>关系运算符最终的结果一定是布尔类型的。要么是true，要么是false</li><li>在写==的时候，千万不要写成=</li></ul><h2 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6.逻辑运算符"></a>6.逻辑运算符</h2><h3 id="6-1-amp-和-的使用："><a href="#6-1-amp-和-的使用：" class="headerlink" title="6.1 &amp; 和 | 的使用："></a>6.1 &amp; 和 | 的使用：</h3><p>&amp;：逻辑与（而且）</p><p>​    两边都为真，结果才是真，只要有一个为假，那么结果就是假。</p><p>|：逻辑或（或者）</p><p>​    两边都为假，结果才是假，只要有一个为真，那么结果就是真。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp;  //两边都是真，结果才是真。</span></span><br><span class="line">System.out.println(<span class="literal">true</span> &amp; <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> &amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> &amp; <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">false</span> &amp; <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// | 或  //两边都是假，结果才是假，如果有一个为真，那么结果就是真。</span></span><br><span class="line">System.out.println(<span class="literal">true</span> | <span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> | <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> | <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> | <span class="literal">true</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="6-2-使用场景："><a href="#6-2-使用场景：" class="headerlink" title="6.2 使用场景："></a>6.2 使用场景：</h3><p>​    根据固定的场景，来选择使用&amp;还是使用|</p><ul><li><p>用户登录。</p><p>用户名输入正确  &amp; 密码输入正确</p><p>因为只有用户名和密码同时都正确了，那么才能成功登录，只要有一个失败了都不行。</p><p>使用技巧：</p><p>​    当我们需要同时满足左边和右边两种情况时，可以使用且</p></li><li><p>丈母娘选女婿</p><p>丈母娘：女婿啊，你要么买个房子，要么买辆车。就可以把我的小棉袄穿走了。</p><p>买个房子 | 买辆车</p><p>两个条件中，只要满足其中一个，就可以穿走小棉袄了。</p><p>使用技巧：</p><p>​    当两种条件只要满足其中一个的时候，可以使用或</p></li></ul><h3 id="6-3-（异或）的使用："><a href="#6-3-（异或）的使用：" class="headerlink" title="6.3 ^（异或）的使用："></a>6.3 ^（异或）的使用：</h3><p>​    在以后用的不多，了解一下即可。</p><p>计算规则：如果两边相同，结果为false，如果两边不同，结果为true</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//^   //左右不相同，结果才是true，左右相同结果就是false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="literal">true</span> ^ <span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="literal">false</span> ^ <span class="literal">true</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="6-4-（取反）的使用："><a href="#6-4-（取反）的使用：" class="headerlink" title="6.4 !（取反）的使用："></a>6.4 !（取反）的使用：</h3><p>​    是取反，也叫做非。</p><p>计算规则：false取反就是true，true取反就是false</p><p>温馨提示：<strong>取反最多只用一个。</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(!<span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(!<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(!!<span class="literal">false</span>);<span class="comment">//注意点：取反最多只用一个。</span></span><br></pre></td></tr></table></figure><h1 id="7-短路逻辑运算符"><a href="#7-短路逻辑运算符" class="headerlink" title="7.短路逻辑运算符"></a>7.短路逻辑运算符</h1><p>分类：  &amp;&amp;   ||</p><h3 id="amp-amp-："><a href="#amp-amp-：" class="headerlink" title="&amp;&amp;："></a>&amp;&amp;：</h3><p>​    运算结果跟&amp;是一模一样的，只不过具有短路效果。</p><h3 id="："><a href="#：" class="headerlink" title="||："></a>||：</h3><p>​    运算结果跟|是一模一样的。只不过具有短路效果。</p><h3 id="逻辑核心："><a href="#逻辑核心：" class="headerlink" title="逻辑核心："></a>逻辑核心：</h3><p>​    <strong>当左边不能确定整个表达式的结果，右边才会执行。</strong></p><p>​    <strong>当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。</strong></p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a><strong>举例：</strong></h3><ul><li><p>用户登录案例</p><p>用户名正确  &amp; 密码正确</p><p>如果使用一个&amp;，不管用户名是否正确都会去验证密码。</p></li></ul><p>思考：</p><p>​    如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。</p><p>​    但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。</p><p>​    如果使用一个&amp;，那么左边和右边不管什么情况下，都会执行。</p><p>​    用户名正确  &amp;&amp;  密码正确</p><p>​    如果用户名输入正确了，那么才会验证密码是否输入正确。</p><p>​    如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。</p><ul><li><p>丈母娘选女婿</p><p>有房 |  有车</p><p>首先先看看有没有房，发现有，然后再去看看有没有车。</p></li></ul><p>思考：</p><p>​    既然都有房子，干嘛还要去看车呢？多此一举。</p><p>​    有房 ||  有车</p><p>​    首先先看看有没有房，如果有，那么右边就不执行了。最终的结果直接为true。</p><p>​    如果没有房子，才会去看右边有没有车。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>​    &amp;&amp; 和 &amp; 、||和|的运行结果都是一模一样的。</p><p>​    但是短路逻辑运算符可以提高程序的运行效率。</p><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><p>​    最为常用： &amp;&amp;   ||   ！</p><h2 id="8-三元运算符"><a href="#8-三元运算符" class="headerlink" title="8. 三元运算符"></a>8. 三元运算符</h2><p>又叫做：三元表达式或者问号冒号表达式。</p><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>​    关系表达式 ？ 表达式1 ：表达式2 ；</p><h3 id="计算规则："><a href="#计算规则：" class="headerlink" title="计算规则："></a>计算规则：</h3><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li></ul><h3 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h3><p>​    三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</p><h3 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：求两个数的较大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="comment">//三元运算符的最终结果一定要被使用。</span></span><br><span class="line">        <span class="comment">//要么赋值给一个变量，要么直接输出。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span>  a &gt; b ? a : b ;</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; b ? a : b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-运算符的优先级"><a href="#9-运算符的优先级" class="headerlink" title="9. 运算符的优先级"></a>9. 运算符的优先级</h2><p>在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。</p><p>咱们只要知道其中一点：</p><p>​    小括号优先于所有。</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229215349595.png" alt="image-20221229215349595"></p><h2 id="10-原码-补码-反码"><a href="#10-原码-补码-反码" class="headerlink" title="10. 原码 补码 反码"></a>10. 原码 补码 反码</h2><p><strong>原码</strong>：十进制数据的二进制表现形式，<strong>最左边是符号位，0为正，1为负</strong></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229215621232.png" alt="image-20221229215621232"></p><h3 id="一个字节：8个bit（字节）"><a href="#一个字节：8个bit（字节）" class="headerlink" title="一个字节：8个bit（字节）"></a>一个字节：8个bit（字节）</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229215817969.png" alt="image-20221229215817969"></p><p>原码的弊端</p><p>​    1.当是-1时，</p><p>反码：为了解决原码不能计算负数的问题而出现的。<br>计算规则：正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1,1变0.</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220247847.png" alt="image-20221229220247847"></p><p>-56 +  1</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220326296.png" alt="-56+1"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220354117.png" alt="-55原码"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220418614.png" alt="-55反码"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220557517.png" alt="image-20221229220557517"></p><p>然而,当-1 + 1 时,反码:1111 1111 再加 1 反码:0000 0000 还是0</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229220719880.png" alt="image-20221229220719880"></p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a><strong>原码</strong></h3><p>十进制数据的二进制表现形式，最左边是符号位，0为正，1为负。<br>原码的弊端<br>利用原码进行计算的时候，如果是正数完全没有问题。<br>但是如果是负数计算，结果就出错，实际运算的方向，跟正确的运算方向是相反的。</p><h3 id="反码出现的目的"><a href="#反码出现的目的" class="headerlink" title="反码出现的目的"></a>反码出现的目的</h3><p>为了解决原码不能计算负数的问题而出现的。<br>反码的计算规则<br>正数的反码不变，负数的反码在原码的基础上，符不颈，缴值取反，0变1,1变0。<br>反码的弊端<br>负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0，跟实际结果会有1的偏差。</p><h3 id="补码出现的目的"><a href="#补码出现的目的" class="headerlink" title="补码出现的目的"></a>补码出现的目的</h3><p>为了解决负数计算时跨0的问题而出现的。<br>补码的计算规则<br>正数的补码不变，负数的补码在反码的基础上+1。<br>另外补码还能多记录一个特殊的值-128，该数据在1个字节下，没有原码和反码。<br>补码的注意点<br><strong>计算机中的存储和计算都是以补码的形式进行的。</strong></p><p>基本的数据类型</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221053474.png" alt="image-20221229221053474"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221145191.png" alt="前面补零"></p><p>强制转换，砍掉前面多余的位，正负，由保留下来的最高位代替。</p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221411830.png" alt="砍前面的字节(砍掉的不一定是0)"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221510263.png" alt="image-20221229221510263"></p><h3 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221640918.png" alt="image-20221229221640918"></p><h3 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或 |"></a>逻辑或 |</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221704371.png" alt="image-20221229221704371"></p><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221748965.png" alt="image-20221229221748965"></p><h3 id="右移-正数补零-负数补一"><a href="#右移-正数补零-负数补一" class="headerlink" title="右移:正数补零,负数补一"></a>右移:<strong>正数补零,负数补一</strong></h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221920981.png" alt="image-20221229221920981"></p><h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3><p><img src="/2022/12/28/java%E8%BF%90%E7%AE%97%E7%AC%A6/image-20221229221937698.png" alt="image-20221229221937698"></p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Junit_测试概述</title>
      <link href="/2022/12/28/Junit-%E6%B5%8B%E8%AF%95%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/12/28/Junit-%E6%B5%8B%E8%AF%95%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea</title>
      <link href="/2022/12/28/idea/"/>
      <url>/2022/12/28/idea/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="8-IDEA"><a href="#8-IDEA" class="headerlink" title="8. IDEA"></a>8. IDEA</h2><h3 id="8-1-IDEA概述"><a href="#8-1-IDEA概述" class="headerlink" title="8.1 IDEA概述"></a>8.1 IDEA概述</h3><p>​    IDEA全称IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。</p><p><strong>集成环境：</strong></p><p>​    把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p><h3 id="8-2-IDEA的下载和安装"><a href="#8-2-IDEA的下载和安装" class="headerlink" title="8.2 IDEA的下载和安装"></a>8.2 IDEA的下载和安装</h3><h4 id="8-2-1-下载"><a href="#8-2-1-下载" class="headerlink" title="8.2.1 下载"></a>8.2.1 下载</h4><p>​    可以到官方网站自行下载，网址为：<a href="https://www.jetbrains.com/idea">https://www.jetbrains.com/idea</a></p><p>​    今天的资料中，对应的安装包也提高给大家了。</p><h4 id="8-2-2-安装"><a href="#8-2-2-安装" class="headerlink" title="8.2.2 安装"></a>8.2.2 安装</h4><ul><li>到资料文件夹中，双击安装包。</li><li>点击next，准备安装</li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%851.png" alt="计算机发展"></p><ul><li><p>点击Browse修改安装路径。</p><p>修改完毕点击next</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%852.png" alt="计算机发展"></p><ul><li><p>勾选64-bit launcher。表示在桌面新建一个64位的快捷方式。</p><p>其他的不要勾选。</p><p>点击next。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%854.png" alt="计算机发展"></p><ul><li>点击Install，准备安装。</li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%855.png" alt="计算机发展"></p><ul><li><p>等进度条读取完毕之后，会有最终界面提示。</p><p>点击finish即可。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%856.png" alt="计算机发展"></p><ul><li><p>第一次启动会询问，是否导入一些设置。</p><p>选择第二个不导入，保持默认设置，再点击OK。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%857.png" alt="计算机发展"></p><ul><li><p>选择背景主题</p><p>左边是黑色背景。右边是白色背景。</p><p>这个可以根据自己的喜好来选择。</p><p>选择完毕点击右下角的next</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%858.png" alt="计算机发展"></p><ul><li><p>在本界面让我们购买idea。</p><p>因为我们是学习阶段，所以可以使用免费使用30天。</p><p>点击第一排第二个。Evaluate for free</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%859.png" alt="计算机发展"></p><ul><li>点击蓝色的Evaluate，就可以开始免费试用30天了。</li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%8510.png" alt="计算机发展"></p><ul><li><p>当看到这个界面，就表示idea已经成功安装完毕</p><p>可以点击右上角关闭。</p></li></ul><p><img src="/2022/12/28/idea/idea%E5%AE%89%E8%A3%8511.png" alt="计算机发展"></p><h3 id="8-3-IDEA中层级结构介绍"><a href="#8-3-IDEA中层级结构介绍" class="headerlink" title="8.3 IDEA中层级结构介绍"></a>8.3 IDEA中层级结构介绍</h3><h4 id="8-3-1-结构分类"><a href="#8-3-1-结构分类" class="headerlink" title="8.3.1 结构分类"></a>8.3.1 结构分类</h4><ul><li>project（项目、工程）</li><li>module（模块）</li><li>package（包）</li><li>class（类）</li></ul><h4 id="8-3-2-结构介绍"><a href="#8-3-2-结构介绍" class="headerlink" title="8.3.2 结构介绍"></a>8.3.2 结构介绍</h4><p>​    为了让大家更好的吸收，package这一层级，我们后面再学习，先学习最基础的project、module、class。</p><h5 id="project（项目、工程）"><a href="#project（项目、工程）" class="headerlink" title="project（项目、工程）"></a>project（项目、工程）</h5><p>​    淘宝、京东、黑马程序员网站都属于一个个项目，IDEA中就是一个个的Project。</p><h5 id="module（模块）"><a href="#module（模块）" class="headerlink" title="module（模块）"></a>module（模块）</h5><p>​    在一个项目中，可以存放多个模块，不同的模块可以存放项目中不同的业务功能代码。在黑马程序员的官方网站中，至少包含了以下模块：</p><ul><li>论坛模块</li><li>报名、咨询模块</li></ul><p>为了更好的管理代码，我们会把代码分别放在两个模块中存放。</p><h5 id="package（包）"><a href="#package（包）" class="headerlink" title="package（包）"></a>package（包）</h5><p>​    一个模块中又有很多的业务，以黑马程序员官方网站的论坛模块为例，至少包含了以下不同的业务。</p><ul><li>发帖</li><li>评论</li></ul><p>为了把这些业务区分的更加清楚，就会用包来管理这些不同的业务。</p><h5 id="class（类）"><a href="#class（类）" class="headerlink" title="class（类）"></a>class（类）</h5><p>​    就是真正写代码的地方。</p><h4 id="8-3-3-小结"><a href="#8-3-3-小结" class="headerlink" title="8.3.3 小结"></a>8.3.3 小结</h4><ul><li><p>层级关系</p><p>​    project - module - package - class</p></li><li><p>包含数量</p><p>​    project中可以创建多个module<br>​    module中可以创建多个package<br>​    package中可以创建多个class</p><p>​    这些结构的划分，是为了方便管理类文件的。</p></li></ul><h3 id="8-4-IDEA中的第一个代码"><a href="#8-4-IDEA中的第一个代码" class="headerlink" title="8.4 IDEA中的第一个代码"></a>8.4 IDEA中的第一个代码</h3><h5 id="8-4-1-操作步骤"><a href="#8-4-1-操作步骤" class="headerlink" title="8.4.1 操作步骤"></a>8.4.1 操作步骤</h5><ul><li>创建Project 项目</li><li>创建Module 模块</li><li>创建class   类</li><li>在类中编写代码</li><li>完成编译运行</li></ul><h5 id="8-4-2-分步图解"><a href="#8-4-2-分步图解" class="headerlink" title="8.4.2 分步图解"></a>8.4.2 分步图解</h5><ul><li><p>双击启动图标</p><p><img src="/2022/12/28/idea/idea%E4%BD%BF%E7%94%A81.png" alt="计算机发展"></p></li><li><p>首先要新建一个项目</p><p>点击creat new project</p><p><img src="/2022/12/28/idea/idea1.png" alt="计算机发展"></p></li><li><p>我们要从0开始写代码，所以新建一个空的什么都没有的项目。</p><p>点击左下方的Empty Project</p><p>再点击右下角的next</p></li></ul><p><img src="/2022/12/28/idea/idea2.png" alt="计算机发展"></p><ul><li><p>输入项目的名称</p><p>输入项目的存放路径</p></li></ul><p><img src="/2022/12/28/idea/idea3.png" alt="计算机发展"></p><ul><li>点击ok。idea会帮助我们在本地创建一个项目文件夹</li></ul><p><img src="/2022/12/28/idea/idea4.png" alt="计算机发展"></p><ul><li>点击Module，准备新建一个模块</li></ul><p><img src="/2022/12/28/idea/idea5.png" alt="计算机发展"></p><ul><li><p>点击+</p><p>再点击New Module</p></li></ul><p><img src="/2022/12/28/idea/idea6.png" alt="计算机发展"></p><ul><li><p>我们要编写Java代码，所以要新建一个Java模块。</p><p>点击Java</p><p>再点击右下角的next</p></li></ul><p><img src="/2022/12/28/idea/idea7.png" alt="计算机发展"></p><ul><li><p>输入模块的名称</p><p>再点击右下角的Next</p></li></ul><p><img src="/2022/12/28/idea/idea8.png" alt="计算机发展"></p><ul><li><p>成功新建一个模块之后，中间就会出现刚刚新建的模块</p><p>点击右下角的OK</p></li></ul><p><img src="/2022/12/28/idea/idea9.png" alt="计算机发展"></p><ul><li><p>回到主界面</p><p>展开刚刚新建的模块</p><p>右键点击src，选择New，选择Java Class</p></li></ul><p><img src="/2022/12/28/idea/idea10.png" alt="计算机发展"></p><ul><li><p>输入类名</p><p>再按回车</p></li></ul><p><img src="/2022/12/28/idea/idea11.png" alt="计算机发展"></p><ul><li><p>由于字体比较小</p><p>所以，我们要设置一下字体。</p><p>点击File，选择Setting。</p></li></ul><p><img src="/2022/12/28/idea/idea12.png" alt="计算机发展"></p><ul><li><p>搜索一下font</p><p>在右边可以输入Size的数值来调节代码字体的大小。</p><p>设置完毕后点击右下角的OK</p></li></ul><p><img src="/2022/12/28/idea/idea13.png" alt="计算机发展"></p><ul><li>编写代码</li></ul><p><img src="/2022/12/28/idea/idea14.png" alt="计算机发展"></p><ul><li><p>运行代码</p><p>右键空白处，点击Run</p></li></ul><p><img src="/2022/12/28/idea/idea15.png" alt="计算机发展"></p><ul><li><p>最下面会弹出控制台。</p><p>所有输出语句中的内容，都会在控制台上展示。</p></li></ul><p><img src="/2022/12/28/idea/idea16.png" alt="计算机发展"></p><h3 id="8-5-IDEA中类的相关操作"><a href="#8-5-IDEA中类的相关操作" class="headerlink" title="8.5 IDEA中类的相关操作"></a>8.5 IDEA中类的相关操作</h3><h4 id="8-5-1-类的相关操作"><a href="#8-5-1-类的相关操作" class="headerlink" title="8.5.1 类的相关操作"></a>8.5.1 类的相关操作</h4><ul><li>新建类文件</li><li>删除类文件</li><li>修改类文件</li></ul><h4 id="8-5-2-新建类文件"><a href="#8-5-2-新建类文件" class="headerlink" title="8.5.2 新建类文件"></a>8.5.2 新建类文件</h4><ul><li><p>所有的Java代码都会写在src文件夹当中。</p><p>所以，右键点击src，选择new，点击Java Class</p><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E7%B1%BB1.png" alt="计算机发展"></p></li><li><p>输入类名，再按回车</p><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E7%B1%BB2.png" alt="计算机发展"></p></li><li><p>新建完毕</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E7%B1%BB3.png" alt="计算机发展"></p><h4 id="8-5-3-修改类名"><a href="#8-5-3-修改类名" class="headerlink" title="8.5.3 修改类名"></a>8.5.3 修改类名</h4><ul><li><p>右键点击想要修改的文件</p><p>点击Refactor</p><p>再点击Rename</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D1.png" alt="计算机发展"></p><ul><li><p>输入想要修改的名字</p><p>输入完毕点击下面的Refactor</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D2.png" alt="计算机发展"></p><ul><li><p>文件名和类名均已修改成功</p><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D3.png" alt="计算机发展"></p></li></ul><h4 id="8-5-4-删除类文件"><a href="#8-5-4-删除类文件" class="headerlink" title="8.5.4 删除类文件"></a>8.5.4 删除类文件</h4><ul><li><p>想要删除哪个文件，就右键点击该文件</p><p>选择Delete即可</p></li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E7%B1%BB%E6%96%87%E4%BB%B61.png" alt="计算机发展"></p><ul><li>在弹出的界面中点击OK，确定删除</li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E7%B1%BB%E6%96%87%E4%BB%B62.png" alt="计算机发展"></p><blockquote><p>小贴士：</p><p>此时删除是不走回收站的，直接从硬盘中删掉了。</p></blockquote><h3 id="8-6-IDEA中模块的相关操作"><a href="#8-6-IDEA中模块的相关操作" class="headerlink" title="8.6 IDEA中模块的相关操作"></a>8.6 IDEA中模块的相关操作</h3><h4 id="8-6-1-模块的相关操作"><a href="#8-6-1-模块的相关操作" class="headerlink" title="8.6.1 模块的相关操作"></a>8.6.1 模块的相关操作</h4><ul><li>新建模块</li><li>删除模块</li><li>修改模块</li><li>导入模块</li></ul><h4 id="8-6-2-新建模块"><a href="#8-6-2-新建模块" class="headerlink" title="8.6.2 新建模块"></a>8.6.2 新建模块</h4><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li>选择Module</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li><p>点击+</p><p>选择New Module</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><ul><li><p>要创建一个Java模块，所以选择第一个Java</p><p>点击右下角的Next</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%974.png" alt="计算机发展"></p><ul><li><p>输入模块的名称</p><p>点击右下角的Finish</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%975.png" alt="计算机发展"></p><ul><li><p>成功新建完毕之后，在中间空白区域就出现了刚刚新建的模块</p><p>点击右下角的OK</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%976.png" alt="计算机发展"></p><ul><li>在主界面中，也会出现刚刚新建的模块</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%977.png" alt="计算机发展"></p><h4 id="8-6-3-删除模块"><a href="#8-6-3-删除模块" class="headerlink" title="8.6.3 删除模块"></a>8.6.3 删除模块</h4><ul><li><p>右键点击模块</p><p>选择Remove Module</p></li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li>选择Remove，表示确定删除</li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li>此时发现，在IDEA列表页面，删除的模块已经不在了。</li></ul><p><img src="/2022/12/28/idea/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><blockquote><p>小贴士：</p><p>此时删除仅仅是从IDEA列表中的删除，在本地硬盘中还是存在的。</p></blockquote><h4 id="8-6-4-修改模块"><a href="#8-6-4-修改模块" class="headerlink" title="8.6.4 修改模块"></a>8.6.4 修改模块</h4><ul><li><p>右键点击模块名</p><p>选择Refactor</p><p>再选择Rename</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D1.png" alt="计算机发展"></p><ul><li><p>选择第三个修改模块名和本地文件夹名</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D3.png" alt="计算机发展"></p><ul><li><p>输入要修改的新的模块名</p><p>输入完毕点击Refactor</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D4.png" alt="计算机发展"></p><ul><li>回到主界面，就发现模块名和文件夹名都已经修改完毕</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D5.png" alt="计算机发展"></p><h4 id="8-6-5-导入模块"><a href="#8-6-5-导入模块" class="headerlink" title="8.6.5 导入模块"></a>8.6.5 导入模块</h4><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li><p>选择Module</p><p>点击+</p><p>选择Import Module</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li><p>从本地硬盘中选择要导入的模块</p><p>再点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><ul><li>不断点击Next</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%974.png" alt="计算机发展"></p><ul><li><p>如果中间出现提示框，则点击Overwrite</p><p>然后继续点击右下角的Next</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%975.png" alt="计算机发展"></p><ul><li>一直点到finish为止</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%976.png" alt="计算机发展"></p><ul><li>成功导入后，在中间位置就会出现导入的模块信息</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%977.png" alt="计算机发展"></p><ul><li>在主界面中也会出现导入的模块信息</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%978.png" alt="计算机发展"></p><ul><li><p>展开模块点击模块中的Java文件，会发现代码报错。</p><p>是因为导入模块跟JDK没有关联导致。</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%979.png" alt="计算机发展"></p><ul><li><p>可以点击右上角的Setup SDK</p><p>再选择已经安装的JDK版本即可</p></li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9710.png" alt="计算机发展"></p><ul><li>导入完毕之后，代码就恢复正常不会报错了</li></ul><p><img src="/2022/12/28/idea/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9711.png" alt="计算机发展"></p><h3 id="8-7-IDEA中项目的相关操作"><a href="#8-7-IDEA中项目的相关操作" class="headerlink" title="8.7 IDEA中项目的相关操作"></a>8.7 IDEA中项目的相关操作</h3><h4 id="8-7-1-项目的相关操作"><a href="#8-7-1-项目的相关操作" class="headerlink" title="8.7.1 项目的相关操作"></a>8.7.1 项目的相关操作</h4><ul><li>关闭项目</li><li>打开项目</li><li>修改项目</li><li>新建项目</li></ul><h4 id="8-7-2-关闭项目"><a href="#8-7-2-关闭项目" class="headerlink" title="8.7.2 关闭项目"></a>8.7.2 关闭项目</h4><ul><li>点击File，选择Close Project即可</li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>刚刚操作的项目就已经关闭了</p><p>左侧是项目列表，如果要再次打开该项目，直接点击即可。</p><p>右侧有create new project，可以再建一个新的项目</p></li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li><p>鼠标放在项目上，后面会出现一个叉。</p><p>如果点击了这里的叉，会在IDEA的列表中删除。不会删除本地硬盘上的项目。</p></li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><h4 id="8-7-3-打开项目"><a href="#8-7-3-打开项目" class="headerlink" title="8.7.3 打开项目"></a>8.7.3 打开项目</h4><ul><li><p>在本界面还可以打开本地已经存在的项目</p><p>点击Open or Import</p></li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>选择要打开的项目</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li>项目就被打开了。</li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><h4 id="8-7-4-修改项目"><a href="#8-7-4-修改项目" class="headerlink" title="8.7.4 修改项目"></a>8.7.4 修改项目</h4><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>在这个界面，默认是Module</p><p>所以，要先点击Project</p><p>在右侧页面中，输入新的项目名称</p><p>修改JDK版本和编译版本都变成JDK14</p><p>再点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li>此时发现，项目名称已经修改完毕</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li>但是本地文件夹的名字还没有修改</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE4.png" alt="计算机发展"></p><ul><li>需要先关闭当前项目</li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li>点击项目后面的叉，从列表中移除项目</li></ul><p><img src="/2022/12/28/idea/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li>到本地硬盘中手动修改文件夹的名称</li></ul><p> <img src="F:/JavaSE%E6%9C%80%E6%96%B0%E7%89%88/day02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E7%AC%94%E8%AE%B0/img/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE5.png" alt="计算机发展"></p><ul><li>点击Open or Import重新打开项目</li></ul><p><img src="/2022/12/28/idea/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>选择修改之后的项目</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE6.png" alt="计算机发展"></p><ul><li>此时会发现，项目名称和本地硬盘文件夹的名称都已经修改完毕了</li></ul><p><img src="/2022/12/28/idea/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE7.png" alt="计算机发展"></p><h4 id="8-7-5-新建项目"><a href="#8-7-5-新建项目" class="headerlink" title="8.7.5 新建项目"></a>8.7.5 新建项目</h4><ul><li><p>点击File</p><p>选择New</p><p>点击Project</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li>同样还是创建一个什么都没有的空项目</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li><p>输入项目的名称</p><p>点击右下角的finish</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li><p>IDEA循环是否需要帮我们在本地创建一个新的文件夹</p><p>点击OK</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE4.png" alt="计算机发展"></p><ul><li><p>询问是在本窗口打开还是在一个新的窗口打开。</p><p>可以点击New Window，在一个新的窗口打开。</p></li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE5.png" alt="计算机发展"></p><ul><li>此时就出现了两个窗口，在一个新的窗口打开了新的项目</li></ul><p><img src="/2022/12/28/idea/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE6.png" alt="计算机发展"></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>1.快速定义变量</p><p><img src="/2022/12/28/idea/image-20230103223445694.png" alt="image-20230103223445694"></p><p>ctrl + alt + v</p><p>或者alt + 回车</p><p>2.for循环快速写法</p><p>String类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">str.length().forr  <span class="comment">//出现逆遍历</span></span><br><span class="line">str.length().fori  <span class="comment">//出现遍历</span></span><br><span class="line">    s</span><br></pre></td></tr></table></figure><p>3.输入psvm即可打印出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.ctrl + d</p><p>向下复制一行</p><p>5.Alt + 左键   或者  按滚轮，拖动鼠标</p><p>实现，一竖列的修改</p><p><img src="/2022/12/28/idea/image-20230108200421178.png" alt="image-20230108200421178"></p><p>6.sout </p><p>sout 是System.out.println()的简写。</p><p>7.方法重写时，只要写出方法名就有快捷方式。</p><p><img src="/2022/12/28/idea/image-20230113204400705.png" alt="image-20230113204400705"></p><p>8 导入项目</p><p><img src="/image-20230114204344635.png" alt="image-20230114204344635"></p><p>点.iml </p><p>9.ctrl + shift + U 大小写转换</p><p>修改</p><p>IDEA打开终端报错Cannot open Local Terminal</p><p><img src="/image-20230118210703771.png" alt="image-20230118210703771"></p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h1><p>打开右上角 文件–&gt; 设置–&gt; 工具–&gt; 终端 找到Shell路劲文本框中是<a href="https://so.csdn.net/so/search?q=powershell&spm=1001.2101.3001.7020">powershell</a>.exe文件，修改成cmd.exe文件即可，<img src="/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARW1tYUNodWFu,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-人机交互"><a href="#1-人机交互" class="headerlink" title="1.人机交互"></a>1.人机交互</h2><h3 id="1-1什么是cmd"><a href="#1-1什么是cmd" class="headerlink" title="1.1什么是cmd"></a>1.1什么是cmd</h3><p>在windows操作系统中，利用命令行方式去操作计算机。</p><p>我们可以命令行去操作计算机，例：打开文件，打开文件夹，创建文件夹等等。</p><h3 id="1-2-如何打开CMD窗口"><a href="#1-2-如何打开CMD窗口" class="headerlink" title="1.2 如何打开CMD窗口"></a>1.2 如何打开CMD窗口</h3><p>​    1.按下快捷键win + R，此时会出现运行窗口</p><p>​    2.在运行窗口输入cmd，回车。</p><img src="image-20221227203420241.png" alt="image-20221227203420241" style="zoom:50%;" /><p><strong>解惑</strong>：</p><p>​    cmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名）</p><h3 id="1-3常用的cmd命令"><a href="#1-3常用的cmd命令" class="headerlink" title="1.3常用的cmd命令"></a>1.3常用的cmd命令</h3><p> 扩展一个小点：</p><p>​    在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。</p><p>​    而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。</p><p>常见的CMD命令如下：</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2...</td><td>进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h3 id="1-4-cmd练习"><a href="#1-4-cmd练习" class="headerlink" title="1.4 cmd练习"></a>1.4 cmd练习</h3><p>需求：利用cmd打开qq</p><p>完成步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1,确定自己电脑上的QQ安装在哪里</span><br><span class="line">2,启动cmd</span><br><span class="line">3,进入到启动程序QQ.exe所在的路径。</span><br><span class="line">4,输出qq.exe加回车表示启动qq。</span><br></pre></td></tr></table></figure><p><strong>解惑</strong>：</p><p>​    在windows操作系统当中，文件名或者文件夹名是忽略大小写的。</p><h3 id="1-5-🎇环境变量"><a href="#1-5-🎇环境变量" class="headerlink" title="1.5 🎇环境变量"></a>1.5 🎇环境变量</h3><p>作用：</p><p>​        <em>如果我想要在CMD的任意目录下，都可以启动某一个软件，那么就可以把这个软件的路径配置到环境变量中的PATH里面。</em></p><p>​        在启动软件的时候，操作系统会先在当前路径下找，如果在当前录课没有再到环境变量的路径中去找。如果都找不到就提示无法启动。</p><p>步骤：</p><ul><li>右键我的电脑，选择属性。</li><li>点击左侧的高级系统设置</li><li>选择高级，再点击下面的环境变量。</li><li>找系统变量里面的PATH</li><li>把软件的完整路径，配置到PATH当中就可以了。</li><li>（可做可不做）就是把自己配置的路径，移动到最上面。</li></ul><p>图解示例如下：</p><p>第一步：右键点击我的电脑并选择属性。</p><p>（如果无法出现第二步界面，可以打开我的电脑之后右键点击空白处）</p><p>第二步：点击高级系统设置。</p><img src="image-20221227203939392.png" alt="image-20221227203939392" style="zoom:50%;" /><p>第三步：选择高级，再点击下面的环境变量。</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227204029393.png" alt="image-20221227204029393"></p><p>第四步：找系统变量里面的PATH</p><p>第五步：点击新建，把软件的完整路径，配置到PATH当中，再点击确定即可。</p><p>第六步：（可做可不做）点击上移，把当前配置的路径移动到最上面。</p><p>移动的好处：在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上面查找的速度比较快。</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227204132283.png" alt="image-20221227204132283"></p><h2 id="2-java概述"><a href="#2-java概述" class="headerlink" title="2. java概述"></a>2. java概述</h2><h3 id="2-1-java是什么"><a href="#2-1-java是什么" class="headerlink" title="2.1 java是什么"></a>2.1 java是什么</h3><p>Java是一门非常火的计算机语言。（也叫做编程语言）</p><h3 id="2-2-下载和安装"><a href="#2-2-下载和安装" class="headerlink" title="2.2 下载和安装"></a>2.2 下载和安装</h3><p>JDK下载</p><p>官网：<a href="http://www.oracle.com/">http://www.oracle.com</a></p><p>针对不同的系统下载对应的版本</p><p><strong>注意</strong>：</p><p>​    1.傻瓜安装，下一步即可。</p><p>​    2.<strong>安装路径中不要包含中午和空格</strong>。</p><p>​    3.所有开发工具最好安装目录统一。</p><p>不要下载JDK18，有bug，中午会乱码。</p><h5 id="JDK安装目录"><a href="#JDK安装目录" class="headerlink" title="JDK安装目录"></a>JDK安装目录</h5><p>​    🎈bin:该路径下存放了各种工具命令。其中比较重要的有：javac和java（比较重要）。<br>​    conf:该路径下存放了相关配置文件。<br>​    include:该路径下存放了一些平台特定的头文件。</p><p>​    jmods:该路径下存放了各种模块。<br>​    legal:该路径下存放了各模块的授权文档。</p><p>​    lib:该路径下存放了工具的一些补充JAR包。</p><h3 id="2-3-HelloWorld案例"><a href="#2-3-HelloWorld案例" class="headerlink" title="2.3 HelloWorld案例"></a>2.3 HelloWorld案例</h3><p>​    HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="2-3-1-java程序开发运行流程"><a href="#2-3-1-java程序开发运行流程" class="headerlink" title="2.3.1 java程序开发运行流程"></a>2.3.1 java程序开发运行流程</h4><p>编写程序、编译程序、运行程序。</p><h4 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h4><ol><li>新建文本文档文件，修改名称为HelloWorld.java。</li></ol><p><strong>注意</strong>：后缀名为java的才是java文件。</p><ol start="2"><li>用记事本打开HelloWorld.java文件，输写程序内容。</li></ol><p><strong>注意</strong>：代码要跟我编写的完全保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>保存</li></ol><p><strong>注意</strong>：未保存的文件在左上角会有*符号标记</p><ol start="4"><li><p><strong>编译文件。编译后会产生一个class文件。</strong></p><p><strong>java文件：程序员自己编写的代码。</strong></p><p><strong>class文件：交给计算机执行的文件。</strong></p></li><li><p>运行代码</p><p><strong>注意</strong>：运行的是编译之后的class文件。</p></li></ol><blockquote><p>用到两个命令：</p><p>​    javac + 文件名 + 后缀名 （就是编译java文件）</p><p>​    java + 文件名（运行编译之后的class文件）</p></blockquote><h3 id="2-4-HelloWorld案例常见问题"><a href="#2-4-HelloWorld案例常见问题" class="headerlink" title="2.4 HelloWorld案例常见问题"></a>2.4 HelloWorld案例常见问题</h3><h4 id="2-4-1-BUG"><a href="#2-4-1-BUG" class="headerlink" title="2.4.1 BUG"></a>2.4.1 BUG</h4><p>​    在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p><h4 id="2-4-2-BUG的解决"><a href="#2-4-2-BUG的解决" class="headerlink" title="2.4.2 BUG的解决"></a>2.4.2 BUG的解决</h4><ol><li>具备识别BUG的能力：多看</li><li>具备分析BUG的能力：多思考，多查资料</li><li>具备解决BUG的能力：多尝试，多总结</li></ol><h4 id="2-4-3-HelloWorld常见问题"><a href="#2-4-3-HelloWorld常见问题" class="headerlink" title="2.4.3 HelloWorld常见问题"></a>2.4.3 HelloWorld常见问题</h4><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀.class</p><p>…</p><h4 id="常见错误代码1："><a href="#常见错误代码1：" class="headerlink" title="常见错误代码1："></a>常见错误代码1：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">publicclass HelloWorld&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    public和class之间缺少一个空格。</p><p>技巧：一般来讲在单词之间的空格是不能省略的。</p><p>​    如果是单词和符号之间的空格是可以省略的。</p><h4 id="常见错误代码2："><a href="#常见错误代码2：" class="headerlink" title="常见错误代码2："></a>常见错误代码2：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        system.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    system首字母必须大写。</p><p>技巧：</p><p>​    Java代码中，是严格区分大小写的。</p><p>​    所以该大写的地方一定要大写，该小写的地方一定要小写。多多练习。</p><h4 id="常见错误代码3："><a href="#常见错误代码3：" class="headerlink" title="常见错误代码3："></a>常见错误代码3：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(HelloWorld);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    第三行代码中的HelloWorld必须用双引号引起来，否则就会出现问题。</p><h4 id="常见错误代码4："><a href="#常见错误代码4：" class="headerlink" title="常见错误代码4："></a>常见错误代码4：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>​    在以后代码当中，所有的标点符号必须是英文状态下的。</p><p>技巧：</p><p>​    可以在输入法中进行对应的设置。</p><h3 id="2-5-环境变量"><a href="#2-5-环境变量" class="headerlink" title="2.5 环境变量"></a>2.5 环境变量</h3><h4 id="2-5-1-为什么配置环境变量"><a href="#2-5-1-为什么配置环境变量" class="headerlink" title="2.5.1 为什么配置环境变量"></a>2.5.1 为什么配置环境变量</h4><p>​    开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。</p><p>注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。</p><h4 id="2-5-2配置方式"><a href="#2-5-2配置方式" class="headerlink" title="2.5.2配置方式"></a>2.5.2配置方式</h4><p><img src="/image-20210923091654365.png" alt="image-20210923091654365"></p><p>以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。</p><p>①<strong>JAVA_HOME</strong>：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091710450.png" alt="image-20210923091710450"></p><p>②<strong>Path</strong>：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091721035.png" alt="image-20210923091721035"></p><h4 id="2-5-3-win10的bug"><a href="#2-5-3-win10的bug" class="headerlink" title="2.5.3 win10的bug"></a>2.5.3 win10的bug</h4><p>当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。</p><p>步骤：</p><ul><li><p>还是要配置JAVA_HOME给以后的相关软件去使用</p></li><li><p>我们可以把java和javac的完整路径配置到PATH当中。</p><p>E:\develop\JDK\bin</p></li></ul><h2 id="3-Notepad"><a href="#3-Notepad" class="headerlink" title="3.Notepad++"></a>3.Notepad++</h2><h3 id="3-1-Notepad记事本"><a href="#3-1-Notepad记事本" class="headerlink" title="3.1 Notepad记事本"></a>3.1 Notepad记事本</h3><p>高级记事本<br>有行号，而且ava中的一些特殊单词会高亮显示</p><h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><p>傻瓜式安装，直接点击下一步就可以了。</p><p>​    对安装路径有两个小建议：</p><ul><li>路径不要有中文，不要有空格，不要有一些特殊符号</li><li>建议最好把所有的跟开发相关的软件都放在一起，方便管理。</li></ul><h3 id="3-3-设置"><a href="#3-3-设置" class="headerlink" title="3.3 设置"></a>3.3 设置</h3><p>​    右键点击java文件，选择edit with notepad++。</p><p>​    点击设置，再点击首选项。在弹出的页面当中，左侧选择新建，中间选择Java，右侧选择ANSI。</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227211339166.png" alt="image-20221227211339166"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227211445432.png" alt="image-20221227211445432"></p><h3 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h3><p>​    利用notepad++去编写一个HelloWorld并能成功编译和运行。</p><h2 id="4-Java语言的发展"><a href="#4-Java语言的发展" class="headerlink" title="4  Java语言的发展"></a>4  Java语言的发展</h2><p>三个版本：</p><ul><li>Java5.0：这是Java的第一个大版本更新。</li><li><strong>Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。</strong></li><li>Java15.0：这个是我们课程中学习的版本。</li></ul><p>解惑：</p><p>​    我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？</p><p>向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。</p><p>举例：</p><p>用8版本开发的代码，用11版本能运行吗？必须可以的。</p><p>用11版本开发的代码，用8版本能运行吗？不一定。</p><p>如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。</p><p>如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。</p><h3 id="4-1-Java的三大平台"><a href="#4-1-Java的三大平台" class="headerlink" title="4.1 Java的三大平台"></a>4.1 Java的三大平台</h3><p>​    JavaSE、JavaME、JavaEE</p><h4 id="4-1-1-JavaSE"><a href="#4-1-1-JavaSE" class="headerlink" title="4.1.1 JavaSE"></a>4.1.1 JavaSE</h4><p>​    是其他两个版本的基础。</p><h4 id="4-1-2-JavaME"><a href="#4-1-2-JavaME" class="headerlink" title="4.1.2 JavaME"></a>4.1.2 JavaME</h4><p>​    Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p><p>​    其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p><p>​    但是，安卓也是可以用Java来开发的。</p><h4 id="4-1-3-JavaEE"><a href="#4-1-3-JavaEE" class="headerlink" title="4.1.3 JavaEE"></a>4.1.3 JavaEE</h4><p>​    用于Web方向的网站开发。（主要从事后台服务器的开发）</p><p>​    在服务器领域，Java是当之无愧的龙头老大。</p><h3 id="4-2-Java的主要特性"><a href="#4-2-Java的主要特性" class="headerlink" title="4.2  Java的主要特性"></a>4.2  Java的主要特性</h3><ul><li><p><strong>面向对象</strong></p></li><li><p><strong>安全性</strong></p></li><li><p><strong>多线程</strong></p></li><li><p><strong>简单易用</strong></p></li><li><p><strong>开源</strong></p></li><li><p><strong>跨平台</strong></p></li></ul><h3 id="4-3-高级语言的编译运行方式"><a href="#4-3-高级语言的编译运行方式" class="headerlink" title="4.3 高级语言的编译运行方式"></a>4.3 高级语言的编译运行方式</h3><p> 1.编译型<br> 2.解释型<br> 3.混合型：半编译，半解释</p><p>编译型：</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220540696.png" alt="image-20221227220540696"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220141760.png" alt="不同平台的编译"></p><p>本图的细节 ： 不同平台重新编译一次，编译成三个不同的文件</p><p>解释型：</p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220330674.png" alt="解释型过程"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220405230.png" alt="image-20221227220405230"></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221227220432293.png" alt="混合型编译运行过程"></p><h4 id="4-4-Java语言跨平台的原理-Write-Once-Run-Anywhere"><a href="#4-4-Java语言跨平台的原理-Write-Once-Run-Anywhere" class="headerlink" title="4.4 Java语言跨平台的原理 (Write Once Run Anywhere)"></a>4.4 Java语言跨平台的原理 (Write Once Run Anywhere)</h4><ul><li>操作系统本身其实是不认识Java语言的。</li><li><strong>但是针对于不同的操作系统，Java提供了不同的虚拟机。</strong></li></ul><p><strong>虚拟机会把Java语言翻译成操作系统能看得懂的语言。</strong></p><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091350952-16721482793651.png" alt="跨平台工作原理"></p><h3 id="✨4-4-JRE和JDK"><a href="#✨4-4-JRE和JDK" class="headerlink" title="✨4.4  JRE和JDK"></a>✨4.4  JRE和JDK</h3><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20210923091544110-16721482793652.png" alt="image-20210923091544110"></p><p>JVM（Java Virtual Machine），Java虚拟机</p><p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：<strong>我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</strong></p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><h3 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h3><p>  在程序指定位置添加的说明性文字</p><p>简单的理解，就是对代码的一种解释</p><p>方便自已和他人阅读</p><h3 id="5-1-2-注释的分类"><a href="#5-1-2-注释的分类" class="headerlink" title="5.1.2 注释的分类"></a>5.1.2 注释的分类</h3><p>1.单行注释</p><blockquote><p>//注释信息</p></blockquote><p>2.多行注释：格式</p><blockquote><p>/*注释信息*/</p></blockquote><p>不能嵌套运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  wode  /*  nide mingzi */</span>   */</span><br></pre></td></tr></table></figure><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221228194938423.png" alt="多行注释嵌套"></p><p>3.文档注释</p><blockquote><p>/**  注释信息*/</p></blockquote><p>文档注释暂时用不上。</p><p>注释不会影响代码运行结果</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">knowledge</span> &#123;</span><br><span class="line"><span class="comment">//叫做main方法，表示程序的主入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*叫做输出语句（打印语句）</span></span><br><span class="line"><span class="comment">会把小括里面的内容进行输出打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello world!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-关键字"><a href="#6-关键字" class="headerlink" title="6 关键字"></a>6 关键字</h2><h3 id="6-1-含义"><a href="#6-1-含义" class="headerlink" title="6.1 含义"></a>6.1 含义</h3><p>​        被java<strong>赋予了特定含义</strong>的<strong>英文单词</strong>。</p><h3 id="6-2-特点"><a href="#6-2-特点" class="headerlink" title="6.2 特点"></a>6.2 特点</h3><p>​    1.关键字的字母<strong>全部小写</strong>。</p><p>​    2.常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。</p><h3 id="6-3-常见的关键字"><a href="#6-3-常见的关键字" class="headerlink" title="6.3 常见的关键字"></a>6.3 常见的关键字</h3><p>​        1. <strong>class</strong> ：用于（创建/定义）<strong>一个类是Java最基本的组成单元</strong>。</p><p>​        </p><h2 id="7-字面量"><a href="#7-字面量" class="headerlink" title="7 字面量"></a>7 字面量</h2><h3 id="7-1-含义"><a href="#7-1-含义" class="headerlink" title="7.1 含义"></a>7.1 含义</h3><p>​        告诉数据在程序中的书写格式 。（就是数值或符号）</p><h3 id="7-2-字面量的分类"><a href="#7-2-字面量的分类" class="headerlink" title="7.2 字面量的分类"></a>7.2 字面量的分类</h3><table><thead><tr><th align="left">字面量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td align="left">整数类型</td><td>不带小数的数字</td><td>666，-8</td></tr><tr><td align="left">小数类型</td><td>带小数点的数字</td><td>13.2，-9.0</td></tr><tr><td align="left">字符串类型</td><td>用双引号括起来的内容</td><td>“黑哦了 hello”</td></tr><tr><td align="left">字符类型</td><td>单引号括起来，内容只有一个</td><td>‘h’，’我’</td></tr><tr><td align="left">布尔类型</td><td>布尔值，表示真假</td><td>只有两个值：true false</td></tr><tr><td align="left">空类型</td><td>一个特殊的值，空值</td><td>值是：null</td></tr></tbody></table><p>注意：</p><p>1.null不能直接打印，如果我们打印null ，只能用字符串输出</p><p>2.true false 是关键字，输出直接输出 true 和 false</p><h3 id="7-3-特殊字符的字面量"><a href="#7-3-特殊字符的字面量" class="headerlink" title="7.3 特殊字符的字面量"></a>7.3 特殊字符的字面量</h3><blockquote><ol><li>\t 在打印的时候，把前面的字符串的长度补齐到八，<strong>或者8的整数倍</strong>，最少补一个空格最多补八个空格</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//\t 制表符 目的：熟悉制表符基本用法</span></span><br><span class="line">System.out.println(<span class="string">&quot;name&quot;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>null</li></ol><h3 id="7-4-字面量的默认值"><a href="#7-4-字面量的默认值" class="headerlink" title="7.4 字面量的默认值"></a>7.4 字面量的默认值</h3><p>Java程序中，任何变量必须初始化后才能使用。</p><table><thead><tr><th>数据类型</th><th>初始值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>char</td><td>‘u0000’（null）</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>所有引用类型</td><td>null</td></tr></tbody></table><p> 但并不是所以的未初始化的变量都会有默认值。</p><h2 id="8-变量"><a href="#8-变量" class="headerlink" title="8.变量"></a>8.变量</h2><h3 id="8-1-变量的定义格式"><a href="#8-1-变量的定义格式" class="headerlink" title="8.1 变量的定义格式"></a>8.1 变量的定义格式</h3><p>​        <em><strong><u>==数据类型 变量名 = 数据值；==</u></strong></em></p><p>数据类型：空间中储存的数据，加入类型限制：整数或小数……</p><p>变量名：为空间起的名字。</p><p>数据值：存在空间里面的数值。</p><p>​    数据类型：限定了变量当中能存储什么类型的数据。</p><p>​               如果要存10，那么数据类型就需要写整数类型。</p><p>​               如果要存10.0，那么数据类型就需要写小数类型。</p><p>​    变量名：其实就是这个容器的名字。</p><p>​            当以后想要使用变量里面的数据时，直接使用变量名就可以了。</p><p>​    数据值：真正存储在容器中的数据。</p><p>​    分号：表示语句的结束，就跟以前写作文时候的句号是一样的。</p><img src="image-20221228202035640.png" alt="变量本质"  /><p>作用：方便以后使用。<br>等号：赋值。</p><h3 id="8-2-变量使用方式"><a href="#8-2-变量使用方式" class="headerlink" title="8.2 变量使用方式"></a>8.2 变量使用方式</h3><p>1.参与打印</p><p>2.参与计算</p><p>3.修改记录的值</p><p><strong>注意事项</strong></p><p>​    1.👓只能存在一个值</p><p>​    2.🎎变量名不允许重复定义</p><p>​    3.🥼一条语句可以定义多个变量</p><p>​    4.🎡<strong>变量在使用之前一定要进行赋值</strong></p><p>​    5.<strong>🎭变量的作用范围</strong></p><h2 id="9-数据类型-（与变量定义公式中数据类型相关）"><a href="#9-数据类型-（与变量定义公式中数据类型相关）" class="headerlink" title="9 数据类型 （与变量定义公式中数据类型相关）"></a>9 数据类型 （与变量定义公式中数据类型相关）</h2><h3 id="9-1-类型"><a href="#9-1-类型" class="headerlink" title="9.1 类型"></a>9.1 类型</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.<strong>基本数据类型</strong></h4><table><thead><tr><th align="left">数据类型</th><th align="left">关键字</th><th align="left">内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td align="left">整数</td><td align="left">byte</td><td align="left">1</td><td>负的2的7次方 ~ 2的7次方-1(-128~127)</td></tr><tr><td align="left"></td><td align="left">short</td><td align="left">2</td><td>负的2的15次方 ~ 2的15次方-1(-32768~32767)</td></tr><tr><td align="left"></td><td align="left">int（默认）</td><td align="left">4</td><td>负的2的31次方 ~ 2的31次方-1</td></tr><tr><td align="left"></td><td align="left">long</td><td align="left">8</td><td>负的2的63次方 ~ 2的63次方-1</td></tr><tr><td align="left">浮点数</td><td align="left">float</td><td align="left">4</td><td>1.401298e-45 ~ 3.402823e+38</td></tr><tr><td align="left"></td><td align="left">double（默认）</td><td align="left">8</td><td>4.9000000e-324 ~ 1.797693e+308</td></tr><tr><td align="left">字符</td><td align="left">char</td><td align="left">2</td><td>0-65535</td></tr><tr><td align="left">布尔</td><td align="left">boolean</td><td align="left">1</td><td>true，false</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>​    e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>​    在java中整数默认是int类型，浮点数默认是double类型。</p><p><strong>需要记住的点：</strong></p><p>1.byte类型的取值范围：</p><p>​    -128 ~ 127</p><p>2.int类型的大概取值范围：</p><p>​    -21亿多  ~ 21亿多</p><p>3.整数类型和小数类型的取值范围大小关系：</p><p>​    double &gt; float &gt; long &gt; int &gt; short &gt; byte</p><p>最为常用的数据类型选择：</p><ul><li><p>在定义变量的时候，要根据实际的情况来选择不同类型的变量。</p><p>比如：人的年龄，可以选择byte类型。</p><p>比如：地球的年龄，可以选择long类型。</p></li><li><p>如果整数类型中，不太确定范围，那么默认使用int类型。</p></li><li><p>如果小数类型中，不太确定范围，那么默认使用double类型。</p></li><li><p>如果要定义字符类型的变量，那么使用char</p></li><li><p>如果要定义布尔类型的变量，那么使用boolean</p></li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h4><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li><strong>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</strong></li><li><strong>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以</strong>）**</li></ul><h4 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h4><h2 id="10-标识符-（与变量定义式中变量名有关）"><a href="#10-标识符-（与变量定义式中变量名有关）" class="headerlink" title="10 标识符  （与变量定义式中变量名有关）"></a>10 标识符  （与变量定义式中变量名有关）</h2><h3 id="10-1-含义"><a href="#10-1-含义" class="headerlink" title="10.1 含义"></a>10.1 含义</h3><p>​        就是给类，方法，变量等起的名字。</p><h3 id="10-2-命名规则"><a href="#10-2-命名规则" class="headerlink" title="10.2 命名规则"></a>10.2 命名规则</h3><p>必须要这么做，否则代码会报错。</p><ul><li><strong>必须由数字、字母、下划线_、美元符号$组成。</strong></li><li><strong>数字不能开头</strong></li><li><strong>不能是关键字</strong></li><li><strong>区分大小写的。</strong></li></ul><p><img src="/2022/12/27/java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/image-20221228204704380.png" alt="练习题"></p><h3 id="10-3-小驼峰命名法"><a href="#10-3-小驼峰命名法" class="headerlink" title="10.3 小驼峰命名法"></a>10.3 小驼峰命名法</h3><p>适用于<strong>变量名</strong>和<strong>方法名</strong></p><ul><li><p>如果是一个单词，那么全部小写，比如：name</p></li><li><p><strong>如果是多个单词，那么从第二个单词开始，首字母大写</strong>，比如：firstName、maxAge</p></li></ul><h3 id="10-4-大驼峰命名法"><a href="#10-4-大驼峰命名法" class="headerlink" title="10.4 大驼峰命名法"></a>10.4 大驼峰命名法</h3><p>适用于类名</p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。</p></li><li><p><strong>如果是多个单词，那么每一个单词首字母都需要大写</strong>。比如：HelloWorld</p></li></ul><p>不管起什么名字，都要做到见名知意。</p><h3 id="阿里巴巴命名规范细节："><a href="#阿里巴巴命名规范细节：" class="headerlink" title="阿里巴巴命名规范细节："></a>阿里巴巴命名规范细节：</h3><ol><li><p><strong>尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。</strong></p><p>正确：alibaba、hangzhou、nanjing</p><p>错误：jiage、dazhe</p></li><li><p><strong>平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。</strong></p><p>错误：_name</p><p>正确：name</p></li></ol><h2 id="11-键盘录入"><a href="#11-键盘录入" class="headerlink" title="11 键盘录入"></a>11 键盘录入</h2><p>键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。</p><p>使用步骤：</p><p>第一步：</p><p>​    <strong>导包</strong>：其实就是表示先找到Scanner这个类在哪。</p><p>第二步：</p><p>​    <strong>创建对象</strong>：其实就表示申明一下，我准备开始用Scanner这个类了。</p><p>第三步：</p><p>​    <strong>接收数据</strong>：也是真正干活的代码。<strong>nextInt 中I 大写。</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包，其实就是先找到Scanner这个类在哪</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//3.接收数据</span></span><br><span class="line"><span class="comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-单选题"><a href="#1-单选题" class="headerlink" title="1. 单选题"></a>1. 单选题</h2><p>台式机，安卓手机，iPhone手机，他们其实都是计算机，计算机干的事情就是严格的执行人的指令，但是目前的科技条件下，电脑仍然有一个很大的短板，这个短板是？</p><p>A.思考</p><p>B.计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   计算机最擅长的是运行固定的程序，就目前而言，计算机还缺少思考的能力。包括目前的人工智能，也缺少类似于人的思考过程。</span><br><span class="line">我们以下棋的人工智能为例，包括五子棋，国际象棋，围棋等。在以前，计算机会根据对手的每一步，计算自己所有步骤的胜率，根据结果找出最优的下法。其中最杰出的代表就是1997年深蓝战胜了人类的国际象棋冠军卡斯帕罗夫。在国际象棋中，步骤是有限的，深蓝就在这有限个走法中找到胜率最大的。这种把所有情况都考虑到的方式叫做穷举法，适用于不是很复杂的情况，这是以前的人工智能。但是这种方式是有弊端的，比如围棋，围棋中可走的步数就太多了，计算量太大，利用穷举法就不现实，所以在下围棋的时候就会更换算法，比如：在201年AlphaGo对战人类顶级围棋大师的时候，就没有采取穷举法，而是借鉴了人类的思维习惯：推演。也就是，走一步，看三步。首先会判断，在哪几个地方可以落子，然后再判断每一个地方的胜率，找出胜率最大的，这样就不需要把整个棋盘中可以落子的所有地方都考虑完毕，大大减少了计算的时间。但是这种方式也是程序员提前写好的程序，还不能算是自我思考。</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>计算机不能思考，那他是如何工作的呢，下面的描述哪个是对的？</p><p>A.等待人工智能的进一步发展，计算机能自己思考</p><p>B.人类告诉计算机如何计算，规则是什么</p><p><strong>B</strong> </p><h2 id="2-多选题"><a href="#2-多选题" class="headerlink" title="2.多选题"></a>2.多选题</h2><p>任何计算机能执行的东西都是程序，下面的内容哪些是程序？</p><p>A.操作系统</p><p>B.360浏览器</p><p>C.安卓app</p><p>D.电脑病毒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 只要是我们人为编写的，都是程序。</span><br><span class="line">计算机中的程序有系统软件还有应用软件。</span><br><span class="line">关于计算机的其他知识我已录了视频，可以下载观看。</span><br><span class="line">链接：https://pan.baidu.com/s/1et04S2zgVInVNwvmnTuIfw </span><br><span class="line">提取码：m6ga</span><br><span class="line">答案：ABCD</span><br></pre></td></tr></table></figure><h2 id="3-流程考察题"><a href="#3-流程考察题" class="headerlink" title="3.流程考察题"></a>3.流程考察题</h2><p>大多数程序都是顺序结构，计算机一步一步的执行我们的指令，请大家为黑马机器人排列指令，完成机器人进屋的操作</p><p>A.把门拉开</p><p>B.开锁</p><p>C.进入房间</p><p>D.关上房门</p><h2 id="4-流程考察题"><a href="#4-流程考察题" class="headerlink" title="4.流程考察题"></a>4.流程考察题</h2><p>请给下面的步骤排序，制作麦辣鸡腿堡</p><p>A.把第一片面包和第二片面包夹在一起</p><p>B.在第一片面包上面放麦辣鸡酱</p><p>C.拿两片面包</p><p>D.在第二片面包上放麦辣鸡</p><h2 id="题目1（选择）"><a href="#题目1（选择）" class="headerlink" title="题目1（选择）"></a>题目1（选择）</h2><p>下列关于java变量声明那个是错误的：</p><p>A . int x = 5;</p><p>B. double d = 3.14;</p><p>C. char grade = ‘C’;</p><p>D. String name = ‘黑马程序员’;</p><h2 id="题目2（看代码说结果）"><a href="#题目2（看代码说结果）" class="headerlink" title="题目2（看代码说结果）"></a>题目2（看代码说结果）</h2><p>看代码说结果，不要去运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line">money = money + <span class="number">5</span>;</span><br><span class="line">money -= <span class="number">2.5</span>;</span><br><span class="line">money = money + <span class="number">10</span>;</span><br><span class="line">money = money -<span class="number">3</span>;</span><br><span class="line">System.out.println(money)</span><br></pre></td></tr></table></figure><h2 id="题目3-（代码题）"><a href="#题目3-（代码题）" class="headerlink" title="题目3:（代码题）"></a>题目3:（代码题）</h2><p>请用代码描述下列银行流水变化过程：</p><ol><li>小明账户bankBalance初始值有500.00元</li><li>存入250元</li><li>支出100元</li><li>打印剩余存款</li></ol><h2 id="题目4：（选择题）"><a href="#题目4：（选择题）" class="headerlink" title="题目4：（选择题）"></a>题目4：（选择题）</h2><p>变量名是一个单词或者是一组单词，用来描述一个数据的含义，方便人理解，变量名不能有空格。下面的名字哪些可以是变量名?  </p><p>A. mybirthday</p><p>B. myname  </p><p>C. my name </p><p>D. my birthday</p><p>E. 1987.  </p><p>F. ”传智播客” </p><h2 id="题目5：（选择题）"><a href="#题目5：（选择题）" class="headerlink" title="题目5：（选择题）"></a>题目5：（选择题）</h2><p>关于变量的说法哪些是对的?  </p><p>A. 一个变量-一次就可以存储很多种不同的数据</p><p>B. 变量是值的容器,定义变量可以存放值 </p><p>C. 变量可以随时修改存储数据的类型</p><p>D. 定义变量可以帮我们存储信息方便后面使用 </p><h2 id="题目6：（选择题）"><a href="#题目6：（选择题）" class="headerlink" title="题目6：（选择题）"></a>题目6：（选择题）</h2><p>下面代码哪些是创建一个变量?  </p><p>A. int myAge = 18;  </p><p>B. myName=’传智播客”;</p><p>C. myAge = 16;  </p><p>D. String myName ; </p><h2 id="题目7：（选择题）"><a href="#题目7：（选择题）" class="headerlink" title="题目7：（选择题）"></a>题目7：（选择题）</h2><p>int和float的区别是什么?  </p><p>A. 区别是没有区别  </p><p>B. int是变量, float是方法  </p><p>C. int是用来存放整数数据的变量类型，float是存放小数的</p><p>D. int类型的数据要用”， 引号引起来 </p><h2 id="题目8：（代码题）"><a href="#题目8：（代码题）" class="headerlink" title="题目8：（代码题）"></a>题目8：（代码题）</h2><p>变量应该是先声哪后使用,请完成下面代码  </p><p>A.声明字符串型变量name  </p><p>B.声明字符串型变量birthday</p><p>C.声明整数类型变量age  </p><p>D.声明float类型变量money </p><h2 id="题目9（代码题）"><a href="#题目9（代码题）" class="headerlink" title="题目9（代码题）"></a>题目9（代码题）</h2><p>请编写程序，分别定义8种基本数据类型的变量，并打印变量的值。</p><h3 id="训练目标"><a href="#训练目标" class="headerlink" title="训练目标"></a>训练目标</h3><p>java中的八种基本基本数据类型和变量的定义</p><h3 id="训练提示"><a href="#训练提示" class="headerlink" title="训练提示"></a>训练提示</h3><p>1、java中的8种基本数据类型都有什么？</p><p>2、定义变量的格式是什么？</p><p>3、变量名该怎样定义？</p><p>4、该怎样使用变量？</p><h3 id="参考方案"><a href="#参考方案" class="headerlink" title="参考方案"></a>参考方案</h3><p>定义变量，并输出变量的值。</p><h3 id="训练步骤"><a href="#训练步骤" class="headerlink" title="训练步骤"></a>训练步骤</h3><p>1、创建java文件，定义类Test03，编写主方法。</p><p>2、在java语言中，定义变量必须明确变量的数据类型。八种基本数据类型包括byte、short、int、long、float、double、char、boolean。</p><p>3、定义变量的格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">数据类型 变量名; <span class="comment">// 先声明</span></span><br><span class="line">变量名 = 初始化值; <span class="comment">// 再赋值</span></span><br></pre></td></tr></table></figure><p>4、可以包含英文字母、数字字符、英文下划线（_）和英文美元符（$），并且不能以数字开头。在开发中，java变量的命名又最好符合“小驼峰”式的惯例规范，并且最好做到见名知意。</p><p>5、在输出语句中，直接调用变量名即可。</p><p>6、编译并运行代码，查看输出结果。</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目10（代码题）"><a href="#题目10（代码题）" class="headerlink" title="题目10（代码题）"></a>题目10（代码题）</h2><p>请根据下列描述，选用合适的数据类型定义变量，并输出变量的值。</p><p>1、班级里有100个学员。</p><p>2、某商品价格55.55元。</p><p>3、地球已经诞生超过46亿年。</p><p>4、“5是偶数”这句话的描述是假的。</p><p>输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">55.55</span></span><br><span class="line"><span class="number">4600000000</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="训练目标-1"><a href="#训练目标-1" class="headerlink" title="训练目标"></a>训练目标</h3><p>变量的定义</p><h3 id="训练提示-1"><a href="#训练提示-1" class="headerlink" title="训练提示"></a>训练提示</h3><p>1、不同的数据信息需要使用不同的数据类型，可以根据不同数据类型的大小以及特点选择合适的类型来定义变量，描述事物的信息。</p><h3 id="参考方案-1"><a href="#参考方案-1" class="headerlink" title="参考方案"></a>参考方案</h3><p>定义变量描述信息。</p><h3 id="训练步骤-1"><a href="#训练步骤-1" class="headerlink" title="训练步骤"></a>训练步骤</h3><p>1、创建java文件，定义类Test04，编写主方法。</p><p>2、在主方法中定义不同的变量描述题目中的信息。</p><p>​    2.1、学员数量，可以用默认的整数类型int表示</p><p>​    2.2、商品价格，使用默认的浮点数类型double表示</p><p>​    2.3、天文数字，可以使用长整型long表示</p><p>​    2.4、一个描述真或者假，只有两种状态，可以使用boolean类型</p><p>3、使用输出语句，输出变量。</p><p>4、编译并运行，查看输出结果。</p><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目11（代码题）"><a href="#题目11（代码题）" class="headerlink" title="题目11（代码题）"></a>题目11（代码题）</h2><p>在今天的课程学习中，我们知道了java的8种基本数据类型，随着后续学习，我们还将学习引用数据类型。此时由于练习需要，我们要了解其中一个最常用的引用数据类型-字符串（String），字符串变量的一种定义方式与基本数据类型一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型 变量名 = 初始化值；</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 其中String为数据类型，str为变量名（符合标识符规则即可），&quot;中国&quot;是我们学习的字符串常量值。</span></span><br><span class="line"><span class="comment">// 总体即表示：将字符串&quot;abc&quot;，赋值给字符串类型的变量str。</span></span><br><span class="line"><span class="comment">// 输出结果为：中国</span></span><br></pre></td></tr></table></figure><p>请根据以上描述，选用合适的数据类型定义变量用于描述一个学员的信息，并将其输出到屏幕上。输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">************************</span><br><span class="line">我的姓名是：张三</span><br><span class="line">我的性别是：男</span><br><span class="line">我的年龄是：<span class="number">18</span></span><br><span class="line">我的地址是：xx省xx市</span><br><span class="line">我的饭卡余额是：<span class="number">55.55</span>元</span><br><span class="line">************************</span><br></pre></td></tr></table></figure><h3 id="训练目标-2"><a href="#训练目标-2" class="headerlink" title="训练目标"></a>训练目标</h3><p>数据类型、变量的定义和使用、字符串连接符</p><h3 id="训练提示-2"><a href="#训练提示-2" class="headerlink" title="训练提示"></a>训练提示</h3><p>1、根据题目要求，学员的信息包含姓名、性别、年龄、地址、余额，这些信息分别应该使用什么样的数据类型来存储呢？</p><p>2、在输出语句中，为了按照题目要求的格式输出，需要将一些已知字符串和变量进行拼接，比如：”我的姓名是：” + name</p><h3 id="参考方案-2"><a href="#参考方案-2" class="headerlink" title="参考方案"></a>参考方案</h3><h3 id="训练步骤-2"><a href="#训练步骤-2" class="headerlink" title="训练步骤"></a>训练步骤</h3><p>1、创建java文件，定义类Test03，编写主方法。</p><p>2、在主方法中定义变量用于存储学员信息。</p><p>2.1、姓名、性别、地址都可以使用字符串类型</p><p>2.2、年龄为整数数据，使用int类型</p><p>2.3、余额为小数类型，使用double类型</p><p>3、将已知字符串与变量使用“+”拼接在一起输出。</p><p>4、保存文件，编译运行，查看结果。</p>]]></content>
      
      
      <categories>
          
          <category> java入门 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2022/12/27/hexo/"/>
      <url>/2022/12/27/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>nodejs选择LTS版本就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><p>在开hexo博客的文件夹中,用git打开<br>输入  </p><blockquote><p>npm install -g hexo-cli &gt;</p></blockquote><p>   安装完之后可以用  </p><blockquote><p>hexo -v</p></blockquote><p>查看版本  </p><p>之后初始化hexo,初始化之前,文件夹里没有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">//blog 是博客所初始化的名字,可以根据自己的喜好定义</span><br></pre></td></tr></table></figure><p>然后进入blog文件<br>执行下面的命令   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**</p><p>最后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server //或者 hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入localhost:4000,即查看博客</p><h3 id="4-Github创建个人仓库"><a href="#4-Github创建个人仓库" class="headerlink" title="4.Github创建个人仓库"></a>4.Github创建个人仓库</h3><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。其他的地方随意设置.</p><h3 id="5-生成shh添加到github中"><a href="#5-生成shh添加到github中" class="headerlink" title="5.生成shh添加到github中"></a>5.生成shh添加到github中</h3><p>回到git bash中  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道  你是不是对应它的账户。<br>可以用以下两条，检查一下你有没有输对  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>然后会告诉你在本地生成.shh的文件的路径,按路径找到,     </p><p><img src="/2022/12/27/hexo/image-20221227193242479.png" alt="image-20221227193242479"><br>按图中勾住所圈的即可找到文件  </p><p>​    ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。</p><p><img src="/2022/12/27/hexo/3194ad0a9d04d94c09485122932968f3.png" alt="img"><br>在git查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="6-将hexo-部署到github中"><a href="#6-将hexo-部署到github中" class="headerlink" title="6.将hexo 部署到github中"></a>6.将hexo 部署到github中</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>repo可以去找仓库code那儿和shh混到一块的网址<br>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p><strong>注意:hexo g不能少</strong></p><h3 id="hexo的基本操作"><a href="#hexo的基本操作" class="headerlink" title="hexo的基本操作!"></a>hexo的基本操作!</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test_my_site</title>
      <link href="/2022/12/27/test-my-site/"/>
      <url>/2022/12/27/test-my-site/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/12/27/test-my-site/52daefd8b018b1983a324db970a3188d1daf4668.jpg" alt="52daefd8b018b1983a324db970a3188d1daf4668"><img src="/2022/12/27/test-my-site/e5155bac16407a1618099336b4f31996308098d6.jpg" alt="e5155bac16407a1618099336b4f31996308098d6"></p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/27/hello-world/"/>
      <url>/2022/12/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
